/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// EndpointGroupParameters defines the desired state of EndpointGroup
type EndpointGroupParameters struct {
	// Region is which region the EndpointGroup will be created.
	// +kubebuilder:validation:Required
	Region string `json:"region"`
	// The list of endpoint objects.
	EndpointConfigurations []*EndpointConfiguration `json:"endpointConfigurations,omitempty"`
	// The Amazon Web Services Region where the endpoint group is located. A listener
	// can have only one endpoint group in a specific Region.
	// +kubebuilder:validation:Required
	EndpointGroupRegion *string `json:"endpointGroupRegion"`
	// The time—10 seconds or 30 seconds—between each health check for an endpoint.
	// The default value is 30.
	HealthCheckIntervalSeconds *int64 `json:"healthCheckIntervalSeconds,omitempty"`
	// If the protocol is HTTP/S, then this specifies the path that is the destination
	// for health check targets. The default value is slash (/).
	HealthCheckPath *string `json:"healthCheckPath,omitempty"`
	// The port that Global Accelerator uses to check the health of endpoints that
	// are part of this endpoint group. The default port is the listener port that
	// this endpoint group is associated with. If listener port is a list of ports,
	// Global Accelerator uses the first port in the list.
	HealthCheckPort *int64 `json:"healthCheckPort,omitempty"`
	// The protocol that Global Accelerator uses to check the health of endpoints
	// that are part of this endpoint group. The default value is TCP.
	HealthCheckProtocol *string `json:"healthCheckProtocol,omitempty"`
	// Override specific listener ports used to route traffic to endpoints that
	// are part of this endpoint group. For example, you can create a port override
	// in which the listener receives user traffic on ports 80 and 443, but your
	// accelerator routes that traffic to ports 1080 and 1443, respectively, on
	// the endpoints.
	//
	// For more information, see Overriding listener ports (https://docs.aws.amazon.com/global-accelerator/latest/dg/about-endpoint-groups-port-override.html)
	// in the Global Accelerator Developer Guide.
	PortOverrides []*PortOverride `json:"portOverrides,omitempty"`
	// The number of consecutive health checks required to set the state of a healthy
	// endpoint to unhealthy, or to set an unhealthy endpoint to healthy. The default
	// value is 3.
	ThresholdCount *int64 `json:"thresholdCount,omitempty"`
	// The percentage of traffic to send to an Amazon Web Services Region. Additional
	// traffic is distributed to other endpoint groups for this listener.
	//
	// Use this action to increase (dial up) or decrease (dial down) traffic to
	// a specific Region. The percentage is applied to the traffic that would otherwise
	// have been routed to the Region based on optimal routing.
	//
	// The default value is 100.
	TrafficDialPercentage         *float64 `json:"trafficDialPercentage,omitempty"`
	CustomEndpointGroupParameters `json:",inline"`
}

// EndpointGroupSpec defines the desired state of EndpointGroup
type EndpointGroupSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       EndpointGroupParameters `json:"forProvider"`
}

// EndpointGroupObservation defines the observed state of EndpointGroup
type EndpointGroupObservation struct {
	// The list of endpoint objects.
	EndpointDescriptions []*EndpointDescription `json:"endpointDescriptions,omitempty"`
	// The Amazon Resource Name (ARN) of the endpoint group.
	EndpointGroupARN *string `json:"endpointGroupARN,omitempty"`

	CustomEndpointGroupObservation `json:",inline"`
}

// EndpointGroupStatus defines the observed state of EndpointGroup.
type EndpointGroupStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          EndpointGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// EndpointGroup is the Schema for the EndpointGroups API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type EndpointGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EndpointGroupSpec   `json:"spec"`
	Status            EndpointGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EndpointGroupList contains a list of EndpointGroups
type EndpointGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EndpointGroup `json:"items"`
}

// Repository type metadata.
var (
	EndpointGroupKind             = "EndpointGroup"
	EndpointGroupGroupKind        = schema.GroupKind{Group: CRDGroup, Kind: EndpointGroupKind}.String()
	EndpointGroupKindAPIVersion   = EndpointGroupKind + "." + GroupVersion.String()
	EndpointGroupGroupVersionKind = GroupVersion.WithKind(EndpointGroupKind)
)

func init() {
	SchemeBuilder.Register(&EndpointGroup{}, &EndpointGroupList{})
}
