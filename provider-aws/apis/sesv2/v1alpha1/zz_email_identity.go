/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// EmailIdentityParameters defines the desired state of EmailIdentity
type EmailIdentityParameters struct {
	// Region is which region the EmailIdentity will be created.
	// +kubebuilder:validation:Required
	Region string `json:"region"`
	// If your request includes this object, Amazon SES configures the identity
	// to use Bring Your Own DKIM (BYODKIM) for DKIM authentication purposes, or,
	// configures the key length to be used for Easy DKIM (https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html).
	//
	// You can only specify this object if the email identity is a domain, as opposed
	// to an address.
	DkimSigningAttributes *DkimSigningAttributes `json:"dkimSigningAttributes,omitempty"`
	// The email address or domain to verify.
	// +kubebuilder:validation:Required
	EmailIdentity *string `json:"emailIdentity"`
	// An array of objects that define the tags (keys and values) to associate with
	// the email identity.
	Tags                          []*Tag `json:"tags,omitempty"`
	CustomEmailIdentityParameters `json:",inline"`
}

// EmailIdentitySpec defines the desired state of EmailIdentity
type EmailIdentitySpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       EmailIdentityParameters `json:"forProvider"`
}

// EmailIdentityObservation defines the observed state of EmailIdentity
type EmailIdentityObservation struct {
	// An object that contains information about the DKIM attributes for the identity.
	DkimAttributes *DkimAttributes `json:"dkimAttributes,omitempty"`
	// The email identity type. Note: the MANAGED_DOMAIN identity type is not supported.
	IdentityType *string `json:"identityType,omitempty"`
	// Specifies whether or not the identity is verified. You can only send email
	// from verified email addresses or domains. For more information about verifying
	// identities, see the Amazon Pinpoint User Guide (https://docs.aws.amazon.com/pinpoint/latest/userguide/channels-email-manage-verify.html).
	VerifiedForSendingStatus *bool `json:"verifiedForSendingStatus,omitempty"`

	CustomEmailIdentityObservation `json:",inline"`
}

// EmailIdentityStatus defines the observed state of EmailIdentity.
type EmailIdentityStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          EmailIdentityObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// EmailIdentity is the Schema for the EmailIdentities API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type EmailIdentity struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EmailIdentitySpec   `json:"spec"`
	Status            EmailIdentityStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EmailIdentityList contains a list of EmailIdentities
type EmailIdentityList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EmailIdentity `json:"items"`
}

// Repository type metadata.
var (
	EmailIdentityKind             = "EmailIdentity"
	EmailIdentityGroupKind        = schema.GroupKind{Group: CRDGroup, Kind: EmailIdentityKind}.String()
	EmailIdentityKindAPIVersion   = EmailIdentityKind + "." + GroupVersion.String()
	EmailIdentityGroupVersionKind = GroupVersion.WithKind(EmailIdentityKind)
)

func init() {
	SchemeBuilder.Register(&EmailIdentity{}, &EmailIdentityList{})
}
