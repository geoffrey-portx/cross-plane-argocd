/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// GlobalClusterParameters defines the desired state of GlobalCluster
type GlobalClusterParameters struct {
	// Region is which region the GlobalCluster will be created.
	// +kubebuilder:validation:Required
	Region string `json:"region"`
	// The name for your database of up to 64 alphanumeric characters. If you don't
	// specify a name, Amazon Aurora doesn't create a database in the global database
	// cluster.
	//
	// Constraints:
	//
	//    * Can't be specified if SourceDBClusterIdentifier is specified. In this
	//    case, Amazon Aurora uses the database name from the source DB cluster.
	DatabaseName *string `json:"databaseName,omitempty"`
	// Specifies whether to enable deletion protection for the new global database
	// cluster. The global database can't be deleted when deletion protection is
	// enabled.
	DeletionProtection *bool `json:"deletionProtection,omitempty"`
	// The database engine to use for this global database cluster.
	//
	// Valid Values: aurora-mysql | aurora-postgresql
	//
	// Constraints:
	//
	//    * Can't be specified if SourceDBClusterIdentifier is specified. In this
	//    case, Amazon Aurora uses the engine of the source DB cluster.
	Engine *string `json:"engine,omitempty"`
	// The engine version to use for this global database cluster.
	//
	// Constraints:
	//
	//    * Can't be specified if SourceDBClusterIdentifier is specified. In this
	//    case, Amazon Aurora uses the engine version of the source DB cluster.
	EngineVersion *string `json:"engineVersion,omitempty"`
	// The Amazon Resource Name (ARN) to use as the primary cluster of the global
	// database.
	//
	// If you provide a value for this parameter, don't specify values for the following
	// settings because Amazon Aurora uses the values from the specified source
	// DB cluster:
	//
	//    * DatabaseName
	//
	//    * Engine
	//
	//    * EngineVersion
	//
	//    * StorageEncrypted
	SourceDBClusterIdentifier *string `json:"sourceDBClusterIdentifier,omitempty"`
	// Specifies whether to enable storage encryption for the new global database
	// cluster.
	//
	// Constraints:
	//
	//    * Can't be specified if SourceDBClusterIdentifier is specified. In this
	//    case, Amazon Aurora uses the setting from the source DB cluster.
	StorageEncrypted              *bool `json:"storageEncrypted,omitempty"`
	CustomGlobalClusterParameters `json:",inline"`
}

// GlobalClusterSpec defines the desired state of GlobalCluster
type GlobalClusterSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       GlobalClusterParameters `json:"forProvider"`
}

// GlobalClusterObservation defines the observed state of GlobalCluster
type GlobalClusterObservation struct {
	// A data object containing all properties for the current state of an in-process
	// or pending switchover or failover process for this global cluster (Aurora
	// global database). This object is empty unless the SwitchoverGlobalCluster
	// or FailoverGlobalCluster operation was called on this global cluster.
	FailoverState *FailoverState `json:"failoverState,omitempty"`
	// The Amazon Resource Name (ARN) for the global database cluster.
	GlobalClusterARN *string `json:"globalClusterARN,omitempty"`
	// Contains a user-supplied global database cluster identifier. This identifier
	// is the unique key that identifies a global database cluster.
	GlobalClusterIdentifier *string `json:"globalClusterIdentifier,omitempty"`
	// The list of primary and secondary clusters within the global database cluster.
	GlobalClusterMembers []*GlobalClusterMember `json:"globalClusterMembers,omitempty"`
	// The Amazon Web Services Region-unique, immutable identifier for the global
	// database cluster. This identifier is found in Amazon Web Services CloudTrail
	// log entries whenever the Amazon Web Services KMS key for the DB cluster is
	// accessed.
	GlobalClusterResourceID *string `json:"globalClusterResourceID,omitempty"`
	// Specifies the current state of this global database cluster.
	Status *string `json:"status,omitempty"`

	CustomGlobalClusterObservation `json:",inline"`
}

// GlobalClusterStatus defines the observed state of GlobalCluster.
type GlobalClusterStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          GlobalClusterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// GlobalCluster is the Schema for the GlobalClusters API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type GlobalCluster struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              GlobalClusterSpec   `json:"spec"`
	Status            GlobalClusterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GlobalClusterList contains a list of GlobalClusters
type GlobalClusterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GlobalCluster `json:"items"`
}

// Repository type metadata.
var (
	GlobalClusterKind             = "GlobalCluster"
	GlobalClusterGroupKind        = schema.GroupKind{Group: CRDGroup, Kind: GlobalClusterKind}.String()
	GlobalClusterKindAPIVersion   = GlobalClusterKind + "." + GroupVersion.String()
	GlobalClusterGroupVersionKind = GroupVersion.WithKind(GlobalClusterKind)
)

func init() {
	SchemeBuilder.Register(&GlobalCluster{}, &GlobalClusterList{})
}
