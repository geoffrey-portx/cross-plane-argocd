/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package accelerator

import (
	"github.com/aws/aws-sdk-go/aws/awserr"
	svcsdk "github.com/aws/aws-sdk-go/service/globalaccelerator"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/crossplane-contrib/provider-aws/apis/globalaccelerator/v1alpha1"
)

// NOTE(muvaf): We return pointers in case the function needs to start with an
// empty object, hence need to return a new pointer.

// GenerateDescribeAcceleratorInput returns input for read
// operation.
func GenerateDescribeAcceleratorInput(cr *svcapitypes.Accelerator) *svcsdk.DescribeAcceleratorInput {
	res := &svcsdk.DescribeAcceleratorInput{}

	if cr.Status.AtProvider.AcceleratorARN != nil {
		res.SetAcceleratorArn(*cr.Status.AtProvider.AcceleratorARN)
	}

	return res
}

// GenerateAccelerator returns the current state in the form of *svcapitypes.Accelerator.
func GenerateAccelerator(resp *svcsdk.DescribeAcceleratorOutput) *svcapitypes.Accelerator {
	cr := &svcapitypes.Accelerator{}

	if resp.Accelerator.AcceleratorArn != nil {
		cr.Status.AtProvider.AcceleratorARN = resp.Accelerator.AcceleratorArn
	} else {
		cr.Status.AtProvider.AcceleratorARN = nil
	}
	if resp.Accelerator.CreatedTime != nil {
		cr.Status.AtProvider.CreatedTime = &metav1.Time{*resp.Accelerator.CreatedTime}
	} else {
		cr.Status.AtProvider.CreatedTime = nil
	}
	if resp.Accelerator.DnsName != nil {
		cr.Status.AtProvider.DNSName = resp.Accelerator.DnsName
	} else {
		cr.Status.AtProvider.DNSName = nil
	}
	if resp.Accelerator.DualStackDnsName != nil {
		cr.Status.AtProvider.DualStackDNSName = resp.Accelerator.DualStackDnsName
	} else {
		cr.Status.AtProvider.DualStackDNSName = nil
	}
	if resp.Accelerator.Enabled != nil {
		cr.Spec.ForProvider.Enabled = resp.Accelerator.Enabled
	} else {
		cr.Spec.ForProvider.Enabled = nil
	}
	if resp.Accelerator.Events != nil {
		f5 := []*svcapitypes.AcceleratorEvent{}
		for _, f5iter := range resp.Accelerator.Events {
			f5elem := &svcapitypes.AcceleratorEvent{}
			if f5iter.Message != nil {
				f5elem.Message = f5iter.Message
			}
			if f5iter.Timestamp != nil {
				f5elem.Timestamp = &metav1.Time{*f5iter.Timestamp}
			}
			f5 = append(f5, f5elem)
		}
		cr.Status.AtProvider.Events = f5
	} else {
		cr.Status.AtProvider.Events = nil
	}
	if resp.Accelerator.IpAddressType != nil {
		cr.Spec.ForProvider.IPAddressType = resp.Accelerator.IpAddressType
	} else {
		cr.Spec.ForProvider.IPAddressType = nil
	}
	if resp.Accelerator.IpSets != nil {
		f7 := []*svcapitypes.IPSet{}
		for _, f7iter := range resp.Accelerator.IpSets {
			f7elem := &svcapitypes.IPSet{}
			if f7iter.IpAddressFamily != nil {
				f7elem.IPAddressFamily = f7iter.IpAddressFamily
			}
			if f7iter.IpAddresses != nil {
				f7elemf1 := []*string{}
				for _, f7elemf1iter := range f7iter.IpAddresses {
					var f7elemf1elem string
					f7elemf1elem = *f7elemf1iter
					f7elemf1 = append(f7elemf1, &f7elemf1elem)
				}
				f7elem.IPAddresses = f7elemf1
			}
			if f7iter.IpFamily != nil {
				f7elem.IPFamily = f7iter.IpFamily
			}
			f7 = append(f7, f7elem)
		}
		cr.Status.AtProvider.IPSets = f7
	} else {
		cr.Status.AtProvider.IPSets = nil
	}
	if resp.Accelerator.LastModifiedTime != nil {
		cr.Status.AtProvider.LastModifiedTime = &metav1.Time{*resp.Accelerator.LastModifiedTime}
	} else {
		cr.Status.AtProvider.LastModifiedTime = nil
	}
	if resp.Accelerator.Name != nil {
		cr.Spec.ForProvider.Name = resp.Accelerator.Name
	} else {
		cr.Spec.ForProvider.Name = nil
	}
	if resp.Accelerator.Status != nil {
		cr.Status.AtProvider.Status = resp.Accelerator.Status
	} else {
		cr.Status.AtProvider.Status = nil
	}

	return cr
}

// GenerateCreateAcceleratorInput returns a create input.
func GenerateCreateAcceleratorInput(cr *svcapitypes.Accelerator) *svcsdk.CreateAcceleratorInput {
	res := &svcsdk.CreateAcceleratorInput{}

	if cr.Spec.ForProvider.Enabled != nil {
		res.SetEnabled(*cr.Spec.ForProvider.Enabled)
	}
	if cr.Spec.ForProvider.IPAddressType != nil {
		res.SetIpAddressType(*cr.Spec.ForProvider.IPAddressType)
	}
	if cr.Spec.ForProvider.IPAddresses != nil {
		f2 := []*string{}
		for _, f2iter := range cr.Spec.ForProvider.IPAddresses {
			var f2elem string
			f2elem = *f2iter
			f2 = append(f2, &f2elem)
		}
		res.SetIpAddresses(f2)
	}
	if cr.Spec.ForProvider.Name != nil {
		res.SetName(*cr.Spec.ForProvider.Name)
	}
	if cr.Spec.ForProvider.Tags != nil {
		f4 := []*svcsdk.Tag{}
		for _, f4iter := range cr.Spec.ForProvider.Tags {
			f4elem := &svcsdk.Tag{}
			if f4iter.Key != nil {
				f4elem.SetKey(*f4iter.Key)
			}
			if f4iter.Value != nil {
				f4elem.SetValue(*f4iter.Value)
			}
			f4 = append(f4, f4elem)
		}
		res.SetTags(f4)
	}

	return res
}

// GenerateUpdateAcceleratorInput returns an update input.
func GenerateUpdateAcceleratorInput(cr *svcapitypes.Accelerator) *svcsdk.UpdateAcceleratorInput {
	res := &svcsdk.UpdateAcceleratorInput{}

	if cr.Status.AtProvider.AcceleratorARN != nil {
		res.SetAcceleratorArn(*cr.Status.AtProvider.AcceleratorARN)
	}
	if cr.Spec.ForProvider.Enabled != nil {
		res.SetEnabled(*cr.Spec.ForProvider.Enabled)
	}
	if cr.Spec.ForProvider.IPAddressType != nil {
		res.SetIpAddressType(*cr.Spec.ForProvider.IPAddressType)
	}
	if cr.Spec.ForProvider.Name != nil {
		res.SetName(*cr.Spec.ForProvider.Name)
	}

	return res
}

// GenerateDeleteAcceleratorInput returns a deletion input.
func GenerateDeleteAcceleratorInput(cr *svcapitypes.Accelerator) *svcsdk.DeleteAcceleratorInput {
	res := &svcsdk.DeleteAcceleratorInput{}

	if cr.Status.AtProvider.AcceleratorARN != nil {
		res.SetAcceleratorArn(*cr.Status.AtProvider.AcceleratorARN)
	}

	return res
}

// IsNotFound returns whether the given error is of type NotFound or not.
func IsNotFound(err error) bool {
	awsErr, ok := err.(awserr.Error)
	return ok && awsErr.Code() == "AcceleratorNotFoundException"
}
