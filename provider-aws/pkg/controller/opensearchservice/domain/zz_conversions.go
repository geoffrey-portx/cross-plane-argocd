/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package domain

import (
	"github.com/aws/aws-sdk-go/aws/awserr"
	svcsdk "github.com/aws/aws-sdk-go/service/opensearchservice"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/crossplane-contrib/provider-aws/apis/opensearchservice/v1alpha1"
)

// NOTE(muvaf): We return pointers in case the function needs to start with an
// empty object, hence need to return a new pointer.

// GenerateDescribeDomainInput returns input for read
// operation.
func GenerateDescribeDomainInput(cr *svcapitypes.Domain) *svcsdk.DescribeDomainInput {
	res := &svcsdk.DescribeDomainInput{}

	return res
}

// GenerateDomain returns the current state in the form of *svcapitypes.Domain.
func GenerateDomain(resp *svcsdk.DescribeDomainOutput) *svcapitypes.Domain {
	cr := &svcapitypes.Domain{}

	if resp.DomainStatus.ARN != nil {
		cr.Status.AtProvider.ARN = resp.DomainStatus.ARN
	} else {
		cr.Status.AtProvider.ARN = nil
	}
	if resp.DomainStatus.AccessPolicies != nil {
		cr.Spec.ForProvider.AccessPolicies = resp.DomainStatus.AccessPolicies
	} else {
		cr.Spec.ForProvider.AccessPolicies = nil
	}
	if resp.DomainStatus.AdvancedOptions != nil {
		f2 := map[string]*string{}
		for f2key, f2valiter := range resp.DomainStatus.AdvancedOptions {
			var f2val string
			f2val = *f2valiter
			f2[f2key] = &f2val
		}
		cr.Spec.ForProvider.AdvancedOptions = f2
	} else {
		cr.Spec.ForProvider.AdvancedOptions = nil
	}
	if resp.DomainStatus.AdvancedSecurityOptions != nil {
		f3 := &svcapitypes.AdvancedSecurityOptionsInput{}
		if resp.DomainStatus.AdvancedSecurityOptions.AnonymousAuthEnabled != nil {
			f3.AnonymousAuthEnabled = resp.DomainStatus.AdvancedSecurityOptions.AnonymousAuthEnabled
		}
		if resp.DomainStatus.AdvancedSecurityOptions.Enabled != nil {
			f3.Enabled = resp.DomainStatus.AdvancedSecurityOptions.Enabled
		}
		if resp.DomainStatus.AdvancedSecurityOptions.InternalUserDatabaseEnabled != nil {
			f3.InternalUserDatabaseEnabled = resp.DomainStatus.AdvancedSecurityOptions.InternalUserDatabaseEnabled
		}
		if resp.DomainStatus.AdvancedSecurityOptions.SAMLOptions != nil {
			f3f4 := &svcapitypes.SAMLOptionsInput{}
			if resp.DomainStatus.AdvancedSecurityOptions.SAMLOptions.Enabled != nil {
				f3f4.Enabled = resp.DomainStatus.AdvancedSecurityOptions.SAMLOptions.Enabled
			}
			if resp.DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp != nil {
				f3f4f1 := &svcapitypes.SAMLIDp{}
				if resp.DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp.EntityId != nil {
					f3f4f1.EntityID = resp.DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp.EntityId
				}
				if resp.DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp.MetadataContent != nil {
					f3f4f1.MetadataContent = resp.DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp.MetadataContent
				}
				f3f4.IDp = f3f4f1
			}
			if resp.DomainStatus.AdvancedSecurityOptions.SAMLOptions.RolesKey != nil {
				f3f4.RolesKey = resp.DomainStatus.AdvancedSecurityOptions.SAMLOptions.RolesKey
			}
			if resp.DomainStatus.AdvancedSecurityOptions.SAMLOptions.SessionTimeoutMinutes != nil {
				f3f4.SessionTimeoutMinutes = resp.DomainStatus.AdvancedSecurityOptions.SAMLOptions.SessionTimeoutMinutes
			}
			if resp.DomainStatus.AdvancedSecurityOptions.SAMLOptions.SubjectKey != nil {
				f3f4.SubjectKey = resp.DomainStatus.AdvancedSecurityOptions.SAMLOptions.SubjectKey
			}
			f3.SAMLOptions = f3f4
		}
		cr.Spec.ForProvider.AdvancedSecurityOptions = f3
	} else {
		cr.Spec.ForProvider.AdvancedSecurityOptions = nil
	}
	if resp.DomainStatus.AutoTuneOptions != nil {
		f4 := &svcapitypes.AutoTuneOptionsInput{}
		if resp.DomainStatus.AutoTuneOptions.UseOffPeakWindow != nil {
			f4.UseOffPeakWindow = resp.DomainStatus.AutoTuneOptions.UseOffPeakWindow
		}
		cr.Spec.ForProvider.AutoTuneOptions = f4
	} else {
		cr.Spec.ForProvider.AutoTuneOptions = nil
	}
	if resp.DomainStatus.ChangeProgressDetails != nil {
		f5 := &svcapitypes.ChangeProgressDetails{}
		if resp.DomainStatus.ChangeProgressDetails.ChangeId != nil {
			f5.ChangeID = resp.DomainStatus.ChangeProgressDetails.ChangeId
		}
		if resp.DomainStatus.ChangeProgressDetails.Message != nil {
			f5.Message = resp.DomainStatus.ChangeProgressDetails.Message
		}
		cr.Status.AtProvider.ChangeProgressDetails = f5
	} else {
		cr.Status.AtProvider.ChangeProgressDetails = nil
	}
	if resp.DomainStatus.ClusterConfig != nil {
		f6 := &svcapitypes.ClusterConfig{}
		if resp.DomainStatus.ClusterConfig.ColdStorageOptions != nil {
			f6f0 := &svcapitypes.ColdStorageOptions{}
			if resp.DomainStatus.ClusterConfig.ColdStorageOptions.Enabled != nil {
				f6f0.Enabled = resp.DomainStatus.ClusterConfig.ColdStorageOptions.Enabled
			}
			f6.ColdStorageOptions = f6f0
		}
		if resp.DomainStatus.ClusterConfig.DedicatedMasterCount != nil {
			f6.DedicatedMasterCount = resp.DomainStatus.ClusterConfig.DedicatedMasterCount
		}
		if resp.DomainStatus.ClusterConfig.DedicatedMasterEnabled != nil {
			f6.DedicatedMasterEnabled = resp.DomainStatus.ClusterConfig.DedicatedMasterEnabled
		}
		if resp.DomainStatus.ClusterConfig.DedicatedMasterType != nil {
			f6.DedicatedMasterType = resp.DomainStatus.ClusterConfig.DedicatedMasterType
		}
		if resp.DomainStatus.ClusterConfig.InstanceCount != nil {
			f6.InstanceCount = resp.DomainStatus.ClusterConfig.InstanceCount
		}
		if resp.DomainStatus.ClusterConfig.InstanceType != nil {
			f6.InstanceType = resp.DomainStatus.ClusterConfig.InstanceType
		}
		if resp.DomainStatus.ClusterConfig.MultiAZWithStandbyEnabled != nil {
			f6.MultiAZWithStandbyEnabled = resp.DomainStatus.ClusterConfig.MultiAZWithStandbyEnabled
		}
		if resp.DomainStatus.ClusterConfig.WarmCount != nil {
			f6.WarmCount = resp.DomainStatus.ClusterConfig.WarmCount
		}
		if resp.DomainStatus.ClusterConfig.WarmEnabled != nil {
			f6.WarmEnabled = resp.DomainStatus.ClusterConfig.WarmEnabled
		}
		if resp.DomainStatus.ClusterConfig.WarmType != nil {
			f6.WarmType = resp.DomainStatus.ClusterConfig.WarmType
		}
		if resp.DomainStatus.ClusterConfig.ZoneAwarenessConfig != nil {
			f6f10 := &svcapitypes.ZoneAwarenessConfig{}
			if resp.DomainStatus.ClusterConfig.ZoneAwarenessConfig.AvailabilityZoneCount != nil {
				f6f10.AvailabilityZoneCount = resp.DomainStatus.ClusterConfig.ZoneAwarenessConfig.AvailabilityZoneCount
			}
			f6.ZoneAwarenessConfig = f6f10
		}
		if resp.DomainStatus.ClusterConfig.ZoneAwarenessEnabled != nil {
			f6.ZoneAwarenessEnabled = resp.DomainStatus.ClusterConfig.ZoneAwarenessEnabled
		}
		cr.Spec.ForProvider.ClusterConfig = f6
	} else {
		cr.Spec.ForProvider.ClusterConfig = nil
	}
	if resp.DomainStatus.CognitoOptions != nil {
		f7 := &svcapitypes.CognitoOptions{}
		if resp.DomainStatus.CognitoOptions.Enabled != nil {
			f7.Enabled = resp.DomainStatus.CognitoOptions.Enabled
		}
		if resp.DomainStatus.CognitoOptions.IdentityPoolId != nil {
			f7.IdentityPoolID = resp.DomainStatus.CognitoOptions.IdentityPoolId
		}
		if resp.DomainStatus.CognitoOptions.RoleArn != nil {
			f7.RoleARN = resp.DomainStatus.CognitoOptions.RoleArn
		}
		if resp.DomainStatus.CognitoOptions.UserPoolId != nil {
			f7.UserPoolID = resp.DomainStatus.CognitoOptions.UserPoolId
		}
		cr.Spec.ForProvider.CognitoOptions = f7
	} else {
		cr.Spec.ForProvider.CognitoOptions = nil
	}
	if resp.DomainStatus.Created != nil {
		cr.Status.AtProvider.Created = resp.DomainStatus.Created
	} else {
		cr.Status.AtProvider.Created = nil
	}
	if resp.DomainStatus.Deleted != nil {
		cr.Status.AtProvider.Deleted = resp.DomainStatus.Deleted
	} else {
		cr.Status.AtProvider.Deleted = nil
	}
	if resp.DomainStatus.DomainEndpointOptions != nil {
		f10 := &svcapitypes.DomainEndpointOptions{}
		if resp.DomainStatus.DomainEndpointOptions.CustomEndpoint != nil {
			f10.CustomEndpoint = resp.DomainStatus.DomainEndpointOptions.CustomEndpoint
		}
		if resp.DomainStatus.DomainEndpointOptions.CustomEndpointCertificateArn != nil {
			f10.CustomEndpointCertificateARN = resp.DomainStatus.DomainEndpointOptions.CustomEndpointCertificateArn
		}
		if resp.DomainStatus.DomainEndpointOptions.CustomEndpointEnabled != nil {
			f10.CustomEndpointEnabled = resp.DomainStatus.DomainEndpointOptions.CustomEndpointEnabled
		}
		if resp.DomainStatus.DomainEndpointOptions.EnforceHTTPS != nil {
			f10.EnforceHTTPS = resp.DomainStatus.DomainEndpointOptions.EnforceHTTPS
		}
		if resp.DomainStatus.DomainEndpointOptions.TLSSecurityPolicy != nil {
			f10.TLSSecurityPolicy = resp.DomainStatus.DomainEndpointOptions.TLSSecurityPolicy
		}
		cr.Spec.ForProvider.DomainEndpointOptions = f10
	} else {
		cr.Spec.ForProvider.DomainEndpointOptions = nil
	}
	if resp.DomainStatus.DomainId != nil {
		cr.Status.AtProvider.DomainID = resp.DomainStatus.DomainId
	} else {
		cr.Status.AtProvider.DomainID = nil
	}
	if resp.DomainStatus.DomainName != nil {
		cr.Status.AtProvider.DomainName = resp.DomainStatus.DomainName
	} else {
		cr.Status.AtProvider.DomainName = nil
	}
	if resp.DomainStatus.EBSOptions != nil {
		f13 := &svcapitypes.EBSOptions{}
		if resp.DomainStatus.EBSOptions.EBSEnabled != nil {
			f13.EBSEnabled = resp.DomainStatus.EBSOptions.EBSEnabled
		}
		if resp.DomainStatus.EBSOptions.Iops != nil {
			f13.IOPS = resp.DomainStatus.EBSOptions.Iops
		}
		if resp.DomainStatus.EBSOptions.Throughput != nil {
			f13.Throughput = resp.DomainStatus.EBSOptions.Throughput
		}
		if resp.DomainStatus.EBSOptions.VolumeSize != nil {
			f13.VolumeSize = resp.DomainStatus.EBSOptions.VolumeSize
		}
		if resp.DomainStatus.EBSOptions.VolumeType != nil {
			f13.VolumeType = resp.DomainStatus.EBSOptions.VolumeType
		}
		cr.Spec.ForProvider.EBSOptions = f13
	} else {
		cr.Spec.ForProvider.EBSOptions = nil
	}
	if resp.DomainStatus.EncryptionAtRestOptions != nil {
		f14 := &svcapitypes.EncryptionAtRestOptions{}
		if resp.DomainStatus.EncryptionAtRestOptions.Enabled != nil {
			f14.Enabled = resp.DomainStatus.EncryptionAtRestOptions.Enabled
		}
		if resp.DomainStatus.EncryptionAtRestOptions.KmsKeyId != nil {
			f14.KMSKeyID = resp.DomainStatus.EncryptionAtRestOptions.KmsKeyId
		}
		cr.Status.AtProvider.EncryptionAtRestOptions = f14
	} else {
		cr.Status.AtProvider.EncryptionAtRestOptions = nil
	}
	if resp.DomainStatus.Endpoint != nil {
		cr.Status.AtProvider.Endpoint = resp.DomainStatus.Endpoint
	} else {
		cr.Status.AtProvider.Endpoint = nil
	}
	if resp.DomainStatus.EndpointV2 != nil {
		cr.Status.AtProvider.EndpointV2 = resp.DomainStatus.EndpointV2
	} else {
		cr.Status.AtProvider.EndpointV2 = nil
	}
	if resp.DomainStatus.Endpoints != nil {
		f17 := map[string]*string{}
		for f17key, f17valiter := range resp.DomainStatus.Endpoints {
			var f17val string
			f17val = *f17valiter
			f17[f17key] = &f17val
		}
		cr.Status.AtProvider.Endpoints = f17
	} else {
		cr.Status.AtProvider.Endpoints = nil
	}
	if resp.DomainStatus.EngineVersion != nil {
		cr.Spec.ForProvider.EngineVersion = resp.DomainStatus.EngineVersion
	} else {
		cr.Spec.ForProvider.EngineVersion = nil
	}
	if resp.DomainStatus.IPAddressType != nil {
		cr.Spec.ForProvider.IPAddressType = resp.DomainStatus.IPAddressType
	} else {
		cr.Spec.ForProvider.IPAddressType = nil
	}
	if resp.DomainStatus.LogPublishingOptions != nil {
		f20 := map[string]*svcapitypes.LogPublishingOption{}
		for f20key, f20valiter := range resp.DomainStatus.LogPublishingOptions {
			f20val := &svcapitypes.LogPublishingOption{}
			if f20valiter.CloudWatchLogsLogGroupArn != nil {
				f20val.CloudWatchLogsLogGroupARN = f20valiter.CloudWatchLogsLogGroupArn
			}
			if f20valiter.Enabled != nil {
				f20val.Enabled = f20valiter.Enabled
			}
			f20[f20key] = f20val
		}
		cr.Spec.ForProvider.LogPublishingOptions = f20
	} else {
		cr.Spec.ForProvider.LogPublishingOptions = nil
	}
	if resp.DomainStatus.NodeToNodeEncryptionOptions != nil {
		f21 := &svcapitypes.NodeToNodeEncryptionOptions{}
		if resp.DomainStatus.NodeToNodeEncryptionOptions.Enabled != nil {
			f21.Enabled = resp.DomainStatus.NodeToNodeEncryptionOptions.Enabled
		}
		cr.Spec.ForProvider.NodeToNodeEncryptionOptions = f21
	} else {
		cr.Spec.ForProvider.NodeToNodeEncryptionOptions = nil
	}
	if resp.DomainStatus.OffPeakWindowOptions != nil {
		f22 := &svcapitypes.OffPeakWindowOptions{}
		if resp.DomainStatus.OffPeakWindowOptions.Enabled != nil {
			f22.Enabled = resp.DomainStatus.OffPeakWindowOptions.Enabled
		}
		if resp.DomainStatus.OffPeakWindowOptions.OffPeakWindow != nil {
			f22f1 := &svcapitypes.OffPeakWindow{}
			if resp.DomainStatus.OffPeakWindowOptions.OffPeakWindow.WindowStartTime != nil {
				f22f1f0 := &svcapitypes.WindowStartTime{}
				if resp.DomainStatus.OffPeakWindowOptions.OffPeakWindow.WindowStartTime.Hours != nil {
					f22f1f0.Hours = resp.DomainStatus.OffPeakWindowOptions.OffPeakWindow.WindowStartTime.Hours
				}
				if resp.DomainStatus.OffPeakWindowOptions.OffPeakWindow.WindowStartTime.Minutes != nil {
					f22f1f0.Minutes = resp.DomainStatus.OffPeakWindowOptions.OffPeakWindow.WindowStartTime.Minutes
				}
				f22f1.WindowStartTime = f22f1f0
			}
			f22.OffPeakWindow = f22f1
		}
		cr.Spec.ForProvider.OffPeakWindowOptions = f22
	} else {
		cr.Spec.ForProvider.OffPeakWindowOptions = nil
	}
	if resp.DomainStatus.Processing != nil {
		cr.Status.AtProvider.Processing = resp.DomainStatus.Processing
	} else {
		cr.Status.AtProvider.Processing = nil
	}
	if resp.DomainStatus.ServiceSoftwareOptions != nil {
		f24 := &svcapitypes.ServiceSoftwareOptions{}
		if resp.DomainStatus.ServiceSoftwareOptions.AutomatedUpdateDate != nil {
			f24.AutomatedUpdateDate = &metav1.Time{*resp.DomainStatus.ServiceSoftwareOptions.AutomatedUpdateDate}
		}
		if resp.DomainStatus.ServiceSoftwareOptions.Cancellable != nil {
			f24.Cancellable = resp.DomainStatus.ServiceSoftwareOptions.Cancellable
		}
		if resp.DomainStatus.ServiceSoftwareOptions.CurrentVersion != nil {
			f24.CurrentVersion = resp.DomainStatus.ServiceSoftwareOptions.CurrentVersion
		}
		if resp.DomainStatus.ServiceSoftwareOptions.Description != nil {
			f24.Description = resp.DomainStatus.ServiceSoftwareOptions.Description
		}
		if resp.DomainStatus.ServiceSoftwareOptions.NewVersion != nil {
			f24.NewVersion = resp.DomainStatus.ServiceSoftwareOptions.NewVersion
		}
		if resp.DomainStatus.ServiceSoftwareOptions.OptionalDeployment != nil {
			f24.OptionalDeployment = resp.DomainStatus.ServiceSoftwareOptions.OptionalDeployment
		}
		if resp.DomainStatus.ServiceSoftwareOptions.UpdateAvailable != nil {
			f24.UpdateAvailable = resp.DomainStatus.ServiceSoftwareOptions.UpdateAvailable
		}
		if resp.DomainStatus.ServiceSoftwareOptions.UpdateStatus != nil {
			f24.UpdateStatus = resp.DomainStatus.ServiceSoftwareOptions.UpdateStatus
		}
		cr.Status.AtProvider.ServiceSoftwareOptions = f24
	} else {
		cr.Status.AtProvider.ServiceSoftwareOptions = nil
	}
	if resp.DomainStatus.SnapshotOptions != nil {
		f25 := &svcapitypes.SnapshotOptions{}
		if resp.DomainStatus.SnapshotOptions.AutomatedSnapshotStartHour != nil {
			f25.AutomatedSnapshotStartHour = resp.DomainStatus.SnapshotOptions.AutomatedSnapshotStartHour
		}
		cr.Status.AtProvider.SnapshotOptions = f25
	} else {
		cr.Status.AtProvider.SnapshotOptions = nil
	}
	if resp.DomainStatus.SoftwareUpdateOptions != nil {
		f26 := &svcapitypes.SoftwareUpdateOptions{}
		if resp.DomainStatus.SoftwareUpdateOptions.AutoSoftwareUpdateEnabled != nil {
			f26.AutoSoftwareUpdateEnabled = resp.DomainStatus.SoftwareUpdateOptions.AutoSoftwareUpdateEnabled
		}
		cr.Spec.ForProvider.SoftwareUpdateOptions = f26
	} else {
		cr.Spec.ForProvider.SoftwareUpdateOptions = nil
	}
	if resp.DomainStatus.UpgradeProcessing != nil {
		cr.Status.AtProvider.UpgradeProcessing = resp.DomainStatus.UpgradeProcessing
	} else {
		cr.Status.AtProvider.UpgradeProcessing = nil
	}
	if resp.DomainStatus.VPCOptions != nil {
		f28 := &svcapitypes.VPCDerivedInfo{}
		if resp.DomainStatus.VPCOptions.AvailabilityZones != nil {
			f28f0 := []*string{}
			for _, f28f0iter := range resp.DomainStatus.VPCOptions.AvailabilityZones {
				var f28f0elem string
				f28f0elem = *f28f0iter
				f28f0 = append(f28f0, &f28f0elem)
			}
			f28.AvailabilityZones = f28f0
		}
		if resp.DomainStatus.VPCOptions.SecurityGroupIds != nil {
			f28f1 := []*string{}
			for _, f28f1iter := range resp.DomainStatus.VPCOptions.SecurityGroupIds {
				var f28f1elem string
				f28f1elem = *f28f1iter
				f28f1 = append(f28f1, &f28f1elem)
			}
			f28.SecurityGroupIDs = f28f1
		}
		if resp.DomainStatus.VPCOptions.SubnetIds != nil {
			f28f2 := []*string{}
			for _, f28f2iter := range resp.DomainStatus.VPCOptions.SubnetIds {
				var f28f2elem string
				f28f2elem = *f28f2iter
				f28f2 = append(f28f2, &f28f2elem)
			}
			f28.SubnetIDs = f28f2
		}
		if resp.DomainStatus.VPCOptions.VPCId != nil {
			f28.VPCID = resp.DomainStatus.VPCOptions.VPCId
		}
		cr.Status.AtProvider.VPCOptions = f28
	} else {
		cr.Status.AtProvider.VPCOptions = nil
	}

	return cr
}

// GenerateCreateDomainInput returns a create input.
func GenerateCreateDomainInput(cr *svcapitypes.Domain) *svcsdk.CreateDomainInput {
	res := &svcsdk.CreateDomainInput{}

	if cr.Spec.ForProvider.AccessPolicies != nil {
		res.SetAccessPolicies(*cr.Spec.ForProvider.AccessPolicies)
	}
	if cr.Spec.ForProvider.AdvancedOptions != nil {
		f1 := map[string]*string{}
		for f1key, f1valiter := range cr.Spec.ForProvider.AdvancedOptions {
			var f1val string
			f1val = *f1valiter
			f1[f1key] = &f1val
		}
		res.SetAdvancedOptions(f1)
	}
	if cr.Spec.ForProvider.AdvancedSecurityOptions != nil {
		f2 := &svcsdk.AdvancedSecurityOptionsInput_{}
		if cr.Spec.ForProvider.AdvancedSecurityOptions.AnonymousAuthEnabled != nil {
			f2.SetAnonymousAuthEnabled(*cr.Spec.ForProvider.AdvancedSecurityOptions.AnonymousAuthEnabled)
		}
		if cr.Spec.ForProvider.AdvancedSecurityOptions.Enabled != nil {
			f2.SetEnabled(*cr.Spec.ForProvider.AdvancedSecurityOptions.Enabled)
		}
		if cr.Spec.ForProvider.AdvancedSecurityOptions.InternalUserDatabaseEnabled != nil {
			f2.SetInternalUserDatabaseEnabled(*cr.Spec.ForProvider.AdvancedSecurityOptions.InternalUserDatabaseEnabled)
		}
		if cr.Spec.ForProvider.AdvancedSecurityOptions.MasterUserOptions != nil {
			f2f3 := &svcsdk.MasterUserOptions{}
			if cr.Spec.ForProvider.AdvancedSecurityOptions.MasterUserOptions.MasterUserARN != nil {
				f2f3.SetMasterUserARN(*cr.Spec.ForProvider.AdvancedSecurityOptions.MasterUserOptions.MasterUserARN)
			}
			if cr.Spec.ForProvider.AdvancedSecurityOptions.MasterUserOptions.MasterUserName != nil {
				f2f3.SetMasterUserName(*cr.Spec.ForProvider.AdvancedSecurityOptions.MasterUserOptions.MasterUserName)
			}
			if cr.Spec.ForProvider.AdvancedSecurityOptions.MasterUserOptions.MasterUserPassword != nil {
				f2f3.SetMasterUserPassword(*cr.Spec.ForProvider.AdvancedSecurityOptions.MasterUserOptions.MasterUserPassword)
			}
			f2.SetMasterUserOptions(f2f3)
		}
		if cr.Spec.ForProvider.AdvancedSecurityOptions.SAMLOptions != nil {
			f2f4 := &svcsdk.SAMLOptionsInput_{}
			if cr.Spec.ForProvider.AdvancedSecurityOptions.SAMLOptions.Enabled != nil {
				f2f4.SetEnabled(*cr.Spec.ForProvider.AdvancedSecurityOptions.SAMLOptions.Enabled)
			}
			if cr.Spec.ForProvider.AdvancedSecurityOptions.SAMLOptions.IDp != nil {
				f2f4f1 := &svcsdk.SAMLIdp{}
				if cr.Spec.ForProvider.AdvancedSecurityOptions.SAMLOptions.IDp.EntityID != nil {
					f2f4f1.SetEntityId(*cr.Spec.ForProvider.AdvancedSecurityOptions.SAMLOptions.IDp.EntityID)
				}
				if cr.Spec.ForProvider.AdvancedSecurityOptions.SAMLOptions.IDp.MetadataContent != nil {
					f2f4f1.SetMetadataContent(*cr.Spec.ForProvider.AdvancedSecurityOptions.SAMLOptions.IDp.MetadataContent)
				}
				f2f4.SetIdp(f2f4f1)
			}
			if cr.Spec.ForProvider.AdvancedSecurityOptions.SAMLOptions.MasterBackendRole != nil {
				f2f4.SetMasterBackendRole(*cr.Spec.ForProvider.AdvancedSecurityOptions.SAMLOptions.MasterBackendRole)
			}
			if cr.Spec.ForProvider.AdvancedSecurityOptions.SAMLOptions.MasterUserName != nil {
				f2f4.SetMasterUserName(*cr.Spec.ForProvider.AdvancedSecurityOptions.SAMLOptions.MasterUserName)
			}
			if cr.Spec.ForProvider.AdvancedSecurityOptions.SAMLOptions.RolesKey != nil {
				f2f4.SetRolesKey(*cr.Spec.ForProvider.AdvancedSecurityOptions.SAMLOptions.RolesKey)
			}
			if cr.Spec.ForProvider.AdvancedSecurityOptions.SAMLOptions.SessionTimeoutMinutes != nil {
				f2f4.SetSessionTimeoutMinutes(*cr.Spec.ForProvider.AdvancedSecurityOptions.SAMLOptions.SessionTimeoutMinutes)
			}
			if cr.Spec.ForProvider.AdvancedSecurityOptions.SAMLOptions.SubjectKey != nil {
				f2f4.SetSubjectKey(*cr.Spec.ForProvider.AdvancedSecurityOptions.SAMLOptions.SubjectKey)
			}
			f2.SetSAMLOptions(f2f4)
		}
		res.SetAdvancedSecurityOptions(f2)
	}
	if cr.Spec.ForProvider.AutoTuneOptions != nil {
		f3 := &svcsdk.AutoTuneOptionsInput_{}
		if cr.Spec.ForProvider.AutoTuneOptions.DesiredState != nil {
			f3.SetDesiredState(*cr.Spec.ForProvider.AutoTuneOptions.DesiredState)
		}
		if cr.Spec.ForProvider.AutoTuneOptions.MaintenanceSchedules != nil {
			f3f1 := []*svcsdk.AutoTuneMaintenanceSchedule{}
			for _, f3f1iter := range cr.Spec.ForProvider.AutoTuneOptions.MaintenanceSchedules {
				f3f1elem := &svcsdk.AutoTuneMaintenanceSchedule{}
				if f3f1iter.CronExpressionForRecurrence != nil {
					f3f1elem.SetCronExpressionForRecurrence(*f3f1iter.CronExpressionForRecurrence)
				}
				if f3f1iter.Duration != nil {
					f3f1elemf1 := &svcsdk.Duration{}
					if f3f1iter.Duration.Unit != nil {
						f3f1elemf1.SetUnit(*f3f1iter.Duration.Unit)
					}
					if f3f1iter.Duration.Value != nil {
						f3f1elemf1.SetValue(*f3f1iter.Duration.Value)
					}
					f3f1elem.SetDuration(f3f1elemf1)
				}
				if f3f1iter.StartAt != nil {
					f3f1elem.SetStartAt(f3f1iter.StartAt.Time)
				}
				f3f1 = append(f3f1, f3f1elem)
			}
			f3.SetMaintenanceSchedules(f3f1)
		}
		if cr.Spec.ForProvider.AutoTuneOptions.UseOffPeakWindow != nil {
			f3.SetUseOffPeakWindow(*cr.Spec.ForProvider.AutoTuneOptions.UseOffPeakWindow)
		}
		res.SetAutoTuneOptions(f3)
	}
	if cr.Spec.ForProvider.ClusterConfig != nil {
		f4 := &svcsdk.ClusterConfig{}
		if cr.Spec.ForProvider.ClusterConfig.ColdStorageOptions != nil {
			f4f0 := &svcsdk.ColdStorageOptions{}
			if cr.Spec.ForProvider.ClusterConfig.ColdStorageOptions.Enabled != nil {
				f4f0.SetEnabled(*cr.Spec.ForProvider.ClusterConfig.ColdStorageOptions.Enabled)
			}
			f4.SetColdStorageOptions(f4f0)
		}
		if cr.Spec.ForProvider.ClusterConfig.DedicatedMasterCount != nil {
			f4.SetDedicatedMasterCount(*cr.Spec.ForProvider.ClusterConfig.DedicatedMasterCount)
		}
		if cr.Spec.ForProvider.ClusterConfig.DedicatedMasterEnabled != nil {
			f4.SetDedicatedMasterEnabled(*cr.Spec.ForProvider.ClusterConfig.DedicatedMasterEnabled)
		}
		if cr.Spec.ForProvider.ClusterConfig.DedicatedMasterType != nil {
			f4.SetDedicatedMasterType(*cr.Spec.ForProvider.ClusterConfig.DedicatedMasterType)
		}
		if cr.Spec.ForProvider.ClusterConfig.InstanceCount != nil {
			f4.SetInstanceCount(*cr.Spec.ForProvider.ClusterConfig.InstanceCount)
		}
		if cr.Spec.ForProvider.ClusterConfig.InstanceType != nil {
			f4.SetInstanceType(*cr.Spec.ForProvider.ClusterConfig.InstanceType)
		}
		if cr.Spec.ForProvider.ClusterConfig.MultiAZWithStandbyEnabled != nil {
			f4.SetMultiAZWithStandbyEnabled(*cr.Spec.ForProvider.ClusterConfig.MultiAZWithStandbyEnabled)
		}
		if cr.Spec.ForProvider.ClusterConfig.WarmCount != nil {
			f4.SetWarmCount(*cr.Spec.ForProvider.ClusterConfig.WarmCount)
		}
		if cr.Spec.ForProvider.ClusterConfig.WarmEnabled != nil {
			f4.SetWarmEnabled(*cr.Spec.ForProvider.ClusterConfig.WarmEnabled)
		}
		if cr.Spec.ForProvider.ClusterConfig.WarmType != nil {
			f4.SetWarmType(*cr.Spec.ForProvider.ClusterConfig.WarmType)
		}
		if cr.Spec.ForProvider.ClusterConfig.ZoneAwarenessConfig != nil {
			f4f10 := &svcsdk.ZoneAwarenessConfig{}
			if cr.Spec.ForProvider.ClusterConfig.ZoneAwarenessConfig.AvailabilityZoneCount != nil {
				f4f10.SetAvailabilityZoneCount(*cr.Spec.ForProvider.ClusterConfig.ZoneAwarenessConfig.AvailabilityZoneCount)
			}
			f4.SetZoneAwarenessConfig(f4f10)
		}
		if cr.Spec.ForProvider.ClusterConfig.ZoneAwarenessEnabled != nil {
			f4.SetZoneAwarenessEnabled(*cr.Spec.ForProvider.ClusterConfig.ZoneAwarenessEnabled)
		}
		res.SetClusterConfig(f4)
	}
	if cr.Spec.ForProvider.CognitoOptions != nil {
		f5 := &svcsdk.CognitoOptions{}
		if cr.Spec.ForProvider.CognitoOptions.Enabled != nil {
			f5.SetEnabled(*cr.Spec.ForProvider.CognitoOptions.Enabled)
		}
		if cr.Spec.ForProvider.CognitoOptions.IdentityPoolID != nil {
			f5.SetIdentityPoolId(*cr.Spec.ForProvider.CognitoOptions.IdentityPoolID)
		}
		if cr.Spec.ForProvider.CognitoOptions.RoleARN != nil {
			f5.SetRoleArn(*cr.Spec.ForProvider.CognitoOptions.RoleARN)
		}
		if cr.Spec.ForProvider.CognitoOptions.UserPoolID != nil {
			f5.SetUserPoolId(*cr.Spec.ForProvider.CognitoOptions.UserPoolID)
		}
		res.SetCognitoOptions(f5)
	}
	if cr.Spec.ForProvider.DomainEndpointOptions != nil {
		f6 := &svcsdk.DomainEndpointOptions{}
		if cr.Spec.ForProvider.DomainEndpointOptions.CustomEndpoint != nil {
			f6.SetCustomEndpoint(*cr.Spec.ForProvider.DomainEndpointOptions.CustomEndpoint)
		}
		if cr.Spec.ForProvider.DomainEndpointOptions.CustomEndpointCertificateARN != nil {
			f6.SetCustomEndpointCertificateArn(*cr.Spec.ForProvider.DomainEndpointOptions.CustomEndpointCertificateARN)
		}
		if cr.Spec.ForProvider.DomainEndpointOptions.CustomEndpointEnabled != nil {
			f6.SetCustomEndpointEnabled(*cr.Spec.ForProvider.DomainEndpointOptions.CustomEndpointEnabled)
		}
		if cr.Spec.ForProvider.DomainEndpointOptions.EnforceHTTPS != nil {
			f6.SetEnforceHTTPS(*cr.Spec.ForProvider.DomainEndpointOptions.EnforceHTTPS)
		}
		if cr.Spec.ForProvider.DomainEndpointOptions.TLSSecurityPolicy != nil {
			f6.SetTLSSecurityPolicy(*cr.Spec.ForProvider.DomainEndpointOptions.TLSSecurityPolicy)
		}
		res.SetDomainEndpointOptions(f6)
	}
	if cr.Spec.ForProvider.EBSOptions != nil {
		f7 := &svcsdk.EBSOptions{}
		if cr.Spec.ForProvider.EBSOptions.EBSEnabled != nil {
			f7.SetEBSEnabled(*cr.Spec.ForProvider.EBSOptions.EBSEnabled)
		}
		if cr.Spec.ForProvider.EBSOptions.IOPS != nil {
			f7.SetIops(*cr.Spec.ForProvider.EBSOptions.IOPS)
		}
		if cr.Spec.ForProvider.EBSOptions.Throughput != nil {
			f7.SetThroughput(*cr.Spec.ForProvider.EBSOptions.Throughput)
		}
		if cr.Spec.ForProvider.EBSOptions.VolumeSize != nil {
			f7.SetVolumeSize(*cr.Spec.ForProvider.EBSOptions.VolumeSize)
		}
		if cr.Spec.ForProvider.EBSOptions.VolumeType != nil {
			f7.SetVolumeType(*cr.Spec.ForProvider.EBSOptions.VolumeType)
		}
		res.SetEBSOptions(f7)
	}
	if cr.Spec.ForProvider.EngineVersion != nil {
		res.SetEngineVersion(*cr.Spec.ForProvider.EngineVersion)
	}
	if cr.Spec.ForProvider.IPAddressType != nil {
		res.SetIPAddressType(*cr.Spec.ForProvider.IPAddressType)
	}
	if cr.Spec.ForProvider.LogPublishingOptions != nil {
		f10 := map[string]*svcsdk.LogPublishingOption{}
		for f10key, f10valiter := range cr.Spec.ForProvider.LogPublishingOptions {
			f10val := &svcsdk.LogPublishingOption{}
			if f10valiter.CloudWatchLogsLogGroupARN != nil {
				f10val.SetCloudWatchLogsLogGroupArn(*f10valiter.CloudWatchLogsLogGroupARN)
			}
			if f10valiter.Enabled != nil {
				f10val.SetEnabled(*f10valiter.Enabled)
			}
			f10[f10key] = f10val
		}
		res.SetLogPublishingOptions(f10)
	}
	if cr.Spec.ForProvider.NodeToNodeEncryptionOptions != nil {
		f11 := &svcsdk.NodeToNodeEncryptionOptions{}
		if cr.Spec.ForProvider.NodeToNodeEncryptionOptions.Enabled != nil {
			f11.SetEnabled(*cr.Spec.ForProvider.NodeToNodeEncryptionOptions.Enabled)
		}
		res.SetNodeToNodeEncryptionOptions(f11)
	}
	if cr.Spec.ForProvider.OffPeakWindowOptions != nil {
		f12 := &svcsdk.OffPeakWindowOptions{}
		if cr.Spec.ForProvider.OffPeakWindowOptions.Enabled != nil {
			f12.SetEnabled(*cr.Spec.ForProvider.OffPeakWindowOptions.Enabled)
		}
		if cr.Spec.ForProvider.OffPeakWindowOptions.OffPeakWindow != nil {
			f12f1 := &svcsdk.OffPeakWindow{}
			if cr.Spec.ForProvider.OffPeakWindowOptions.OffPeakWindow.WindowStartTime != nil {
				f12f1f0 := &svcsdk.WindowStartTime{}
				if cr.Spec.ForProvider.OffPeakWindowOptions.OffPeakWindow.WindowStartTime.Hours != nil {
					f12f1f0.SetHours(*cr.Spec.ForProvider.OffPeakWindowOptions.OffPeakWindow.WindowStartTime.Hours)
				}
				if cr.Spec.ForProvider.OffPeakWindowOptions.OffPeakWindow.WindowStartTime.Minutes != nil {
					f12f1f0.SetMinutes(*cr.Spec.ForProvider.OffPeakWindowOptions.OffPeakWindow.WindowStartTime.Minutes)
				}
				f12f1.SetWindowStartTime(f12f1f0)
			}
			f12.SetOffPeakWindow(f12f1)
		}
		res.SetOffPeakWindowOptions(f12)
	}
	if cr.Spec.ForProvider.SoftwareUpdateOptions != nil {
		f13 := &svcsdk.SoftwareUpdateOptions{}
		if cr.Spec.ForProvider.SoftwareUpdateOptions.AutoSoftwareUpdateEnabled != nil {
			f13.SetAutoSoftwareUpdateEnabled(*cr.Spec.ForProvider.SoftwareUpdateOptions.AutoSoftwareUpdateEnabled)
		}
		res.SetSoftwareUpdateOptions(f13)
	}
	if cr.Spec.ForProvider.Tags != nil {
		f14 := []*svcsdk.Tag{}
		for _, f14iter := range cr.Spec.ForProvider.Tags {
			f14elem := &svcsdk.Tag{}
			if f14iter.Key != nil {
				f14elem.SetKey(*f14iter.Key)
			}
			if f14iter.Value != nil {
				f14elem.SetValue(*f14iter.Value)
			}
			f14 = append(f14, f14elem)
		}
		res.SetTagList(f14)
	}

	return res
}

// GenerateDeleteDomainInput returns a deletion input.
func GenerateDeleteDomainInput(cr *svcapitypes.Domain) *svcsdk.DeleteDomainInput {
	res := &svcsdk.DeleteDomainInput{}

	return res
}

// IsNotFound returns whether the given error is of type NotFound or not.
func IsNotFound(err error) bool {
	awsErr, ok := err.(awserr.Error)
	return ok && awsErr.Code() == "ResourceNotFoundException"
}
