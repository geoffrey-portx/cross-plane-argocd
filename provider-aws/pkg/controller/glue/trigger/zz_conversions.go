/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package trigger

import (
	"github.com/aws/aws-sdk-go/aws/awserr"
	svcsdk "github.com/aws/aws-sdk-go/service/glue"

	svcapitypes "github.com/crossplane-contrib/provider-aws/apis/glue/v1alpha1"
)

// NOTE(muvaf): We return pointers in case the function needs to start with an
// empty object, hence need to return a new pointer.

// GenerateGetTriggerInput returns input for read
// operation.
func GenerateGetTriggerInput(cr *svcapitypes.Trigger) *svcsdk.GetTriggerInput {
	res := &svcsdk.GetTriggerInput{}

	return res
}

// GenerateTrigger returns the current state in the form of *svcapitypes.Trigger.
func GenerateTrigger(resp *svcsdk.GetTriggerOutput) *svcapitypes.Trigger {
	cr := &svcapitypes.Trigger{}

	if resp.Trigger.Actions != nil {
		f0 := []*svcapitypes.Action{}
		for _, f0iter := range resp.Trigger.Actions {
			f0elem := &svcapitypes.Action{}
			if f0iter.Arguments != nil {
				f0elemf0 := map[string]*string{}
				for f0elemf0key, f0elemf0valiter := range f0iter.Arguments {
					var f0elemf0val string
					f0elemf0val = *f0elemf0valiter
					f0elemf0[f0elemf0key] = &f0elemf0val
				}
				f0elem.Arguments = f0elemf0
			}
			if f0iter.CrawlerName != nil {
				f0elem.CrawlerName = f0iter.CrawlerName
			}
			if f0iter.JobName != nil {
				f0elem.JobName = f0iter.JobName
			}
			if f0iter.NotificationProperty != nil {
				f0elemf3 := &svcapitypes.NotificationProperty{}
				if f0iter.NotificationProperty.NotifyDelayAfter != nil {
					f0elemf3.NotifyDelayAfter = f0iter.NotificationProperty.NotifyDelayAfter
				}
				f0elem.NotificationProperty = f0elemf3
			}
			if f0iter.SecurityConfiguration != nil {
				f0elem.SecurityConfiguration = f0iter.SecurityConfiguration
			}
			if f0iter.Timeout != nil {
				f0elem.Timeout = f0iter.Timeout
			}
			f0 = append(f0, f0elem)
		}
		cr.Spec.ForProvider.Actions = f0
	} else {
		cr.Spec.ForProvider.Actions = nil
	}
	if resp.Trigger.Description != nil {
		cr.Spec.ForProvider.Description = resp.Trigger.Description
	} else {
		cr.Spec.ForProvider.Description = nil
	}
	if resp.Trigger.EventBatchingCondition != nil {
		f2 := &svcapitypes.EventBatchingCondition{}
		if resp.Trigger.EventBatchingCondition.BatchSize != nil {
			f2.BatchSize = resp.Trigger.EventBatchingCondition.BatchSize
		}
		if resp.Trigger.EventBatchingCondition.BatchWindow != nil {
			f2.BatchWindow = resp.Trigger.EventBatchingCondition.BatchWindow
		}
		cr.Spec.ForProvider.EventBatchingCondition = f2
	} else {
		cr.Spec.ForProvider.EventBatchingCondition = nil
	}
	if resp.Trigger.Name != nil {
		cr.Status.AtProvider.Name = resp.Trigger.Name
	} else {
		cr.Status.AtProvider.Name = nil
	}
	if resp.Trigger.Predicate != nil {
		f5 := &svcapitypes.Predicate{}
		if resp.Trigger.Predicate.Conditions != nil {
			f5f0 := []*svcapitypes.Condition{}
			for _, f5f0iter := range resp.Trigger.Predicate.Conditions {
				f5f0elem := &svcapitypes.Condition{}
				if f5f0iter.CrawlState != nil {
					f5f0elem.CrawlState = f5f0iter.CrawlState
				}
				if f5f0iter.CrawlerName != nil {
					f5f0elem.CrawlerName = f5f0iter.CrawlerName
				}
				if f5f0iter.JobName != nil {
					f5f0elem.JobName = f5f0iter.JobName
				}
				if f5f0iter.LogicalOperator != nil {
					f5f0elem.LogicalOperator = f5f0iter.LogicalOperator
				}
				if f5f0iter.State != nil {
					f5f0elem.State = f5f0iter.State
				}
				f5f0 = append(f5f0, f5f0elem)
			}
			f5.Conditions = f5f0
		}
		if resp.Trigger.Predicate.Logical != nil {
			f5.Logical = resp.Trigger.Predicate.Logical
		}
		cr.Spec.ForProvider.Predicate = f5
	} else {
		cr.Spec.ForProvider.Predicate = nil
	}
	if resp.Trigger.Schedule != nil {
		cr.Spec.ForProvider.Schedule = resp.Trigger.Schedule
	} else {
		cr.Spec.ForProvider.Schedule = nil
	}
	if resp.Trigger.State != nil {
		cr.Status.AtProvider.State = resp.Trigger.State
	} else {
		cr.Status.AtProvider.State = nil
	}
	if resp.Trigger.WorkflowName != nil {
		cr.Spec.ForProvider.WorkflowName = resp.Trigger.WorkflowName
	} else {
		cr.Spec.ForProvider.WorkflowName = nil
	}

	return cr
}

// GenerateCreateTriggerInput returns a create input.
func GenerateCreateTriggerInput(cr *svcapitypes.Trigger) *svcsdk.CreateTriggerInput {
	res := &svcsdk.CreateTriggerInput{}

	if cr.Spec.ForProvider.Actions != nil {
		f0 := []*svcsdk.Action{}
		for _, f0iter := range cr.Spec.ForProvider.Actions {
			f0elem := &svcsdk.Action{}
			if f0iter.Arguments != nil {
				f0elemf0 := map[string]*string{}
				for f0elemf0key, f0elemf0valiter := range f0iter.Arguments {
					var f0elemf0val string
					f0elemf0val = *f0elemf0valiter
					f0elemf0[f0elemf0key] = &f0elemf0val
				}
				f0elem.SetArguments(f0elemf0)
			}
			if f0iter.CrawlerName != nil {
				f0elem.SetCrawlerName(*f0iter.CrawlerName)
			}
			if f0iter.JobName != nil {
				f0elem.SetJobName(*f0iter.JobName)
			}
			if f0iter.NotificationProperty != nil {
				f0elemf3 := &svcsdk.NotificationProperty{}
				if f0iter.NotificationProperty.NotifyDelayAfter != nil {
					f0elemf3.SetNotifyDelayAfter(*f0iter.NotificationProperty.NotifyDelayAfter)
				}
				f0elem.SetNotificationProperty(f0elemf3)
			}
			if f0iter.SecurityConfiguration != nil {
				f0elem.SetSecurityConfiguration(*f0iter.SecurityConfiguration)
			}
			if f0iter.Timeout != nil {
				f0elem.SetTimeout(*f0iter.Timeout)
			}
			f0 = append(f0, f0elem)
		}
		res.SetActions(f0)
	}
	if cr.Spec.ForProvider.Description != nil {
		res.SetDescription(*cr.Spec.ForProvider.Description)
	}
	if cr.Spec.ForProvider.EventBatchingCondition != nil {
		f2 := &svcsdk.EventBatchingCondition{}
		if cr.Spec.ForProvider.EventBatchingCondition.BatchSize != nil {
			f2.SetBatchSize(*cr.Spec.ForProvider.EventBatchingCondition.BatchSize)
		}
		if cr.Spec.ForProvider.EventBatchingCondition.BatchWindow != nil {
			f2.SetBatchWindow(*cr.Spec.ForProvider.EventBatchingCondition.BatchWindow)
		}
		res.SetEventBatchingCondition(f2)
	}
	if cr.Spec.ForProvider.Predicate != nil {
		f3 := &svcsdk.Predicate{}
		if cr.Spec.ForProvider.Predicate.Conditions != nil {
			f3f0 := []*svcsdk.Condition{}
			for _, f3f0iter := range cr.Spec.ForProvider.Predicate.Conditions {
				f3f0elem := &svcsdk.Condition{}
				if f3f0iter.CrawlState != nil {
					f3f0elem.SetCrawlState(*f3f0iter.CrawlState)
				}
				if f3f0iter.CrawlerName != nil {
					f3f0elem.SetCrawlerName(*f3f0iter.CrawlerName)
				}
				if f3f0iter.JobName != nil {
					f3f0elem.SetJobName(*f3f0iter.JobName)
				}
				if f3f0iter.LogicalOperator != nil {
					f3f0elem.SetLogicalOperator(*f3f0iter.LogicalOperator)
				}
				if f3f0iter.State != nil {
					f3f0elem.SetState(*f3f0iter.State)
				}
				f3f0 = append(f3f0, f3f0elem)
			}
			f3.SetConditions(f3f0)
		}
		if cr.Spec.ForProvider.Predicate.Logical != nil {
			f3.SetLogical(*cr.Spec.ForProvider.Predicate.Logical)
		}
		res.SetPredicate(f3)
	}
	if cr.Spec.ForProvider.Schedule != nil {
		res.SetSchedule(*cr.Spec.ForProvider.Schedule)
	}
	if cr.Spec.ForProvider.StartOnCreation != nil {
		res.SetStartOnCreation(*cr.Spec.ForProvider.StartOnCreation)
	}
	if cr.Spec.ForProvider.Tags != nil {
		f6 := map[string]*string{}
		for f6key, f6valiter := range cr.Spec.ForProvider.Tags {
			var f6val string
			f6val = *f6valiter
			f6[f6key] = &f6val
		}
		res.SetTags(f6)
	}
	if cr.Spec.ForProvider.TriggerType != nil {
		res.SetType(*cr.Spec.ForProvider.TriggerType)
	}
	if cr.Spec.ForProvider.WorkflowName != nil {
		res.SetWorkflowName(*cr.Spec.ForProvider.WorkflowName)
	}

	return res
}

// GenerateUpdateTriggerInput returns an update input.
func GenerateUpdateTriggerInput(cr *svcapitypes.Trigger) *svcsdk.UpdateTriggerInput {
	res := &svcsdk.UpdateTriggerInput{}

	if cr.Status.AtProvider.Name != nil {
		res.SetName(*cr.Status.AtProvider.Name)
	}

	return res
}

// GenerateDeleteTriggerInput returns a deletion input.
func GenerateDeleteTriggerInput(cr *svcapitypes.Trigger) *svcsdk.DeleteTriggerInput {
	res := &svcsdk.DeleteTriggerInput{}

	return res
}

// IsNotFound returns whether the given error is of type NotFound or not.
func IsNotFound(err error) bool {
	awsErr, ok := err.(awserr.Error)
	return ok && awsErr.Code() == "EntityNotFoundException"
}
