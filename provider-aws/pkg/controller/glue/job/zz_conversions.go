/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package job

import (
	"github.com/aws/aws-sdk-go/aws/awserr"
	svcsdk "github.com/aws/aws-sdk-go/service/glue"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/crossplane-contrib/provider-aws/apis/glue/v1alpha1"
)

// NOTE(muvaf): We return pointers in case the function needs to start with an
// empty object, hence need to return a new pointer.

// GenerateGetJobInput returns input for read
// operation.
func GenerateGetJobInput(cr *svcapitypes.Job) *svcsdk.GetJobInput {
	res := &svcsdk.GetJobInput{}

	return res
}

// GenerateJob returns the current state in the form of *svcapitypes.Job.
func GenerateJob(resp *svcsdk.GetJobOutput) *svcapitypes.Job {
	cr := &svcapitypes.Job{}

	if resp.Job.AllocatedCapacity != nil {
		cr.Spec.ForProvider.AllocatedCapacity = resp.Job.AllocatedCapacity
	} else {
		cr.Spec.ForProvider.AllocatedCapacity = nil
	}
	if resp.Job.CodeGenConfigurationNodes != nil {
		f1 := map[string]*svcapitypes.CodeGenConfigurationNode{}
		for f1key, f1valiter := range resp.Job.CodeGenConfigurationNodes {
			f1val := &svcapitypes.CodeGenConfigurationNode{}
			if f1valiter.Aggregate != nil {
				f1valf0 := &svcapitypes.Aggregate{}
				if f1valiter.Aggregate.Aggs != nil {
					f1valf0f0 := []*svcapitypes.AggregateOperation{}
					for _, f1valf0f0iter := range f1valiter.Aggregate.Aggs {
						f1valf0f0elem := &svcapitypes.AggregateOperation{}
						if f1valf0f0iter.AggFunc != nil {
							f1valf0f0elem.AggFunc = f1valf0f0iter.AggFunc
						}
						if f1valf0f0iter.Column != nil {
							f1valf0f0elemf1 := []*string{}
							for _, f1valf0f0elemf1iter := range f1valf0f0iter.Column {
								var f1valf0f0elemf1elem string
								f1valf0f0elemf1elem = *f1valf0f0elemf1iter
								f1valf0f0elemf1 = append(f1valf0f0elemf1, &f1valf0f0elemf1elem)
							}
							f1valf0f0elem.Column = f1valf0f0elemf1
						}
						f1valf0f0 = append(f1valf0f0, f1valf0f0elem)
					}
					f1valf0.Aggs = f1valf0f0
				}
				if f1valiter.Aggregate.Groups != nil {
					f1valf0f1 := [][]*string{}
					for _, f1valf0f1iter := range f1valiter.Aggregate.Groups {
						f1valf0f1elem := []*string{}
						for _, f1valf0f1elemiter := range f1valf0f1iter {
							var f1valf0f1elemelem string
							f1valf0f1elemelem = *f1valf0f1elemiter
							f1valf0f1elem = append(f1valf0f1elem, &f1valf0f1elemelem)
						}
						f1valf0f1 = append(f1valf0f1, f1valf0f1elem)
					}
					f1valf0.Groups = f1valf0f1
				}
				if f1valiter.Aggregate.Inputs != nil {
					f1valf0f2 := []*string{}
					for _, f1valf0f2iter := range f1valiter.Aggregate.Inputs {
						var f1valf0f2elem string
						f1valf0f2elem = *f1valf0f2iter
						f1valf0f2 = append(f1valf0f2, &f1valf0f2elem)
					}
					f1valf0.Inputs = f1valf0f2
				}
				if f1valiter.Aggregate.Name != nil {
					f1valf0.Name = f1valiter.Aggregate.Name
				}
				f1val.Aggregate = f1valf0
			}
			if f1valiter.AmazonRedshiftSource != nil {
				f1valf1 := &svcapitypes.AmazonRedshiftSource{}
				if f1valiter.AmazonRedshiftSource.Data != nil {
					f1valf1f0 := &svcapitypes.AmazonRedshiftNodeData{}
					if f1valiter.AmazonRedshiftSource.Data.AccessType != nil {
						f1valf1f0.AccessType = f1valiter.AmazonRedshiftSource.Data.AccessType
					}
					if f1valiter.AmazonRedshiftSource.Data.Action != nil {
						f1valf1f0.Action = f1valiter.AmazonRedshiftSource.Data.Action
					}
					if f1valiter.AmazonRedshiftSource.Data.AdvancedOptions != nil {
						f1valf1f0f2 := []*svcapitypes.AmazonRedshiftAdvancedOption{}
						for _, f1valf1f0f2iter := range f1valiter.AmazonRedshiftSource.Data.AdvancedOptions {
							f1valf1f0f2elem := &svcapitypes.AmazonRedshiftAdvancedOption{}
							if f1valf1f0f2iter.Key != nil {
								f1valf1f0f2elem.Key = f1valf1f0f2iter.Key
							}
							if f1valf1f0f2iter.Value != nil {
								f1valf1f0f2elem.Value = f1valf1f0f2iter.Value
							}
							f1valf1f0f2 = append(f1valf1f0f2, f1valf1f0f2elem)
						}
						f1valf1f0.AdvancedOptions = f1valf1f0f2
					}
					if f1valiter.AmazonRedshiftSource.Data.CatalogDatabase != nil {
						f1valf1f0f3 := &svcapitypes.Option{}
						if f1valiter.AmazonRedshiftSource.Data.CatalogDatabase.Description != nil {
							f1valf1f0f3.Description = f1valiter.AmazonRedshiftSource.Data.CatalogDatabase.Description
						}
						if f1valiter.AmazonRedshiftSource.Data.CatalogDatabase.Label != nil {
							f1valf1f0f3.Label = f1valiter.AmazonRedshiftSource.Data.CatalogDatabase.Label
						}
						if f1valiter.AmazonRedshiftSource.Data.CatalogDatabase.Value != nil {
							f1valf1f0f3.Value = f1valiter.AmazonRedshiftSource.Data.CatalogDatabase.Value
						}
						f1valf1f0.CatalogDatabase = f1valf1f0f3
					}
					if f1valiter.AmazonRedshiftSource.Data.CatalogRedshiftSchema != nil {
						f1valf1f0.CatalogRedshiftSchema = f1valiter.AmazonRedshiftSource.Data.CatalogRedshiftSchema
					}
					if f1valiter.AmazonRedshiftSource.Data.CatalogRedshiftTable != nil {
						f1valf1f0.CatalogRedshiftTable = f1valiter.AmazonRedshiftSource.Data.CatalogRedshiftTable
					}
					if f1valiter.AmazonRedshiftSource.Data.CatalogTable != nil {
						f1valf1f0f6 := &svcapitypes.Option{}
						if f1valiter.AmazonRedshiftSource.Data.CatalogTable.Description != nil {
							f1valf1f0f6.Description = f1valiter.AmazonRedshiftSource.Data.CatalogTable.Description
						}
						if f1valiter.AmazonRedshiftSource.Data.CatalogTable.Label != nil {
							f1valf1f0f6.Label = f1valiter.AmazonRedshiftSource.Data.CatalogTable.Label
						}
						if f1valiter.AmazonRedshiftSource.Data.CatalogTable.Value != nil {
							f1valf1f0f6.Value = f1valiter.AmazonRedshiftSource.Data.CatalogTable.Value
						}
						f1valf1f0.CatalogTable = f1valf1f0f6
					}
					if f1valiter.AmazonRedshiftSource.Data.Connection != nil {
						f1valf1f0f7 := &svcapitypes.Option{}
						if f1valiter.AmazonRedshiftSource.Data.Connection.Description != nil {
							f1valf1f0f7.Description = f1valiter.AmazonRedshiftSource.Data.Connection.Description
						}
						if f1valiter.AmazonRedshiftSource.Data.Connection.Label != nil {
							f1valf1f0f7.Label = f1valiter.AmazonRedshiftSource.Data.Connection.Label
						}
						if f1valiter.AmazonRedshiftSource.Data.Connection.Value != nil {
							f1valf1f0f7.Value = f1valiter.AmazonRedshiftSource.Data.Connection.Value
						}
						f1valf1f0.Connection = f1valf1f0f7
					}
					if f1valiter.AmazonRedshiftSource.Data.CrawlerConnection != nil {
						f1valf1f0.CrawlerConnection = f1valiter.AmazonRedshiftSource.Data.CrawlerConnection
					}
					if f1valiter.AmazonRedshiftSource.Data.IamRole != nil {
						f1valf1f0f9 := &svcapitypes.Option{}
						if f1valiter.AmazonRedshiftSource.Data.IamRole.Description != nil {
							f1valf1f0f9.Description = f1valiter.AmazonRedshiftSource.Data.IamRole.Description
						}
						if f1valiter.AmazonRedshiftSource.Data.IamRole.Label != nil {
							f1valf1f0f9.Label = f1valiter.AmazonRedshiftSource.Data.IamRole.Label
						}
						if f1valiter.AmazonRedshiftSource.Data.IamRole.Value != nil {
							f1valf1f0f9.Value = f1valiter.AmazonRedshiftSource.Data.IamRole.Value
						}
						f1valf1f0.IAMRole = f1valf1f0f9
					}
					if f1valiter.AmazonRedshiftSource.Data.MergeAction != nil {
						f1valf1f0.MergeAction = f1valiter.AmazonRedshiftSource.Data.MergeAction
					}
					if f1valiter.AmazonRedshiftSource.Data.MergeClause != nil {
						f1valf1f0.MergeClause = f1valiter.AmazonRedshiftSource.Data.MergeClause
					}
					if f1valiter.AmazonRedshiftSource.Data.MergeWhenMatched != nil {
						f1valf1f0.MergeWhenMatched = f1valiter.AmazonRedshiftSource.Data.MergeWhenMatched
					}
					if f1valiter.AmazonRedshiftSource.Data.MergeWhenNotMatched != nil {
						f1valf1f0.MergeWhenNotMatched = f1valiter.AmazonRedshiftSource.Data.MergeWhenNotMatched
					}
					if f1valiter.AmazonRedshiftSource.Data.PostAction != nil {
						f1valf1f0.PostAction = f1valiter.AmazonRedshiftSource.Data.PostAction
					}
					if f1valiter.AmazonRedshiftSource.Data.PreAction != nil {
						f1valf1f0.PreAction = f1valiter.AmazonRedshiftSource.Data.PreAction
					}
					if f1valiter.AmazonRedshiftSource.Data.SampleQuery != nil {
						f1valf1f0.SampleQuery = f1valiter.AmazonRedshiftSource.Data.SampleQuery
					}
					if f1valiter.AmazonRedshiftSource.Data.Schema != nil {
						f1valf1f0f17 := &svcapitypes.Option{}
						if f1valiter.AmazonRedshiftSource.Data.Schema.Description != nil {
							f1valf1f0f17.Description = f1valiter.AmazonRedshiftSource.Data.Schema.Description
						}
						if f1valiter.AmazonRedshiftSource.Data.Schema.Label != nil {
							f1valf1f0f17.Label = f1valiter.AmazonRedshiftSource.Data.Schema.Label
						}
						if f1valiter.AmazonRedshiftSource.Data.Schema.Value != nil {
							f1valf1f0f17.Value = f1valiter.AmazonRedshiftSource.Data.Schema.Value
						}
						f1valf1f0.Schema = f1valf1f0f17
					}
					if f1valiter.AmazonRedshiftSource.Data.SelectedColumns != nil {
						f1valf1f0f18 := []*svcapitypes.Option{}
						for _, f1valf1f0f18iter := range f1valiter.AmazonRedshiftSource.Data.SelectedColumns {
							f1valf1f0f18elem := &svcapitypes.Option{}
							if f1valf1f0f18iter.Description != nil {
								f1valf1f0f18elem.Description = f1valf1f0f18iter.Description
							}
							if f1valf1f0f18iter.Label != nil {
								f1valf1f0f18elem.Label = f1valf1f0f18iter.Label
							}
							if f1valf1f0f18iter.Value != nil {
								f1valf1f0f18elem.Value = f1valf1f0f18iter.Value
							}
							f1valf1f0f18 = append(f1valf1f0f18, f1valf1f0f18elem)
						}
						f1valf1f0.SelectedColumns = f1valf1f0f18
					}
					if f1valiter.AmazonRedshiftSource.Data.SourceType != nil {
						f1valf1f0.SourceType = f1valiter.AmazonRedshiftSource.Data.SourceType
					}
					if f1valiter.AmazonRedshiftSource.Data.StagingTable != nil {
						f1valf1f0.StagingTable = f1valiter.AmazonRedshiftSource.Data.StagingTable
					}
					if f1valiter.AmazonRedshiftSource.Data.Table != nil {
						f1valf1f0f21 := &svcapitypes.Option{}
						if f1valiter.AmazonRedshiftSource.Data.Table.Description != nil {
							f1valf1f0f21.Description = f1valiter.AmazonRedshiftSource.Data.Table.Description
						}
						if f1valiter.AmazonRedshiftSource.Data.Table.Label != nil {
							f1valf1f0f21.Label = f1valiter.AmazonRedshiftSource.Data.Table.Label
						}
						if f1valiter.AmazonRedshiftSource.Data.Table.Value != nil {
							f1valf1f0f21.Value = f1valiter.AmazonRedshiftSource.Data.Table.Value
						}
						f1valf1f0.Table = f1valf1f0f21
					}
					if f1valiter.AmazonRedshiftSource.Data.TablePrefix != nil {
						f1valf1f0.TablePrefix = f1valiter.AmazonRedshiftSource.Data.TablePrefix
					}
					if f1valiter.AmazonRedshiftSource.Data.TableSchema != nil {
						f1valf1f0f23 := []*svcapitypes.Option{}
						for _, f1valf1f0f23iter := range f1valiter.AmazonRedshiftSource.Data.TableSchema {
							f1valf1f0f23elem := &svcapitypes.Option{}
							if f1valf1f0f23iter.Description != nil {
								f1valf1f0f23elem.Description = f1valf1f0f23iter.Description
							}
							if f1valf1f0f23iter.Label != nil {
								f1valf1f0f23elem.Label = f1valf1f0f23iter.Label
							}
							if f1valf1f0f23iter.Value != nil {
								f1valf1f0f23elem.Value = f1valf1f0f23iter.Value
							}
							f1valf1f0f23 = append(f1valf1f0f23, f1valf1f0f23elem)
						}
						f1valf1f0.TableSchema = f1valf1f0f23
					}
					if f1valiter.AmazonRedshiftSource.Data.TempDir != nil {
						f1valf1f0.TempDir = f1valiter.AmazonRedshiftSource.Data.TempDir
					}
					if f1valiter.AmazonRedshiftSource.Data.Upsert != nil {
						f1valf1f0.Upsert = f1valiter.AmazonRedshiftSource.Data.Upsert
					}
					f1valf1.Data = f1valf1f0
				}
				if f1valiter.AmazonRedshiftSource.Name != nil {
					f1valf1.Name = f1valiter.AmazonRedshiftSource.Name
				}
				f1val.AmazonRedshiftSource = f1valf1
			}
			if f1valiter.AmazonRedshiftTarget != nil {
				f1valf2 := &svcapitypes.AmazonRedshiftTarget{}
				if f1valiter.AmazonRedshiftTarget.Data != nil {
					f1valf2f0 := &svcapitypes.AmazonRedshiftNodeData{}
					if f1valiter.AmazonRedshiftTarget.Data.AccessType != nil {
						f1valf2f0.AccessType = f1valiter.AmazonRedshiftTarget.Data.AccessType
					}
					if f1valiter.AmazonRedshiftTarget.Data.Action != nil {
						f1valf2f0.Action = f1valiter.AmazonRedshiftTarget.Data.Action
					}
					if f1valiter.AmazonRedshiftTarget.Data.AdvancedOptions != nil {
						f1valf2f0f2 := []*svcapitypes.AmazonRedshiftAdvancedOption{}
						for _, f1valf2f0f2iter := range f1valiter.AmazonRedshiftTarget.Data.AdvancedOptions {
							f1valf2f0f2elem := &svcapitypes.AmazonRedshiftAdvancedOption{}
							if f1valf2f0f2iter.Key != nil {
								f1valf2f0f2elem.Key = f1valf2f0f2iter.Key
							}
							if f1valf2f0f2iter.Value != nil {
								f1valf2f0f2elem.Value = f1valf2f0f2iter.Value
							}
							f1valf2f0f2 = append(f1valf2f0f2, f1valf2f0f2elem)
						}
						f1valf2f0.AdvancedOptions = f1valf2f0f2
					}
					if f1valiter.AmazonRedshiftTarget.Data.CatalogDatabase != nil {
						f1valf2f0f3 := &svcapitypes.Option{}
						if f1valiter.AmazonRedshiftTarget.Data.CatalogDatabase.Description != nil {
							f1valf2f0f3.Description = f1valiter.AmazonRedshiftTarget.Data.CatalogDatabase.Description
						}
						if f1valiter.AmazonRedshiftTarget.Data.CatalogDatabase.Label != nil {
							f1valf2f0f3.Label = f1valiter.AmazonRedshiftTarget.Data.CatalogDatabase.Label
						}
						if f1valiter.AmazonRedshiftTarget.Data.CatalogDatabase.Value != nil {
							f1valf2f0f3.Value = f1valiter.AmazonRedshiftTarget.Data.CatalogDatabase.Value
						}
						f1valf2f0.CatalogDatabase = f1valf2f0f3
					}
					if f1valiter.AmazonRedshiftTarget.Data.CatalogRedshiftSchema != nil {
						f1valf2f0.CatalogRedshiftSchema = f1valiter.AmazonRedshiftTarget.Data.CatalogRedshiftSchema
					}
					if f1valiter.AmazonRedshiftTarget.Data.CatalogRedshiftTable != nil {
						f1valf2f0.CatalogRedshiftTable = f1valiter.AmazonRedshiftTarget.Data.CatalogRedshiftTable
					}
					if f1valiter.AmazonRedshiftTarget.Data.CatalogTable != nil {
						f1valf2f0f6 := &svcapitypes.Option{}
						if f1valiter.AmazonRedshiftTarget.Data.CatalogTable.Description != nil {
							f1valf2f0f6.Description = f1valiter.AmazonRedshiftTarget.Data.CatalogTable.Description
						}
						if f1valiter.AmazonRedshiftTarget.Data.CatalogTable.Label != nil {
							f1valf2f0f6.Label = f1valiter.AmazonRedshiftTarget.Data.CatalogTable.Label
						}
						if f1valiter.AmazonRedshiftTarget.Data.CatalogTable.Value != nil {
							f1valf2f0f6.Value = f1valiter.AmazonRedshiftTarget.Data.CatalogTable.Value
						}
						f1valf2f0.CatalogTable = f1valf2f0f6
					}
					if f1valiter.AmazonRedshiftTarget.Data.Connection != nil {
						f1valf2f0f7 := &svcapitypes.Option{}
						if f1valiter.AmazonRedshiftTarget.Data.Connection.Description != nil {
							f1valf2f0f7.Description = f1valiter.AmazonRedshiftTarget.Data.Connection.Description
						}
						if f1valiter.AmazonRedshiftTarget.Data.Connection.Label != nil {
							f1valf2f0f7.Label = f1valiter.AmazonRedshiftTarget.Data.Connection.Label
						}
						if f1valiter.AmazonRedshiftTarget.Data.Connection.Value != nil {
							f1valf2f0f7.Value = f1valiter.AmazonRedshiftTarget.Data.Connection.Value
						}
						f1valf2f0.Connection = f1valf2f0f7
					}
					if f1valiter.AmazonRedshiftTarget.Data.CrawlerConnection != nil {
						f1valf2f0.CrawlerConnection = f1valiter.AmazonRedshiftTarget.Data.CrawlerConnection
					}
					if f1valiter.AmazonRedshiftTarget.Data.IamRole != nil {
						f1valf2f0f9 := &svcapitypes.Option{}
						if f1valiter.AmazonRedshiftTarget.Data.IamRole.Description != nil {
							f1valf2f0f9.Description = f1valiter.AmazonRedshiftTarget.Data.IamRole.Description
						}
						if f1valiter.AmazonRedshiftTarget.Data.IamRole.Label != nil {
							f1valf2f0f9.Label = f1valiter.AmazonRedshiftTarget.Data.IamRole.Label
						}
						if f1valiter.AmazonRedshiftTarget.Data.IamRole.Value != nil {
							f1valf2f0f9.Value = f1valiter.AmazonRedshiftTarget.Data.IamRole.Value
						}
						f1valf2f0.IAMRole = f1valf2f0f9
					}
					if f1valiter.AmazonRedshiftTarget.Data.MergeAction != nil {
						f1valf2f0.MergeAction = f1valiter.AmazonRedshiftTarget.Data.MergeAction
					}
					if f1valiter.AmazonRedshiftTarget.Data.MergeClause != nil {
						f1valf2f0.MergeClause = f1valiter.AmazonRedshiftTarget.Data.MergeClause
					}
					if f1valiter.AmazonRedshiftTarget.Data.MergeWhenMatched != nil {
						f1valf2f0.MergeWhenMatched = f1valiter.AmazonRedshiftTarget.Data.MergeWhenMatched
					}
					if f1valiter.AmazonRedshiftTarget.Data.MergeWhenNotMatched != nil {
						f1valf2f0.MergeWhenNotMatched = f1valiter.AmazonRedshiftTarget.Data.MergeWhenNotMatched
					}
					if f1valiter.AmazonRedshiftTarget.Data.PostAction != nil {
						f1valf2f0.PostAction = f1valiter.AmazonRedshiftTarget.Data.PostAction
					}
					if f1valiter.AmazonRedshiftTarget.Data.PreAction != nil {
						f1valf2f0.PreAction = f1valiter.AmazonRedshiftTarget.Data.PreAction
					}
					if f1valiter.AmazonRedshiftTarget.Data.SampleQuery != nil {
						f1valf2f0.SampleQuery = f1valiter.AmazonRedshiftTarget.Data.SampleQuery
					}
					if f1valiter.AmazonRedshiftTarget.Data.Schema != nil {
						f1valf2f0f17 := &svcapitypes.Option{}
						if f1valiter.AmazonRedshiftTarget.Data.Schema.Description != nil {
							f1valf2f0f17.Description = f1valiter.AmazonRedshiftTarget.Data.Schema.Description
						}
						if f1valiter.AmazonRedshiftTarget.Data.Schema.Label != nil {
							f1valf2f0f17.Label = f1valiter.AmazonRedshiftTarget.Data.Schema.Label
						}
						if f1valiter.AmazonRedshiftTarget.Data.Schema.Value != nil {
							f1valf2f0f17.Value = f1valiter.AmazonRedshiftTarget.Data.Schema.Value
						}
						f1valf2f0.Schema = f1valf2f0f17
					}
					if f1valiter.AmazonRedshiftTarget.Data.SelectedColumns != nil {
						f1valf2f0f18 := []*svcapitypes.Option{}
						for _, f1valf2f0f18iter := range f1valiter.AmazonRedshiftTarget.Data.SelectedColumns {
							f1valf2f0f18elem := &svcapitypes.Option{}
							if f1valf2f0f18iter.Description != nil {
								f1valf2f0f18elem.Description = f1valf2f0f18iter.Description
							}
							if f1valf2f0f18iter.Label != nil {
								f1valf2f0f18elem.Label = f1valf2f0f18iter.Label
							}
							if f1valf2f0f18iter.Value != nil {
								f1valf2f0f18elem.Value = f1valf2f0f18iter.Value
							}
							f1valf2f0f18 = append(f1valf2f0f18, f1valf2f0f18elem)
						}
						f1valf2f0.SelectedColumns = f1valf2f0f18
					}
					if f1valiter.AmazonRedshiftTarget.Data.SourceType != nil {
						f1valf2f0.SourceType = f1valiter.AmazonRedshiftTarget.Data.SourceType
					}
					if f1valiter.AmazonRedshiftTarget.Data.StagingTable != nil {
						f1valf2f0.StagingTable = f1valiter.AmazonRedshiftTarget.Data.StagingTable
					}
					if f1valiter.AmazonRedshiftTarget.Data.Table != nil {
						f1valf2f0f21 := &svcapitypes.Option{}
						if f1valiter.AmazonRedshiftTarget.Data.Table.Description != nil {
							f1valf2f0f21.Description = f1valiter.AmazonRedshiftTarget.Data.Table.Description
						}
						if f1valiter.AmazonRedshiftTarget.Data.Table.Label != nil {
							f1valf2f0f21.Label = f1valiter.AmazonRedshiftTarget.Data.Table.Label
						}
						if f1valiter.AmazonRedshiftTarget.Data.Table.Value != nil {
							f1valf2f0f21.Value = f1valiter.AmazonRedshiftTarget.Data.Table.Value
						}
						f1valf2f0.Table = f1valf2f0f21
					}
					if f1valiter.AmazonRedshiftTarget.Data.TablePrefix != nil {
						f1valf2f0.TablePrefix = f1valiter.AmazonRedshiftTarget.Data.TablePrefix
					}
					if f1valiter.AmazonRedshiftTarget.Data.TableSchema != nil {
						f1valf2f0f23 := []*svcapitypes.Option{}
						for _, f1valf2f0f23iter := range f1valiter.AmazonRedshiftTarget.Data.TableSchema {
							f1valf2f0f23elem := &svcapitypes.Option{}
							if f1valf2f0f23iter.Description != nil {
								f1valf2f0f23elem.Description = f1valf2f0f23iter.Description
							}
							if f1valf2f0f23iter.Label != nil {
								f1valf2f0f23elem.Label = f1valf2f0f23iter.Label
							}
							if f1valf2f0f23iter.Value != nil {
								f1valf2f0f23elem.Value = f1valf2f0f23iter.Value
							}
							f1valf2f0f23 = append(f1valf2f0f23, f1valf2f0f23elem)
						}
						f1valf2f0.TableSchema = f1valf2f0f23
					}
					if f1valiter.AmazonRedshiftTarget.Data.TempDir != nil {
						f1valf2f0.TempDir = f1valiter.AmazonRedshiftTarget.Data.TempDir
					}
					if f1valiter.AmazonRedshiftTarget.Data.Upsert != nil {
						f1valf2f0.Upsert = f1valiter.AmazonRedshiftTarget.Data.Upsert
					}
					f1valf2.Data = f1valf2f0
				}
				if f1valiter.AmazonRedshiftTarget.Inputs != nil {
					f1valf2f1 := []*string{}
					for _, f1valf2f1iter := range f1valiter.AmazonRedshiftTarget.Inputs {
						var f1valf2f1elem string
						f1valf2f1elem = *f1valf2f1iter
						f1valf2f1 = append(f1valf2f1, &f1valf2f1elem)
					}
					f1valf2.Inputs = f1valf2f1
				}
				if f1valiter.AmazonRedshiftTarget.Name != nil {
					f1valf2.Name = f1valiter.AmazonRedshiftTarget.Name
				}
				f1val.AmazonRedshiftTarget = f1valf2
			}
			if f1valiter.ApplyMapping != nil {
				f1valf3 := &svcapitypes.ApplyMapping{}
				if f1valiter.ApplyMapping.Inputs != nil {
					f1valf3f0 := []*string{}
					for _, f1valf3f0iter := range f1valiter.ApplyMapping.Inputs {
						var f1valf3f0elem string
						f1valf3f0elem = *f1valf3f0iter
						f1valf3f0 = append(f1valf3f0, &f1valf3f0elem)
					}
					f1valf3.Inputs = f1valf3f0
				}
				if f1valiter.ApplyMapping.Mapping != nil {
					f1valf3f1 := []*svcapitypes.Mapping{}
					for _, f1valf3f1iter := range f1valiter.ApplyMapping.Mapping {
						f1valf3f1elem := &svcapitypes.Mapping{}
						if f1valf3f1iter.Dropped != nil {
							f1valf3f1elem.Dropped = f1valf3f1iter.Dropped
						}
						if f1valf3f1iter.FromPath != nil {
							f1valf3f1elemf1 := []*string{}
							for _, f1valf3f1elemf1iter := range f1valf3f1iter.FromPath {
								var f1valf3f1elemf1elem string
								f1valf3f1elemf1elem = *f1valf3f1elemf1iter
								f1valf3f1elemf1 = append(f1valf3f1elemf1, &f1valf3f1elemf1elem)
							}
							f1valf3f1elem.FromPath = f1valf3f1elemf1
						}
						if f1valf3f1iter.FromType != nil {
							f1valf3f1elem.FromType = f1valf3f1iter.FromType
						}
						if f1valf3f1iter.ToKey != nil {
							f1valf3f1elem.ToKey = f1valf3f1iter.ToKey
						}
						if f1valf3f1iter.ToType != nil {
							f1valf3f1elem.ToType = f1valf3f1iter.ToType
						}
						f1valf3f1 = append(f1valf3f1, f1valf3f1elem)
					}
					f1valf3.Mapping = f1valf3f1
				}
				if f1valiter.ApplyMapping.Name != nil {
					f1valf3.Name = f1valiter.ApplyMapping.Name
				}
				f1val.ApplyMapping = f1valf3
			}
			if f1valiter.AthenaConnectorSource != nil {
				f1valf4 := &svcapitypes.AthenaConnectorSource{}
				if f1valiter.AthenaConnectorSource.ConnectionName != nil {
					f1valf4.ConnectionName = f1valiter.AthenaConnectorSource.ConnectionName
				}
				if f1valiter.AthenaConnectorSource.ConnectionTable != nil {
					f1valf4.ConnectionTable = f1valiter.AthenaConnectorSource.ConnectionTable
				}
				if f1valiter.AthenaConnectorSource.ConnectionType != nil {
					f1valf4.ConnectionType = f1valiter.AthenaConnectorSource.ConnectionType
				}
				if f1valiter.AthenaConnectorSource.ConnectorName != nil {
					f1valf4.ConnectorName = f1valiter.AthenaConnectorSource.ConnectorName
				}
				if f1valiter.AthenaConnectorSource.Name != nil {
					f1valf4.Name = f1valiter.AthenaConnectorSource.Name
				}
				if f1valiter.AthenaConnectorSource.OutputSchemas != nil {
					f1valf4f5 := []*svcapitypes.GlueSchema{}
					for _, f1valf4f5iter := range f1valiter.AthenaConnectorSource.OutputSchemas {
						f1valf4f5elem := &svcapitypes.GlueSchema{}
						if f1valf4f5iter.Columns != nil {
							f1valf4f5elemf0 := []*svcapitypes.GlueStudioSchemaColumn{}
							for _, f1valf4f5elemf0iter := range f1valf4f5iter.Columns {
								f1valf4f5elemf0elem := &svcapitypes.GlueStudioSchemaColumn{}
								if f1valf4f5elemf0iter.Name != nil {
									f1valf4f5elemf0elem.Name = f1valf4f5elemf0iter.Name
								}
								if f1valf4f5elemf0iter.Type != nil {
									f1valf4f5elemf0elem.Type = f1valf4f5elemf0iter.Type
								}
								f1valf4f5elemf0 = append(f1valf4f5elemf0, f1valf4f5elemf0elem)
							}
							f1valf4f5elem.Columns = f1valf4f5elemf0
						}
						f1valf4f5 = append(f1valf4f5, f1valf4f5elem)
					}
					f1valf4.OutputSchemas = f1valf4f5
				}
				if f1valiter.AthenaConnectorSource.SchemaName != nil {
					f1valf4.SchemaName = f1valiter.AthenaConnectorSource.SchemaName
				}
				f1val.AthenaConnectorSource = f1valf4
			}
			if f1valiter.CatalogDeltaSource != nil {
				f1valf5 := &svcapitypes.CatalogDeltaSource{}
				if f1valiter.CatalogDeltaSource.AdditionalDeltaOptions != nil {
					f1valf5f0 := map[string]*string{}
					for f1valf5f0key, f1valf5f0valiter := range f1valiter.CatalogDeltaSource.AdditionalDeltaOptions {
						var f1valf5f0val string
						f1valf5f0val = *f1valf5f0valiter
						f1valf5f0[f1valf5f0key] = &f1valf5f0val
					}
					f1valf5.AdditionalDeltaOptions = f1valf5f0
				}
				if f1valiter.CatalogDeltaSource.Database != nil {
					f1valf5.Database = f1valiter.CatalogDeltaSource.Database
				}
				if f1valiter.CatalogDeltaSource.Name != nil {
					f1valf5.Name = f1valiter.CatalogDeltaSource.Name
				}
				if f1valiter.CatalogDeltaSource.OutputSchemas != nil {
					f1valf5f3 := []*svcapitypes.GlueSchema{}
					for _, f1valf5f3iter := range f1valiter.CatalogDeltaSource.OutputSchemas {
						f1valf5f3elem := &svcapitypes.GlueSchema{}
						if f1valf5f3iter.Columns != nil {
							f1valf5f3elemf0 := []*svcapitypes.GlueStudioSchemaColumn{}
							for _, f1valf5f3elemf0iter := range f1valf5f3iter.Columns {
								f1valf5f3elemf0elem := &svcapitypes.GlueStudioSchemaColumn{}
								if f1valf5f3elemf0iter.Name != nil {
									f1valf5f3elemf0elem.Name = f1valf5f3elemf0iter.Name
								}
								if f1valf5f3elemf0iter.Type != nil {
									f1valf5f3elemf0elem.Type = f1valf5f3elemf0iter.Type
								}
								f1valf5f3elemf0 = append(f1valf5f3elemf0, f1valf5f3elemf0elem)
							}
							f1valf5f3elem.Columns = f1valf5f3elemf0
						}
						f1valf5f3 = append(f1valf5f3, f1valf5f3elem)
					}
					f1valf5.OutputSchemas = f1valf5f3
				}
				if f1valiter.CatalogDeltaSource.Table != nil {
					f1valf5.Table = f1valiter.CatalogDeltaSource.Table
				}
				f1val.CatalogDeltaSource = f1valf5
			}
			if f1valiter.CatalogHudiSource != nil {
				f1valf6 := &svcapitypes.CatalogHudiSource{}
				if f1valiter.CatalogHudiSource.AdditionalHudiOptions != nil {
					f1valf6f0 := map[string]*string{}
					for f1valf6f0key, f1valf6f0valiter := range f1valiter.CatalogHudiSource.AdditionalHudiOptions {
						var f1valf6f0val string
						f1valf6f0val = *f1valf6f0valiter
						f1valf6f0[f1valf6f0key] = &f1valf6f0val
					}
					f1valf6.AdditionalHudiOptions = f1valf6f0
				}
				if f1valiter.CatalogHudiSource.Database != nil {
					f1valf6.Database = f1valiter.CatalogHudiSource.Database
				}
				if f1valiter.CatalogHudiSource.Name != nil {
					f1valf6.Name = f1valiter.CatalogHudiSource.Name
				}
				if f1valiter.CatalogHudiSource.OutputSchemas != nil {
					f1valf6f3 := []*svcapitypes.GlueSchema{}
					for _, f1valf6f3iter := range f1valiter.CatalogHudiSource.OutputSchemas {
						f1valf6f3elem := &svcapitypes.GlueSchema{}
						if f1valf6f3iter.Columns != nil {
							f1valf6f3elemf0 := []*svcapitypes.GlueStudioSchemaColumn{}
							for _, f1valf6f3elemf0iter := range f1valf6f3iter.Columns {
								f1valf6f3elemf0elem := &svcapitypes.GlueStudioSchemaColumn{}
								if f1valf6f3elemf0iter.Name != nil {
									f1valf6f3elemf0elem.Name = f1valf6f3elemf0iter.Name
								}
								if f1valf6f3elemf0iter.Type != nil {
									f1valf6f3elemf0elem.Type = f1valf6f3elemf0iter.Type
								}
								f1valf6f3elemf0 = append(f1valf6f3elemf0, f1valf6f3elemf0elem)
							}
							f1valf6f3elem.Columns = f1valf6f3elemf0
						}
						f1valf6f3 = append(f1valf6f3, f1valf6f3elem)
					}
					f1valf6.OutputSchemas = f1valf6f3
				}
				if f1valiter.CatalogHudiSource.Table != nil {
					f1valf6.Table = f1valiter.CatalogHudiSource.Table
				}
				f1val.CatalogHudiSource = f1valf6
			}
			if f1valiter.CatalogKafkaSource != nil {
				f1valf7 := &svcapitypes.CatalogKafkaSource{}
				if f1valiter.CatalogKafkaSource.DataPreviewOptions != nil {
					f1valf7f0 := &svcapitypes.StreamingDataPreviewOptions{}
					if f1valiter.CatalogKafkaSource.DataPreviewOptions.PollingTime != nil {
						f1valf7f0.PollingTime = f1valiter.CatalogKafkaSource.DataPreviewOptions.PollingTime
					}
					if f1valiter.CatalogKafkaSource.DataPreviewOptions.RecordPollingLimit != nil {
						f1valf7f0.RecordPollingLimit = f1valiter.CatalogKafkaSource.DataPreviewOptions.RecordPollingLimit
					}
					f1valf7.DataPreviewOptions = f1valf7f0
				}
				if f1valiter.CatalogKafkaSource.Database != nil {
					f1valf7.Database = f1valiter.CatalogKafkaSource.Database
				}
				if f1valiter.CatalogKafkaSource.DetectSchema != nil {
					f1valf7.DetectSchema = f1valiter.CatalogKafkaSource.DetectSchema
				}
				if f1valiter.CatalogKafkaSource.Name != nil {
					f1valf7.Name = f1valiter.CatalogKafkaSource.Name
				}
				if f1valiter.CatalogKafkaSource.StreamingOptions != nil {
					f1valf7f4 := &svcapitypes.KafkaStreamingSourceOptions{}
					if f1valiter.CatalogKafkaSource.StreamingOptions.AddRecordTimestamp != nil {
						f1valf7f4.AddRecordTimestamp = f1valiter.CatalogKafkaSource.StreamingOptions.AddRecordTimestamp
					}
					if f1valiter.CatalogKafkaSource.StreamingOptions.Assign != nil {
						f1valf7f4.Assign = f1valiter.CatalogKafkaSource.StreamingOptions.Assign
					}
					if f1valiter.CatalogKafkaSource.StreamingOptions.BootstrapServers != nil {
						f1valf7f4.BootstrapServers = f1valiter.CatalogKafkaSource.StreamingOptions.BootstrapServers
					}
					if f1valiter.CatalogKafkaSource.StreamingOptions.Classification != nil {
						f1valf7f4.Classification = f1valiter.CatalogKafkaSource.StreamingOptions.Classification
					}
					if f1valiter.CatalogKafkaSource.StreamingOptions.ConnectionName != nil {
						f1valf7f4.ConnectionName = f1valiter.CatalogKafkaSource.StreamingOptions.ConnectionName
					}
					if f1valiter.CatalogKafkaSource.StreamingOptions.Delimiter != nil {
						f1valf7f4.Delimiter = f1valiter.CatalogKafkaSource.StreamingOptions.Delimiter
					}
					if f1valiter.CatalogKafkaSource.StreamingOptions.EmitConsumerLagMetrics != nil {
						f1valf7f4.EmitConsumerLagMetrics = f1valiter.CatalogKafkaSource.StreamingOptions.EmitConsumerLagMetrics
					}
					if f1valiter.CatalogKafkaSource.StreamingOptions.EndingOffsets != nil {
						f1valf7f4.EndingOffsets = f1valiter.CatalogKafkaSource.StreamingOptions.EndingOffsets
					}
					if f1valiter.CatalogKafkaSource.StreamingOptions.IncludeHeaders != nil {
						f1valf7f4.IncludeHeaders = f1valiter.CatalogKafkaSource.StreamingOptions.IncludeHeaders
					}
					if f1valiter.CatalogKafkaSource.StreamingOptions.MaxOffsetsPerTrigger != nil {
						f1valf7f4.MaxOffsetsPerTrigger = f1valiter.CatalogKafkaSource.StreamingOptions.MaxOffsetsPerTrigger
					}
					if f1valiter.CatalogKafkaSource.StreamingOptions.MinPartitions != nil {
						f1valf7f4.MinPartitions = f1valiter.CatalogKafkaSource.StreamingOptions.MinPartitions
					}
					if f1valiter.CatalogKafkaSource.StreamingOptions.NumRetries != nil {
						f1valf7f4.NumRetries = f1valiter.CatalogKafkaSource.StreamingOptions.NumRetries
					}
					if f1valiter.CatalogKafkaSource.StreamingOptions.PollTimeoutMs != nil {
						f1valf7f4.PollTimeoutMs = f1valiter.CatalogKafkaSource.StreamingOptions.PollTimeoutMs
					}
					if f1valiter.CatalogKafkaSource.StreamingOptions.RetryIntervalMs != nil {
						f1valf7f4.RetryIntervalMs = f1valiter.CatalogKafkaSource.StreamingOptions.RetryIntervalMs
					}
					if f1valiter.CatalogKafkaSource.StreamingOptions.SecurityProtocol != nil {
						f1valf7f4.SecurityProtocol = f1valiter.CatalogKafkaSource.StreamingOptions.SecurityProtocol
					}
					if f1valiter.CatalogKafkaSource.StreamingOptions.StartingOffsets != nil {
						f1valf7f4.StartingOffsets = f1valiter.CatalogKafkaSource.StreamingOptions.StartingOffsets
					}
					if f1valiter.CatalogKafkaSource.StreamingOptions.StartingTimestamp != nil {
						f1valf7f4.StartingTimestamp = &metav1.Time{*f1valiter.CatalogKafkaSource.StreamingOptions.StartingTimestamp}
					}
					if f1valiter.CatalogKafkaSource.StreamingOptions.SubscribePattern != nil {
						f1valf7f4.SubscribePattern = f1valiter.CatalogKafkaSource.StreamingOptions.SubscribePattern
					}
					if f1valiter.CatalogKafkaSource.StreamingOptions.TopicName != nil {
						f1valf7f4.TopicName = f1valiter.CatalogKafkaSource.StreamingOptions.TopicName
					}
					f1valf7.StreamingOptions = f1valf7f4
				}
				if f1valiter.CatalogKafkaSource.Table != nil {
					f1valf7.Table = f1valiter.CatalogKafkaSource.Table
				}
				if f1valiter.CatalogKafkaSource.WindowSize != nil {
					f1valf7.WindowSize = f1valiter.CatalogKafkaSource.WindowSize
				}
				f1val.CatalogKafkaSource = f1valf7
			}
			if f1valiter.CatalogKinesisSource != nil {
				f1valf8 := &svcapitypes.CatalogKinesisSource{}
				if f1valiter.CatalogKinesisSource.DataPreviewOptions != nil {
					f1valf8f0 := &svcapitypes.StreamingDataPreviewOptions{}
					if f1valiter.CatalogKinesisSource.DataPreviewOptions.PollingTime != nil {
						f1valf8f0.PollingTime = f1valiter.CatalogKinesisSource.DataPreviewOptions.PollingTime
					}
					if f1valiter.CatalogKinesisSource.DataPreviewOptions.RecordPollingLimit != nil {
						f1valf8f0.RecordPollingLimit = f1valiter.CatalogKinesisSource.DataPreviewOptions.RecordPollingLimit
					}
					f1valf8.DataPreviewOptions = f1valf8f0
				}
				if f1valiter.CatalogKinesisSource.Database != nil {
					f1valf8.Database = f1valiter.CatalogKinesisSource.Database
				}
				if f1valiter.CatalogKinesisSource.DetectSchema != nil {
					f1valf8.DetectSchema = f1valiter.CatalogKinesisSource.DetectSchema
				}
				if f1valiter.CatalogKinesisSource.Name != nil {
					f1valf8.Name = f1valiter.CatalogKinesisSource.Name
				}
				if f1valiter.CatalogKinesisSource.StreamingOptions != nil {
					f1valf8f4 := &svcapitypes.KinesisStreamingSourceOptions{}
					if f1valiter.CatalogKinesisSource.StreamingOptions.AddIdleTimeBetweenReads != nil {
						f1valf8f4.AddIdleTimeBetweenReads = f1valiter.CatalogKinesisSource.StreamingOptions.AddIdleTimeBetweenReads
					}
					if f1valiter.CatalogKinesisSource.StreamingOptions.AddRecordTimestamp != nil {
						f1valf8f4.AddRecordTimestamp = f1valiter.CatalogKinesisSource.StreamingOptions.AddRecordTimestamp
					}
					if f1valiter.CatalogKinesisSource.StreamingOptions.AvoidEmptyBatches != nil {
						f1valf8f4.AvoidEmptyBatches = f1valiter.CatalogKinesisSource.StreamingOptions.AvoidEmptyBatches
					}
					if f1valiter.CatalogKinesisSource.StreamingOptions.Classification != nil {
						f1valf8f4.Classification = f1valiter.CatalogKinesisSource.StreamingOptions.Classification
					}
					if f1valiter.CatalogKinesisSource.StreamingOptions.Delimiter != nil {
						f1valf8f4.Delimiter = f1valiter.CatalogKinesisSource.StreamingOptions.Delimiter
					}
					if f1valiter.CatalogKinesisSource.StreamingOptions.DescribeShardInterval != nil {
						f1valf8f4.DescribeShardInterval = f1valiter.CatalogKinesisSource.StreamingOptions.DescribeShardInterval
					}
					if f1valiter.CatalogKinesisSource.StreamingOptions.EmitConsumerLagMetrics != nil {
						f1valf8f4.EmitConsumerLagMetrics = f1valiter.CatalogKinesisSource.StreamingOptions.EmitConsumerLagMetrics
					}
					if f1valiter.CatalogKinesisSource.StreamingOptions.EndpointUrl != nil {
						f1valf8f4.EndpointURL = f1valiter.CatalogKinesisSource.StreamingOptions.EndpointUrl
					}
					if f1valiter.CatalogKinesisSource.StreamingOptions.IdleTimeBetweenReadsInMs != nil {
						f1valf8f4.IdleTimeBetweenReadsInMs = f1valiter.CatalogKinesisSource.StreamingOptions.IdleTimeBetweenReadsInMs
					}
					if f1valiter.CatalogKinesisSource.StreamingOptions.MaxFetchRecordsPerShard != nil {
						f1valf8f4.MaxFetchRecordsPerShard = f1valiter.CatalogKinesisSource.StreamingOptions.MaxFetchRecordsPerShard
					}
					if f1valiter.CatalogKinesisSource.StreamingOptions.MaxFetchTimeInMs != nil {
						f1valf8f4.MaxFetchTimeInMs = f1valiter.CatalogKinesisSource.StreamingOptions.MaxFetchTimeInMs
					}
					if f1valiter.CatalogKinesisSource.StreamingOptions.MaxRecordPerRead != nil {
						f1valf8f4.MaxRecordPerRead = f1valiter.CatalogKinesisSource.StreamingOptions.MaxRecordPerRead
					}
					if f1valiter.CatalogKinesisSource.StreamingOptions.MaxRetryIntervalMs != nil {
						f1valf8f4.MaxRetryIntervalMs = f1valiter.CatalogKinesisSource.StreamingOptions.MaxRetryIntervalMs
					}
					if f1valiter.CatalogKinesisSource.StreamingOptions.NumRetries != nil {
						f1valf8f4.NumRetries = f1valiter.CatalogKinesisSource.StreamingOptions.NumRetries
					}
					if f1valiter.CatalogKinesisSource.StreamingOptions.RetryIntervalMs != nil {
						f1valf8f4.RetryIntervalMs = f1valiter.CatalogKinesisSource.StreamingOptions.RetryIntervalMs
					}
					if f1valiter.CatalogKinesisSource.StreamingOptions.RoleArn != nil {
						f1valf8f4.RoleARN = f1valiter.CatalogKinesisSource.StreamingOptions.RoleArn
					}
					if f1valiter.CatalogKinesisSource.StreamingOptions.RoleSessionName != nil {
						f1valf8f4.RoleSessionName = f1valiter.CatalogKinesisSource.StreamingOptions.RoleSessionName
					}
					if f1valiter.CatalogKinesisSource.StreamingOptions.StartingPosition != nil {
						f1valf8f4.StartingPosition = f1valiter.CatalogKinesisSource.StreamingOptions.StartingPosition
					}
					if f1valiter.CatalogKinesisSource.StreamingOptions.StartingTimestamp != nil {
						f1valf8f4.StartingTimestamp = &metav1.Time{*f1valiter.CatalogKinesisSource.StreamingOptions.StartingTimestamp}
					}
					if f1valiter.CatalogKinesisSource.StreamingOptions.StreamArn != nil {
						f1valf8f4.StreamARN = f1valiter.CatalogKinesisSource.StreamingOptions.StreamArn
					}
					if f1valiter.CatalogKinesisSource.StreamingOptions.StreamName != nil {
						f1valf8f4.StreamName = f1valiter.CatalogKinesisSource.StreamingOptions.StreamName
					}
					f1valf8.StreamingOptions = f1valf8f4
				}
				if f1valiter.CatalogKinesisSource.Table != nil {
					f1valf8.Table = f1valiter.CatalogKinesisSource.Table
				}
				if f1valiter.CatalogKinesisSource.WindowSize != nil {
					f1valf8.WindowSize = f1valiter.CatalogKinesisSource.WindowSize
				}
				f1val.CatalogKinesisSource = f1valf8
			}
			if f1valiter.CatalogSource != nil {
				f1valf9 := &svcapitypes.CatalogSource{}
				if f1valiter.CatalogSource.Database != nil {
					f1valf9.Database = f1valiter.CatalogSource.Database
				}
				if f1valiter.CatalogSource.Name != nil {
					f1valf9.Name = f1valiter.CatalogSource.Name
				}
				if f1valiter.CatalogSource.Table != nil {
					f1valf9.Table = f1valiter.CatalogSource.Table
				}
				f1val.CatalogSource = f1valf9
			}
			if f1valiter.CatalogTarget != nil {
				f1valf10 := &svcapitypes.BasicCatalogTarget{}
				if f1valiter.CatalogTarget.Database != nil {
					f1valf10.Database = f1valiter.CatalogTarget.Database
				}
				if f1valiter.CatalogTarget.Inputs != nil {
					f1valf10f1 := []*string{}
					for _, f1valf10f1iter := range f1valiter.CatalogTarget.Inputs {
						var f1valf10f1elem string
						f1valf10f1elem = *f1valf10f1iter
						f1valf10f1 = append(f1valf10f1, &f1valf10f1elem)
					}
					f1valf10.Inputs = f1valf10f1
				}
				if f1valiter.CatalogTarget.Name != nil {
					f1valf10.Name = f1valiter.CatalogTarget.Name
				}
				if f1valiter.CatalogTarget.Table != nil {
					f1valf10.Table = f1valiter.CatalogTarget.Table
				}
				f1val.CatalogTarget = f1valf10
			}
			if f1valiter.ConnectorDataSource != nil {
				f1valf11 := &svcapitypes.ConnectorDataSource{}
				if f1valiter.ConnectorDataSource.ConnectionType != nil {
					f1valf11.ConnectionType = f1valiter.ConnectorDataSource.ConnectionType
				}
				if f1valiter.ConnectorDataSource.Data != nil {
					f1valf11f1 := map[string]*string{}
					for f1valf11f1key, f1valf11f1valiter := range f1valiter.ConnectorDataSource.Data {
						var f1valf11f1val string
						f1valf11f1val = *f1valf11f1valiter
						f1valf11f1[f1valf11f1key] = &f1valf11f1val
					}
					f1valf11.Data = f1valf11f1
				}
				if f1valiter.ConnectorDataSource.Name != nil {
					f1valf11.Name = f1valiter.ConnectorDataSource.Name
				}
				if f1valiter.ConnectorDataSource.OutputSchemas != nil {
					f1valf11f3 := []*svcapitypes.GlueSchema{}
					for _, f1valf11f3iter := range f1valiter.ConnectorDataSource.OutputSchemas {
						f1valf11f3elem := &svcapitypes.GlueSchema{}
						if f1valf11f3iter.Columns != nil {
							f1valf11f3elemf0 := []*svcapitypes.GlueStudioSchemaColumn{}
							for _, f1valf11f3elemf0iter := range f1valf11f3iter.Columns {
								f1valf11f3elemf0elem := &svcapitypes.GlueStudioSchemaColumn{}
								if f1valf11f3elemf0iter.Name != nil {
									f1valf11f3elemf0elem.Name = f1valf11f3elemf0iter.Name
								}
								if f1valf11f3elemf0iter.Type != nil {
									f1valf11f3elemf0elem.Type = f1valf11f3elemf0iter.Type
								}
								f1valf11f3elemf0 = append(f1valf11f3elemf0, f1valf11f3elemf0elem)
							}
							f1valf11f3elem.Columns = f1valf11f3elemf0
						}
						f1valf11f3 = append(f1valf11f3, f1valf11f3elem)
					}
					f1valf11.OutputSchemas = f1valf11f3
				}
				f1val.ConnectorDataSource = f1valf11
			}
			if f1valiter.ConnectorDataTarget != nil {
				f1valf12 := &svcapitypes.ConnectorDataTarget{}
				if f1valiter.ConnectorDataTarget.ConnectionType != nil {
					f1valf12.ConnectionType = f1valiter.ConnectorDataTarget.ConnectionType
				}
				if f1valiter.ConnectorDataTarget.Data != nil {
					f1valf12f1 := map[string]*string{}
					for f1valf12f1key, f1valf12f1valiter := range f1valiter.ConnectorDataTarget.Data {
						var f1valf12f1val string
						f1valf12f1val = *f1valf12f1valiter
						f1valf12f1[f1valf12f1key] = &f1valf12f1val
					}
					f1valf12.Data = f1valf12f1
				}
				if f1valiter.ConnectorDataTarget.Inputs != nil {
					f1valf12f2 := []*string{}
					for _, f1valf12f2iter := range f1valiter.ConnectorDataTarget.Inputs {
						var f1valf12f2elem string
						f1valf12f2elem = *f1valf12f2iter
						f1valf12f2 = append(f1valf12f2, &f1valf12f2elem)
					}
					f1valf12.Inputs = f1valf12f2
				}
				if f1valiter.ConnectorDataTarget.Name != nil {
					f1valf12.Name = f1valiter.ConnectorDataTarget.Name
				}
				f1val.ConnectorDataTarget = f1valf12
			}
			if f1valiter.CustomCode != nil {
				f1valf13 := &svcapitypes.CustomCode{}
				if f1valiter.CustomCode.ClassName != nil {
					f1valf13.ClassName = f1valiter.CustomCode.ClassName
				}
				if f1valiter.CustomCode.Code != nil {
					f1valf13.Code = f1valiter.CustomCode.Code
				}
				if f1valiter.CustomCode.Inputs != nil {
					f1valf13f2 := []*string{}
					for _, f1valf13f2iter := range f1valiter.CustomCode.Inputs {
						var f1valf13f2elem string
						f1valf13f2elem = *f1valf13f2iter
						f1valf13f2 = append(f1valf13f2, &f1valf13f2elem)
					}
					f1valf13.Inputs = f1valf13f2
				}
				if f1valiter.CustomCode.Name != nil {
					f1valf13.Name = f1valiter.CustomCode.Name
				}
				if f1valiter.CustomCode.OutputSchemas != nil {
					f1valf13f4 := []*svcapitypes.GlueSchema{}
					for _, f1valf13f4iter := range f1valiter.CustomCode.OutputSchemas {
						f1valf13f4elem := &svcapitypes.GlueSchema{}
						if f1valf13f4iter.Columns != nil {
							f1valf13f4elemf0 := []*svcapitypes.GlueStudioSchemaColumn{}
							for _, f1valf13f4elemf0iter := range f1valf13f4iter.Columns {
								f1valf13f4elemf0elem := &svcapitypes.GlueStudioSchemaColumn{}
								if f1valf13f4elemf0iter.Name != nil {
									f1valf13f4elemf0elem.Name = f1valf13f4elemf0iter.Name
								}
								if f1valf13f4elemf0iter.Type != nil {
									f1valf13f4elemf0elem.Type = f1valf13f4elemf0iter.Type
								}
								f1valf13f4elemf0 = append(f1valf13f4elemf0, f1valf13f4elemf0elem)
							}
							f1valf13f4elem.Columns = f1valf13f4elemf0
						}
						f1valf13f4 = append(f1valf13f4, f1valf13f4elem)
					}
					f1valf13.OutputSchemas = f1valf13f4
				}
				f1val.CustomCode = f1valf13
			}
			if f1valiter.DirectJDBCSource != nil {
				f1valf14 := &svcapitypes.DirectJDBCSource{}
				if f1valiter.DirectJDBCSource.ConnectionName != nil {
					f1valf14.ConnectionName = f1valiter.DirectJDBCSource.ConnectionName
				}
				if f1valiter.DirectJDBCSource.ConnectionType != nil {
					f1valf14.ConnectionType = f1valiter.DirectJDBCSource.ConnectionType
				}
				if f1valiter.DirectJDBCSource.Database != nil {
					f1valf14.Database = f1valiter.DirectJDBCSource.Database
				}
				if f1valiter.DirectJDBCSource.Name != nil {
					f1valf14.Name = f1valiter.DirectJDBCSource.Name
				}
				if f1valiter.DirectJDBCSource.RedshiftTmpDir != nil {
					f1valf14.RedshiftTmpDir = f1valiter.DirectJDBCSource.RedshiftTmpDir
				}
				if f1valiter.DirectJDBCSource.Table != nil {
					f1valf14.Table = f1valiter.DirectJDBCSource.Table
				}
				f1val.DirectJDBCSource = f1valf14
			}
			if f1valiter.DirectKafkaSource != nil {
				f1valf15 := &svcapitypes.DirectKafkaSource{}
				if f1valiter.DirectKafkaSource.DataPreviewOptions != nil {
					f1valf15f0 := &svcapitypes.StreamingDataPreviewOptions{}
					if f1valiter.DirectKafkaSource.DataPreviewOptions.PollingTime != nil {
						f1valf15f0.PollingTime = f1valiter.DirectKafkaSource.DataPreviewOptions.PollingTime
					}
					if f1valiter.DirectKafkaSource.DataPreviewOptions.RecordPollingLimit != nil {
						f1valf15f0.RecordPollingLimit = f1valiter.DirectKafkaSource.DataPreviewOptions.RecordPollingLimit
					}
					f1valf15.DataPreviewOptions = f1valf15f0
				}
				if f1valiter.DirectKafkaSource.DetectSchema != nil {
					f1valf15.DetectSchema = f1valiter.DirectKafkaSource.DetectSchema
				}
				if f1valiter.DirectKafkaSource.Name != nil {
					f1valf15.Name = f1valiter.DirectKafkaSource.Name
				}
				if f1valiter.DirectKafkaSource.StreamingOptions != nil {
					f1valf15f3 := &svcapitypes.KafkaStreamingSourceOptions{}
					if f1valiter.DirectKafkaSource.StreamingOptions.AddRecordTimestamp != nil {
						f1valf15f3.AddRecordTimestamp = f1valiter.DirectKafkaSource.StreamingOptions.AddRecordTimestamp
					}
					if f1valiter.DirectKafkaSource.StreamingOptions.Assign != nil {
						f1valf15f3.Assign = f1valiter.DirectKafkaSource.StreamingOptions.Assign
					}
					if f1valiter.DirectKafkaSource.StreamingOptions.BootstrapServers != nil {
						f1valf15f3.BootstrapServers = f1valiter.DirectKafkaSource.StreamingOptions.BootstrapServers
					}
					if f1valiter.DirectKafkaSource.StreamingOptions.Classification != nil {
						f1valf15f3.Classification = f1valiter.DirectKafkaSource.StreamingOptions.Classification
					}
					if f1valiter.DirectKafkaSource.StreamingOptions.ConnectionName != nil {
						f1valf15f3.ConnectionName = f1valiter.DirectKafkaSource.StreamingOptions.ConnectionName
					}
					if f1valiter.DirectKafkaSource.StreamingOptions.Delimiter != nil {
						f1valf15f3.Delimiter = f1valiter.DirectKafkaSource.StreamingOptions.Delimiter
					}
					if f1valiter.DirectKafkaSource.StreamingOptions.EmitConsumerLagMetrics != nil {
						f1valf15f3.EmitConsumerLagMetrics = f1valiter.DirectKafkaSource.StreamingOptions.EmitConsumerLagMetrics
					}
					if f1valiter.DirectKafkaSource.StreamingOptions.EndingOffsets != nil {
						f1valf15f3.EndingOffsets = f1valiter.DirectKafkaSource.StreamingOptions.EndingOffsets
					}
					if f1valiter.DirectKafkaSource.StreamingOptions.IncludeHeaders != nil {
						f1valf15f3.IncludeHeaders = f1valiter.DirectKafkaSource.StreamingOptions.IncludeHeaders
					}
					if f1valiter.DirectKafkaSource.StreamingOptions.MaxOffsetsPerTrigger != nil {
						f1valf15f3.MaxOffsetsPerTrigger = f1valiter.DirectKafkaSource.StreamingOptions.MaxOffsetsPerTrigger
					}
					if f1valiter.DirectKafkaSource.StreamingOptions.MinPartitions != nil {
						f1valf15f3.MinPartitions = f1valiter.DirectKafkaSource.StreamingOptions.MinPartitions
					}
					if f1valiter.DirectKafkaSource.StreamingOptions.NumRetries != nil {
						f1valf15f3.NumRetries = f1valiter.DirectKafkaSource.StreamingOptions.NumRetries
					}
					if f1valiter.DirectKafkaSource.StreamingOptions.PollTimeoutMs != nil {
						f1valf15f3.PollTimeoutMs = f1valiter.DirectKafkaSource.StreamingOptions.PollTimeoutMs
					}
					if f1valiter.DirectKafkaSource.StreamingOptions.RetryIntervalMs != nil {
						f1valf15f3.RetryIntervalMs = f1valiter.DirectKafkaSource.StreamingOptions.RetryIntervalMs
					}
					if f1valiter.DirectKafkaSource.StreamingOptions.SecurityProtocol != nil {
						f1valf15f3.SecurityProtocol = f1valiter.DirectKafkaSource.StreamingOptions.SecurityProtocol
					}
					if f1valiter.DirectKafkaSource.StreamingOptions.StartingOffsets != nil {
						f1valf15f3.StartingOffsets = f1valiter.DirectKafkaSource.StreamingOptions.StartingOffsets
					}
					if f1valiter.DirectKafkaSource.StreamingOptions.StartingTimestamp != nil {
						f1valf15f3.StartingTimestamp = &metav1.Time{*f1valiter.DirectKafkaSource.StreamingOptions.StartingTimestamp}
					}
					if f1valiter.DirectKafkaSource.StreamingOptions.SubscribePattern != nil {
						f1valf15f3.SubscribePattern = f1valiter.DirectKafkaSource.StreamingOptions.SubscribePattern
					}
					if f1valiter.DirectKafkaSource.StreamingOptions.TopicName != nil {
						f1valf15f3.TopicName = f1valiter.DirectKafkaSource.StreamingOptions.TopicName
					}
					f1valf15.StreamingOptions = f1valf15f3
				}
				if f1valiter.DirectKafkaSource.WindowSize != nil {
					f1valf15.WindowSize = f1valiter.DirectKafkaSource.WindowSize
				}
				f1val.DirectKafkaSource = f1valf15
			}
			if f1valiter.DirectKinesisSource != nil {
				f1valf16 := &svcapitypes.DirectKinesisSource{}
				if f1valiter.DirectKinesisSource.DataPreviewOptions != nil {
					f1valf16f0 := &svcapitypes.StreamingDataPreviewOptions{}
					if f1valiter.DirectKinesisSource.DataPreviewOptions.PollingTime != nil {
						f1valf16f0.PollingTime = f1valiter.DirectKinesisSource.DataPreviewOptions.PollingTime
					}
					if f1valiter.DirectKinesisSource.DataPreviewOptions.RecordPollingLimit != nil {
						f1valf16f0.RecordPollingLimit = f1valiter.DirectKinesisSource.DataPreviewOptions.RecordPollingLimit
					}
					f1valf16.DataPreviewOptions = f1valf16f0
				}
				if f1valiter.DirectKinesisSource.DetectSchema != nil {
					f1valf16.DetectSchema = f1valiter.DirectKinesisSource.DetectSchema
				}
				if f1valiter.DirectKinesisSource.Name != nil {
					f1valf16.Name = f1valiter.DirectKinesisSource.Name
				}
				if f1valiter.DirectKinesisSource.StreamingOptions != nil {
					f1valf16f3 := &svcapitypes.KinesisStreamingSourceOptions{}
					if f1valiter.DirectKinesisSource.StreamingOptions.AddIdleTimeBetweenReads != nil {
						f1valf16f3.AddIdleTimeBetweenReads = f1valiter.DirectKinesisSource.StreamingOptions.AddIdleTimeBetweenReads
					}
					if f1valiter.DirectKinesisSource.StreamingOptions.AddRecordTimestamp != nil {
						f1valf16f3.AddRecordTimestamp = f1valiter.DirectKinesisSource.StreamingOptions.AddRecordTimestamp
					}
					if f1valiter.DirectKinesisSource.StreamingOptions.AvoidEmptyBatches != nil {
						f1valf16f3.AvoidEmptyBatches = f1valiter.DirectKinesisSource.StreamingOptions.AvoidEmptyBatches
					}
					if f1valiter.DirectKinesisSource.StreamingOptions.Classification != nil {
						f1valf16f3.Classification = f1valiter.DirectKinesisSource.StreamingOptions.Classification
					}
					if f1valiter.DirectKinesisSource.StreamingOptions.Delimiter != nil {
						f1valf16f3.Delimiter = f1valiter.DirectKinesisSource.StreamingOptions.Delimiter
					}
					if f1valiter.DirectKinesisSource.StreamingOptions.DescribeShardInterval != nil {
						f1valf16f3.DescribeShardInterval = f1valiter.DirectKinesisSource.StreamingOptions.DescribeShardInterval
					}
					if f1valiter.DirectKinesisSource.StreamingOptions.EmitConsumerLagMetrics != nil {
						f1valf16f3.EmitConsumerLagMetrics = f1valiter.DirectKinesisSource.StreamingOptions.EmitConsumerLagMetrics
					}
					if f1valiter.DirectKinesisSource.StreamingOptions.EndpointUrl != nil {
						f1valf16f3.EndpointURL = f1valiter.DirectKinesisSource.StreamingOptions.EndpointUrl
					}
					if f1valiter.DirectKinesisSource.StreamingOptions.IdleTimeBetweenReadsInMs != nil {
						f1valf16f3.IdleTimeBetweenReadsInMs = f1valiter.DirectKinesisSource.StreamingOptions.IdleTimeBetweenReadsInMs
					}
					if f1valiter.DirectKinesisSource.StreamingOptions.MaxFetchRecordsPerShard != nil {
						f1valf16f3.MaxFetchRecordsPerShard = f1valiter.DirectKinesisSource.StreamingOptions.MaxFetchRecordsPerShard
					}
					if f1valiter.DirectKinesisSource.StreamingOptions.MaxFetchTimeInMs != nil {
						f1valf16f3.MaxFetchTimeInMs = f1valiter.DirectKinesisSource.StreamingOptions.MaxFetchTimeInMs
					}
					if f1valiter.DirectKinesisSource.StreamingOptions.MaxRecordPerRead != nil {
						f1valf16f3.MaxRecordPerRead = f1valiter.DirectKinesisSource.StreamingOptions.MaxRecordPerRead
					}
					if f1valiter.DirectKinesisSource.StreamingOptions.MaxRetryIntervalMs != nil {
						f1valf16f3.MaxRetryIntervalMs = f1valiter.DirectKinesisSource.StreamingOptions.MaxRetryIntervalMs
					}
					if f1valiter.DirectKinesisSource.StreamingOptions.NumRetries != nil {
						f1valf16f3.NumRetries = f1valiter.DirectKinesisSource.StreamingOptions.NumRetries
					}
					if f1valiter.DirectKinesisSource.StreamingOptions.RetryIntervalMs != nil {
						f1valf16f3.RetryIntervalMs = f1valiter.DirectKinesisSource.StreamingOptions.RetryIntervalMs
					}
					if f1valiter.DirectKinesisSource.StreamingOptions.RoleArn != nil {
						f1valf16f3.RoleARN = f1valiter.DirectKinesisSource.StreamingOptions.RoleArn
					}
					if f1valiter.DirectKinesisSource.StreamingOptions.RoleSessionName != nil {
						f1valf16f3.RoleSessionName = f1valiter.DirectKinesisSource.StreamingOptions.RoleSessionName
					}
					if f1valiter.DirectKinesisSource.StreamingOptions.StartingPosition != nil {
						f1valf16f3.StartingPosition = f1valiter.DirectKinesisSource.StreamingOptions.StartingPosition
					}
					if f1valiter.DirectKinesisSource.StreamingOptions.StartingTimestamp != nil {
						f1valf16f3.StartingTimestamp = &metav1.Time{*f1valiter.DirectKinesisSource.StreamingOptions.StartingTimestamp}
					}
					if f1valiter.DirectKinesisSource.StreamingOptions.StreamArn != nil {
						f1valf16f3.StreamARN = f1valiter.DirectKinesisSource.StreamingOptions.StreamArn
					}
					if f1valiter.DirectKinesisSource.StreamingOptions.StreamName != nil {
						f1valf16f3.StreamName = f1valiter.DirectKinesisSource.StreamingOptions.StreamName
					}
					f1valf16.StreamingOptions = f1valf16f3
				}
				if f1valiter.DirectKinesisSource.WindowSize != nil {
					f1valf16.WindowSize = f1valiter.DirectKinesisSource.WindowSize
				}
				f1val.DirectKinesisSource = f1valf16
			}
			if f1valiter.DropDuplicates != nil {
				f1valf17 := &svcapitypes.DropDuplicates{}
				if f1valiter.DropDuplicates.Columns != nil {
					f1valf17f0 := [][]*string{}
					for _, f1valf17f0iter := range f1valiter.DropDuplicates.Columns {
						f1valf17f0elem := []*string{}
						for _, f1valf17f0elemiter := range f1valf17f0iter {
							var f1valf17f0elemelem string
							f1valf17f0elemelem = *f1valf17f0elemiter
							f1valf17f0elem = append(f1valf17f0elem, &f1valf17f0elemelem)
						}
						f1valf17f0 = append(f1valf17f0, f1valf17f0elem)
					}
					f1valf17.Columns = f1valf17f0
				}
				if f1valiter.DropDuplicates.Inputs != nil {
					f1valf17f1 := []*string{}
					for _, f1valf17f1iter := range f1valiter.DropDuplicates.Inputs {
						var f1valf17f1elem string
						f1valf17f1elem = *f1valf17f1iter
						f1valf17f1 = append(f1valf17f1, &f1valf17f1elem)
					}
					f1valf17.Inputs = f1valf17f1
				}
				if f1valiter.DropDuplicates.Name != nil {
					f1valf17.Name = f1valiter.DropDuplicates.Name
				}
				f1val.DropDuplicates = f1valf17
			}
			if f1valiter.DropFields != nil {
				f1valf18 := &svcapitypes.DropFields{}
				if f1valiter.DropFields.Inputs != nil {
					f1valf18f0 := []*string{}
					for _, f1valf18f0iter := range f1valiter.DropFields.Inputs {
						var f1valf18f0elem string
						f1valf18f0elem = *f1valf18f0iter
						f1valf18f0 = append(f1valf18f0, &f1valf18f0elem)
					}
					f1valf18.Inputs = f1valf18f0
				}
				if f1valiter.DropFields.Name != nil {
					f1valf18.Name = f1valiter.DropFields.Name
				}
				if f1valiter.DropFields.Paths != nil {
					f1valf18f2 := [][]*string{}
					for _, f1valf18f2iter := range f1valiter.DropFields.Paths {
						f1valf18f2elem := []*string{}
						for _, f1valf18f2elemiter := range f1valf18f2iter {
							var f1valf18f2elemelem string
							f1valf18f2elemelem = *f1valf18f2elemiter
							f1valf18f2elem = append(f1valf18f2elem, &f1valf18f2elemelem)
						}
						f1valf18f2 = append(f1valf18f2, f1valf18f2elem)
					}
					f1valf18.Paths = f1valf18f2
				}
				f1val.DropFields = f1valf18
			}
			if f1valiter.DropNullFields != nil {
				f1valf19 := &svcapitypes.DropNullFields{}
				if f1valiter.DropNullFields.Inputs != nil {
					f1valf19f0 := []*string{}
					for _, f1valf19f0iter := range f1valiter.DropNullFields.Inputs {
						var f1valf19f0elem string
						f1valf19f0elem = *f1valf19f0iter
						f1valf19f0 = append(f1valf19f0, &f1valf19f0elem)
					}
					f1valf19.Inputs = f1valf19f0
				}
				if f1valiter.DropNullFields.Name != nil {
					f1valf19.Name = f1valiter.DropNullFields.Name
				}
				if f1valiter.DropNullFields.NullCheckBoxList != nil {
					f1valf19f2 := &svcapitypes.NullCheckBoxList{}
					if f1valiter.DropNullFields.NullCheckBoxList.IsEmpty != nil {
						f1valf19f2.IsEmpty = f1valiter.DropNullFields.NullCheckBoxList.IsEmpty
					}
					if f1valiter.DropNullFields.NullCheckBoxList.IsNegOne != nil {
						f1valf19f2.IsNegOne = f1valiter.DropNullFields.NullCheckBoxList.IsNegOne
					}
					if f1valiter.DropNullFields.NullCheckBoxList.IsNullString != nil {
						f1valf19f2.IsNullString = f1valiter.DropNullFields.NullCheckBoxList.IsNullString
					}
					f1valf19.NullCheckBoxList = f1valf19f2
				}
				if f1valiter.DropNullFields.NullTextList != nil {
					f1valf19f3 := []*svcapitypes.NullValueField{}
					for _, f1valf19f3iter := range f1valiter.DropNullFields.NullTextList {
						f1valf19f3elem := &svcapitypes.NullValueField{}
						if f1valf19f3iter.Datatype != nil {
							f1valf19f3elemf0 := &svcapitypes.Datatype{}
							if f1valf19f3iter.Datatype.Id != nil {
								f1valf19f3elemf0.ID = f1valf19f3iter.Datatype.Id
							}
							if f1valf19f3iter.Datatype.Label != nil {
								f1valf19f3elemf0.Label = f1valf19f3iter.Datatype.Label
							}
							f1valf19f3elem.Datatype = f1valf19f3elemf0
						}
						if f1valf19f3iter.Value != nil {
							f1valf19f3elem.Value = f1valf19f3iter.Value
						}
						f1valf19f3 = append(f1valf19f3, f1valf19f3elem)
					}
					f1valf19.NullTextList = f1valf19f3
				}
				f1val.DropNullFields = f1valf19
			}
			if f1valiter.DynamicTransform != nil {
				f1valf20 := &svcapitypes.DynamicTransform{}
				if f1valiter.DynamicTransform.FunctionName != nil {
					f1valf20.FunctionName = f1valiter.DynamicTransform.FunctionName
				}
				if f1valiter.DynamicTransform.Inputs != nil {
					f1valf20f1 := []*string{}
					for _, f1valf20f1iter := range f1valiter.DynamicTransform.Inputs {
						var f1valf20f1elem string
						f1valf20f1elem = *f1valf20f1iter
						f1valf20f1 = append(f1valf20f1, &f1valf20f1elem)
					}
					f1valf20.Inputs = f1valf20f1
				}
				if f1valiter.DynamicTransform.Name != nil {
					f1valf20.Name = f1valiter.DynamicTransform.Name
				}
				if f1valiter.DynamicTransform.OutputSchemas != nil {
					f1valf20f3 := []*svcapitypes.GlueSchema{}
					for _, f1valf20f3iter := range f1valiter.DynamicTransform.OutputSchemas {
						f1valf20f3elem := &svcapitypes.GlueSchema{}
						if f1valf20f3iter.Columns != nil {
							f1valf20f3elemf0 := []*svcapitypes.GlueStudioSchemaColumn{}
							for _, f1valf20f3elemf0iter := range f1valf20f3iter.Columns {
								f1valf20f3elemf0elem := &svcapitypes.GlueStudioSchemaColumn{}
								if f1valf20f3elemf0iter.Name != nil {
									f1valf20f3elemf0elem.Name = f1valf20f3elemf0iter.Name
								}
								if f1valf20f3elemf0iter.Type != nil {
									f1valf20f3elemf0elem.Type = f1valf20f3elemf0iter.Type
								}
								f1valf20f3elemf0 = append(f1valf20f3elemf0, f1valf20f3elemf0elem)
							}
							f1valf20f3elem.Columns = f1valf20f3elemf0
						}
						f1valf20f3 = append(f1valf20f3, f1valf20f3elem)
					}
					f1valf20.OutputSchemas = f1valf20f3
				}
				if f1valiter.DynamicTransform.Parameters != nil {
					f1valf20f4 := []*svcapitypes.TransformConfigParameter{}
					for _, f1valf20f4iter := range f1valiter.DynamicTransform.Parameters {
						f1valf20f4elem := &svcapitypes.TransformConfigParameter{}
						if f1valf20f4iter.IsOptional != nil {
							f1valf20f4elem.IsOptional = f1valf20f4iter.IsOptional
						}
						if f1valf20f4iter.ListType != nil {
							f1valf20f4elem.ListType = f1valf20f4iter.ListType
						}
						if f1valf20f4iter.Name != nil {
							f1valf20f4elem.Name = f1valf20f4iter.Name
						}
						if f1valf20f4iter.Type != nil {
							f1valf20f4elem.Type = f1valf20f4iter.Type
						}
						if f1valf20f4iter.ValidationMessage != nil {
							f1valf20f4elem.ValidationMessage = f1valf20f4iter.ValidationMessage
						}
						if f1valf20f4iter.ValidationRule != nil {
							f1valf20f4elem.ValidationRule = f1valf20f4iter.ValidationRule
						}
						if f1valf20f4iter.Value != nil {
							f1valf20f4elemf6 := []*string{}
							for _, f1valf20f4elemf6iter := range f1valf20f4iter.Value {
								var f1valf20f4elemf6elem string
								f1valf20f4elemf6elem = *f1valf20f4elemf6iter
								f1valf20f4elemf6 = append(f1valf20f4elemf6, &f1valf20f4elemf6elem)
							}
							f1valf20f4elem.Value = f1valf20f4elemf6
						}
						f1valf20f4 = append(f1valf20f4, f1valf20f4elem)
					}
					f1valf20.Parameters = f1valf20f4
				}
				if f1valiter.DynamicTransform.Path != nil {
					f1valf20.Path = f1valiter.DynamicTransform.Path
				}
				if f1valiter.DynamicTransform.TransformName != nil {
					f1valf20.TransformName = f1valiter.DynamicTransform.TransformName
				}
				if f1valiter.DynamicTransform.Version != nil {
					f1valf20.Version = f1valiter.DynamicTransform.Version
				}
				f1val.DynamicTransform = f1valf20
			}
			if f1valiter.DynamoDBCatalogSource != nil {
				f1valf21 := &svcapitypes.DynamoDBCatalogSource{}
				if f1valiter.DynamoDBCatalogSource.Database != nil {
					f1valf21.Database = f1valiter.DynamoDBCatalogSource.Database
				}
				if f1valiter.DynamoDBCatalogSource.Name != nil {
					f1valf21.Name = f1valiter.DynamoDBCatalogSource.Name
				}
				if f1valiter.DynamoDBCatalogSource.Table != nil {
					f1valf21.Table = f1valiter.DynamoDBCatalogSource.Table
				}
				f1val.DynamoDBCatalogSource = f1valf21
			}
			if f1valiter.EvaluateDataQuality != nil {
				f1valf22 := &svcapitypes.EvaluateDataQuality{}
				if f1valiter.EvaluateDataQuality.Inputs != nil {
					f1valf22f0 := []*string{}
					for _, f1valf22f0iter := range f1valiter.EvaluateDataQuality.Inputs {
						var f1valf22f0elem string
						f1valf22f0elem = *f1valf22f0iter
						f1valf22f0 = append(f1valf22f0, &f1valf22f0elem)
					}
					f1valf22.Inputs = f1valf22f0
				}
				if f1valiter.EvaluateDataQuality.Name != nil {
					f1valf22.Name = f1valiter.EvaluateDataQuality.Name
				}
				if f1valiter.EvaluateDataQuality.Output != nil {
					f1valf22.Output = f1valiter.EvaluateDataQuality.Output
				}
				if f1valiter.EvaluateDataQuality.PublishingOptions != nil {
					f1valf22f3 := &svcapitypes.DQResultsPublishingOptions{}
					if f1valiter.EvaluateDataQuality.PublishingOptions.CloudWatchMetricsEnabled != nil {
						f1valf22f3.CloudWatchMetricsEnabled = f1valiter.EvaluateDataQuality.PublishingOptions.CloudWatchMetricsEnabled
					}
					if f1valiter.EvaluateDataQuality.PublishingOptions.EvaluationContext != nil {
						f1valf22f3.EvaluationContext = f1valiter.EvaluateDataQuality.PublishingOptions.EvaluationContext
					}
					if f1valiter.EvaluateDataQuality.PublishingOptions.ResultsPublishingEnabled != nil {
						f1valf22f3.ResultsPublishingEnabled = f1valiter.EvaluateDataQuality.PublishingOptions.ResultsPublishingEnabled
					}
					if f1valiter.EvaluateDataQuality.PublishingOptions.ResultsS3Prefix != nil {
						f1valf22f3.ResultsS3Prefix = f1valiter.EvaluateDataQuality.PublishingOptions.ResultsS3Prefix
					}
					f1valf22.PublishingOptions = f1valf22f3
				}
				if f1valiter.EvaluateDataQuality.Ruleset != nil {
					f1valf22.Ruleset = f1valiter.EvaluateDataQuality.Ruleset
				}
				if f1valiter.EvaluateDataQuality.StopJobOnFailureOptions != nil {
					f1valf22f5 := &svcapitypes.DQStopJobOnFailureOptions{}
					if f1valiter.EvaluateDataQuality.StopJobOnFailureOptions.StopJobOnFailureTiming != nil {
						f1valf22f5.StopJobOnFailureTiming = f1valiter.EvaluateDataQuality.StopJobOnFailureOptions.StopJobOnFailureTiming
					}
					f1valf22.StopJobOnFailureOptions = f1valf22f5
				}
				f1val.EvaluateDataQuality = f1valf22
			}
			if f1valiter.EvaluateDataQualityMultiFrame != nil {
				f1valf23 := &svcapitypes.EvaluateDataQualityMultiFrame{}
				if f1valiter.EvaluateDataQualityMultiFrame.AdditionalDataSources != nil {
					f1valf23f0 := map[string]*string{}
					for f1valf23f0key, f1valf23f0valiter := range f1valiter.EvaluateDataQualityMultiFrame.AdditionalDataSources {
						var f1valf23f0val string
						f1valf23f0val = *f1valf23f0valiter
						f1valf23f0[f1valf23f0key] = &f1valf23f0val
					}
					f1valf23.AdditionalDataSources = f1valf23f0
				}
				if f1valiter.EvaluateDataQualityMultiFrame.AdditionalOptions != nil {
					f1valf23f1 := map[string]*string{}
					for f1valf23f1key, f1valf23f1valiter := range f1valiter.EvaluateDataQualityMultiFrame.AdditionalOptions {
						var f1valf23f1val string
						f1valf23f1val = *f1valf23f1valiter
						f1valf23f1[f1valf23f1key] = &f1valf23f1val
					}
					f1valf23.AdditionalOptions = f1valf23f1
				}
				if f1valiter.EvaluateDataQualityMultiFrame.Inputs != nil {
					f1valf23f2 := []*string{}
					for _, f1valf23f2iter := range f1valiter.EvaluateDataQualityMultiFrame.Inputs {
						var f1valf23f2elem string
						f1valf23f2elem = *f1valf23f2iter
						f1valf23f2 = append(f1valf23f2, &f1valf23f2elem)
					}
					f1valf23.Inputs = f1valf23f2
				}
				if f1valiter.EvaluateDataQualityMultiFrame.Name != nil {
					f1valf23.Name = f1valiter.EvaluateDataQualityMultiFrame.Name
				}
				if f1valiter.EvaluateDataQualityMultiFrame.PublishingOptions != nil {
					f1valf23f4 := &svcapitypes.DQResultsPublishingOptions{}
					if f1valiter.EvaluateDataQualityMultiFrame.PublishingOptions.CloudWatchMetricsEnabled != nil {
						f1valf23f4.CloudWatchMetricsEnabled = f1valiter.EvaluateDataQualityMultiFrame.PublishingOptions.CloudWatchMetricsEnabled
					}
					if f1valiter.EvaluateDataQualityMultiFrame.PublishingOptions.EvaluationContext != nil {
						f1valf23f4.EvaluationContext = f1valiter.EvaluateDataQualityMultiFrame.PublishingOptions.EvaluationContext
					}
					if f1valiter.EvaluateDataQualityMultiFrame.PublishingOptions.ResultsPublishingEnabled != nil {
						f1valf23f4.ResultsPublishingEnabled = f1valiter.EvaluateDataQualityMultiFrame.PublishingOptions.ResultsPublishingEnabled
					}
					if f1valiter.EvaluateDataQualityMultiFrame.PublishingOptions.ResultsS3Prefix != nil {
						f1valf23f4.ResultsS3Prefix = f1valiter.EvaluateDataQualityMultiFrame.PublishingOptions.ResultsS3Prefix
					}
					f1valf23.PublishingOptions = f1valf23f4
				}
				if f1valiter.EvaluateDataQualityMultiFrame.Ruleset != nil {
					f1valf23.Ruleset = f1valiter.EvaluateDataQualityMultiFrame.Ruleset
				}
				if f1valiter.EvaluateDataQualityMultiFrame.StopJobOnFailureOptions != nil {
					f1valf23f6 := &svcapitypes.DQStopJobOnFailureOptions{}
					if f1valiter.EvaluateDataQualityMultiFrame.StopJobOnFailureOptions.StopJobOnFailureTiming != nil {
						f1valf23f6.StopJobOnFailureTiming = f1valiter.EvaluateDataQualityMultiFrame.StopJobOnFailureOptions.StopJobOnFailureTiming
					}
					f1valf23.StopJobOnFailureOptions = f1valf23f6
				}
				f1val.EvaluateDataQualityMultiFrame = f1valf23
			}
			if f1valiter.FillMissingValues != nil {
				f1valf24 := &svcapitypes.FillMissingValues{}
				if f1valiter.FillMissingValues.FilledPath != nil {
					f1valf24.FilledPath = f1valiter.FillMissingValues.FilledPath
				}
				if f1valiter.FillMissingValues.ImputedPath != nil {
					f1valf24.ImputedPath = f1valiter.FillMissingValues.ImputedPath
				}
				if f1valiter.FillMissingValues.Inputs != nil {
					f1valf24f2 := []*string{}
					for _, f1valf24f2iter := range f1valiter.FillMissingValues.Inputs {
						var f1valf24f2elem string
						f1valf24f2elem = *f1valf24f2iter
						f1valf24f2 = append(f1valf24f2, &f1valf24f2elem)
					}
					f1valf24.Inputs = f1valf24f2
				}
				if f1valiter.FillMissingValues.Name != nil {
					f1valf24.Name = f1valiter.FillMissingValues.Name
				}
				f1val.FillMissingValues = f1valf24
			}
			if f1valiter.Filter != nil {
				f1valf25 := &svcapitypes.Filter{}
				if f1valiter.Filter.Filters != nil {
					f1valf25f0 := []*svcapitypes.FilterExpression{}
					for _, f1valf25f0iter := range f1valiter.Filter.Filters {
						f1valf25f0elem := &svcapitypes.FilterExpression{}
						if f1valf25f0iter.Negated != nil {
							f1valf25f0elem.Negated = f1valf25f0iter.Negated
						}
						if f1valf25f0iter.Operation != nil {
							f1valf25f0elem.Operation = f1valf25f0iter.Operation
						}
						if f1valf25f0iter.Values != nil {
							f1valf25f0elemf2 := []*svcapitypes.FilterValue{}
							for _, f1valf25f0elemf2iter := range f1valf25f0iter.Values {
								f1valf25f0elemf2elem := &svcapitypes.FilterValue{}
								if f1valf25f0elemf2iter.Type != nil {
									f1valf25f0elemf2elem.Type = f1valf25f0elemf2iter.Type
								}
								if f1valf25f0elemf2iter.Value != nil {
									f1valf25f0elemf2elemf1 := []*string{}
									for _, f1valf25f0elemf2elemf1iter := range f1valf25f0elemf2iter.Value {
										var f1valf25f0elemf2elemf1elem string
										f1valf25f0elemf2elemf1elem = *f1valf25f0elemf2elemf1iter
										f1valf25f0elemf2elemf1 = append(f1valf25f0elemf2elemf1, &f1valf25f0elemf2elemf1elem)
									}
									f1valf25f0elemf2elem.Value = f1valf25f0elemf2elemf1
								}
								f1valf25f0elemf2 = append(f1valf25f0elemf2, f1valf25f0elemf2elem)
							}
							f1valf25f0elem.Values = f1valf25f0elemf2
						}
						f1valf25f0 = append(f1valf25f0, f1valf25f0elem)
					}
					f1valf25.Filters = f1valf25f0
				}
				if f1valiter.Filter.Inputs != nil {
					f1valf25f1 := []*string{}
					for _, f1valf25f1iter := range f1valiter.Filter.Inputs {
						var f1valf25f1elem string
						f1valf25f1elem = *f1valf25f1iter
						f1valf25f1 = append(f1valf25f1, &f1valf25f1elem)
					}
					f1valf25.Inputs = f1valf25f1
				}
				if f1valiter.Filter.LogicalOperator != nil {
					f1valf25.LogicalOperator = f1valiter.Filter.LogicalOperator
				}
				if f1valiter.Filter.Name != nil {
					f1valf25.Name = f1valiter.Filter.Name
				}
				f1val.Filter = f1valf25
			}
			if f1valiter.GovernedCatalogSource != nil {
				f1valf26 := &svcapitypes.GovernedCatalogSource{}
				if f1valiter.GovernedCatalogSource.AdditionalOptions != nil {
					f1valf26f0 := &svcapitypes.S3SourceAdditionalOptions{}
					if f1valiter.GovernedCatalogSource.AdditionalOptions.BoundedFiles != nil {
						f1valf26f0.BoundedFiles = f1valiter.GovernedCatalogSource.AdditionalOptions.BoundedFiles
					}
					if f1valiter.GovernedCatalogSource.AdditionalOptions.BoundedSize != nil {
						f1valf26f0.BoundedSize = f1valiter.GovernedCatalogSource.AdditionalOptions.BoundedSize
					}
					f1valf26.AdditionalOptions = f1valf26f0
				}
				if f1valiter.GovernedCatalogSource.Database != nil {
					f1valf26.Database = f1valiter.GovernedCatalogSource.Database
				}
				if f1valiter.GovernedCatalogSource.Name != nil {
					f1valf26.Name = f1valiter.GovernedCatalogSource.Name
				}
				if f1valiter.GovernedCatalogSource.PartitionPredicate != nil {
					f1valf26.PartitionPredicate = f1valiter.GovernedCatalogSource.PartitionPredicate
				}
				if f1valiter.GovernedCatalogSource.Table != nil {
					f1valf26.Table = f1valiter.GovernedCatalogSource.Table
				}
				f1val.GovernedCatalogSource = f1valf26
			}
			if f1valiter.GovernedCatalogTarget != nil {
				f1valf27 := &svcapitypes.GovernedCatalogTarget{}
				if f1valiter.GovernedCatalogTarget.Database != nil {
					f1valf27.Database = f1valiter.GovernedCatalogTarget.Database
				}
				if f1valiter.GovernedCatalogTarget.Inputs != nil {
					f1valf27f1 := []*string{}
					for _, f1valf27f1iter := range f1valiter.GovernedCatalogTarget.Inputs {
						var f1valf27f1elem string
						f1valf27f1elem = *f1valf27f1iter
						f1valf27f1 = append(f1valf27f1, &f1valf27f1elem)
					}
					f1valf27.Inputs = f1valf27f1
				}
				if f1valiter.GovernedCatalogTarget.Name != nil {
					f1valf27.Name = f1valiter.GovernedCatalogTarget.Name
				}
				if f1valiter.GovernedCatalogTarget.PartitionKeys != nil {
					f1valf27f3 := [][]*string{}
					for _, f1valf27f3iter := range f1valiter.GovernedCatalogTarget.PartitionKeys {
						f1valf27f3elem := []*string{}
						for _, f1valf27f3elemiter := range f1valf27f3iter {
							var f1valf27f3elemelem string
							f1valf27f3elemelem = *f1valf27f3elemiter
							f1valf27f3elem = append(f1valf27f3elem, &f1valf27f3elemelem)
						}
						f1valf27f3 = append(f1valf27f3, f1valf27f3elem)
					}
					f1valf27.PartitionKeys = f1valf27f3
				}
				if f1valiter.GovernedCatalogTarget.SchemaChangePolicy != nil {
					f1valf27f4 := &svcapitypes.CatalogSchemaChangePolicy{}
					if f1valiter.GovernedCatalogTarget.SchemaChangePolicy.EnableUpdateCatalog != nil {
						f1valf27f4.EnableUpdateCatalog = f1valiter.GovernedCatalogTarget.SchemaChangePolicy.EnableUpdateCatalog
					}
					if f1valiter.GovernedCatalogTarget.SchemaChangePolicy.UpdateBehavior != nil {
						f1valf27f4.UpdateBehavior = f1valiter.GovernedCatalogTarget.SchemaChangePolicy.UpdateBehavior
					}
					f1valf27.SchemaChangePolicy = f1valf27f4
				}
				if f1valiter.GovernedCatalogTarget.Table != nil {
					f1valf27.Table = f1valiter.GovernedCatalogTarget.Table
				}
				f1val.GovernedCatalogTarget = f1valf27
			}
			if f1valiter.JDBCConnectorSource != nil {
				f1valf28 := &svcapitypes.JDBCConnectorSource{}
				if f1valiter.JDBCConnectorSource.AdditionalOptions != nil {
					f1valf28f0 := &svcapitypes.JDBCConnectorOptions{}
					if f1valiter.JDBCConnectorSource.AdditionalOptions.DataTypeMapping != nil {
						f1valf28f0f0 := map[string]*string{}
						for f1valf28f0f0key, f1valf28f0f0valiter := range f1valiter.JDBCConnectorSource.AdditionalOptions.DataTypeMapping {
							var f1valf28f0f0val string
							f1valf28f0f0val = *f1valf28f0f0valiter
							f1valf28f0f0[f1valf28f0f0key] = &f1valf28f0f0val
						}
						f1valf28f0.DataTypeMapping = f1valf28f0f0
					}
					if f1valiter.JDBCConnectorSource.AdditionalOptions.FilterPredicate != nil {
						f1valf28f0.FilterPredicate = f1valiter.JDBCConnectorSource.AdditionalOptions.FilterPredicate
					}
					if f1valiter.JDBCConnectorSource.AdditionalOptions.JobBookmarkKeys != nil {
						f1valf28f0f2 := []*string{}
						for _, f1valf28f0f2iter := range f1valiter.JDBCConnectorSource.AdditionalOptions.JobBookmarkKeys {
							var f1valf28f0f2elem string
							f1valf28f0f2elem = *f1valf28f0f2iter
							f1valf28f0f2 = append(f1valf28f0f2, &f1valf28f0f2elem)
						}
						f1valf28f0.JobBookmarkKeys = f1valf28f0f2
					}
					if f1valiter.JDBCConnectorSource.AdditionalOptions.JobBookmarkKeysSortOrder != nil {
						f1valf28f0.JobBookmarkKeysSortOrder = f1valiter.JDBCConnectorSource.AdditionalOptions.JobBookmarkKeysSortOrder
					}
					if f1valiter.JDBCConnectorSource.AdditionalOptions.LowerBound != nil {
						f1valf28f0.LowerBound = f1valiter.JDBCConnectorSource.AdditionalOptions.LowerBound
					}
					if f1valiter.JDBCConnectorSource.AdditionalOptions.NumPartitions != nil {
						f1valf28f0.NumPartitions = f1valiter.JDBCConnectorSource.AdditionalOptions.NumPartitions
					}
					if f1valiter.JDBCConnectorSource.AdditionalOptions.PartitionColumn != nil {
						f1valf28f0.PartitionColumn = f1valiter.JDBCConnectorSource.AdditionalOptions.PartitionColumn
					}
					if f1valiter.JDBCConnectorSource.AdditionalOptions.UpperBound != nil {
						f1valf28f0.UpperBound = f1valiter.JDBCConnectorSource.AdditionalOptions.UpperBound
					}
					f1valf28.AdditionalOptions = f1valf28f0
				}
				if f1valiter.JDBCConnectorSource.ConnectionName != nil {
					f1valf28.ConnectionName = f1valiter.JDBCConnectorSource.ConnectionName
				}
				if f1valiter.JDBCConnectorSource.ConnectionTable != nil {
					f1valf28.ConnectionTable = f1valiter.JDBCConnectorSource.ConnectionTable
				}
				if f1valiter.JDBCConnectorSource.ConnectionType != nil {
					f1valf28.ConnectionType = f1valiter.JDBCConnectorSource.ConnectionType
				}
				if f1valiter.JDBCConnectorSource.ConnectorName != nil {
					f1valf28.ConnectorName = f1valiter.JDBCConnectorSource.ConnectorName
				}
				if f1valiter.JDBCConnectorSource.Name != nil {
					f1valf28.Name = f1valiter.JDBCConnectorSource.Name
				}
				if f1valiter.JDBCConnectorSource.OutputSchemas != nil {
					f1valf28f6 := []*svcapitypes.GlueSchema{}
					for _, f1valf28f6iter := range f1valiter.JDBCConnectorSource.OutputSchemas {
						f1valf28f6elem := &svcapitypes.GlueSchema{}
						if f1valf28f6iter.Columns != nil {
							f1valf28f6elemf0 := []*svcapitypes.GlueStudioSchemaColumn{}
							for _, f1valf28f6elemf0iter := range f1valf28f6iter.Columns {
								f1valf28f6elemf0elem := &svcapitypes.GlueStudioSchemaColumn{}
								if f1valf28f6elemf0iter.Name != nil {
									f1valf28f6elemf0elem.Name = f1valf28f6elemf0iter.Name
								}
								if f1valf28f6elemf0iter.Type != nil {
									f1valf28f6elemf0elem.Type = f1valf28f6elemf0iter.Type
								}
								f1valf28f6elemf0 = append(f1valf28f6elemf0, f1valf28f6elemf0elem)
							}
							f1valf28f6elem.Columns = f1valf28f6elemf0
						}
						f1valf28f6 = append(f1valf28f6, f1valf28f6elem)
					}
					f1valf28.OutputSchemas = f1valf28f6
				}
				if f1valiter.JDBCConnectorSource.Query != nil {
					f1valf28.Query = f1valiter.JDBCConnectorSource.Query
				}
				f1val.JDBCConnectorSource = f1valf28
			}
			if f1valiter.JDBCConnectorTarget != nil {
				f1valf29 := &svcapitypes.JDBCConnectorTarget{}
				if f1valiter.JDBCConnectorTarget.AdditionalOptions != nil {
					f1valf29f0 := map[string]*string{}
					for f1valf29f0key, f1valf29f0valiter := range f1valiter.JDBCConnectorTarget.AdditionalOptions {
						var f1valf29f0val string
						f1valf29f0val = *f1valf29f0valiter
						f1valf29f0[f1valf29f0key] = &f1valf29f0val
					}
					f1valf29.AdditionalOptions = f1valf29f0
				}
				if f1valiter.JDBCConnectorTarget.ConnectionName != nil {
					f1valf29.ConnectionName = f1valiter.JDBCConnectorTarget.ConnectionName
				}
				if f1valiter.JDBCConnectorTarget.ConnectionTable != nil {
					f1valf29.ConnectionTable = f1valiter.JDBCConnectorTarget.ConnectionTable
				}
				if f1valiter.JDBCConnectorTarget.ConnectionType != nil {
					f1valf29.ConnectionType = f1valiter.JDBCConnectorTarget.ConnectionType
				}
				if f1valiter.JDBCConnectorTarget.ConnectorName != nil {
					f1valf29.ConnectorName = f1valiter.JDBCConnectorTarget.ConnectorName
				}
				if f1valiter.JDBCConnectorTarget.Inputs != nil {
					f1valf29f5 := []*string{}
					for _, f1valf29f5iter := range f1valiter.JDBCConnectorTarget.Inputs {
						var f1valf29f5elem string
						f1valf29f5elem = *f1valf29f5iter
						f1valf29f5 = append(f1valf29f5, &f1valf29f5elem)
					}
					f1valf29.Inputs = f1valf29f5
				}
				if f1valiter.JDBCConnectorTarget.Name != nil {
					f1valf29.Name = f1valiter.JDBCConnectorTarget.Name
				}
				if f1valiter.JDBCConnectorTarget.OutputSchemas != nil {
					f1valf29f7 := []*svcapitypes.GlueSchema{}
					for _, f1valf29f7iter := range f1valiter.JDBCConnectorTarget.OutputSchemas {
						f1valf29f7elem := &svcapitypes.GlueSchema{}
						if f1valf29f7iter.Columns != nil {
							f1valf29f7elemf0 := []*svcapitypes.GlueStudioSchemaColumn{}
							for _, f1valf29f7elemf0iter := range f1valf29f7iter.Columns {
								f1valf29f7elemf0elem := &svcapitypes.GlueStudioSchemaColumn{}
								if f1valf29f7elemf0iter.Name != nil {
									f1valf29f7elemf0elem.Name = f1valf29f7elemf0iter.Name
								}
								if f1valf29f7elemf0iter.Type != nil {
									f1valf29f7elemf0elem.Type = f1valf29f7elemf0iter.Type
								}
								f1valf29f7elemf0 = append(f1valf29f7elemf0, f1valf29f7elemf0elem)
							}
							f1valf29f7elem.Columns = f1valf29f7elemf0
						}
						f1valf29f7 = append(f1valf29f7, f1valf29f7elem)
					}
					f1valf29.OutputSchemas = f1valf29f7
				}
				f1val.JDBCConnectorTarget = f1valf29
			}
			if f1valiter.Join != nil {
				f1valf30 := &svcapitypes.Join{}
				if f1valiter.Join.Columns != nil {
					f1valf30f0 := []*svcapitypes.JoinColumn{}
					for _, f1valf30f0iter := range f1valiter.Join.Columns {
						f1valf30f0elem := &svcapitypes.JoinColumn{}
						if f1valf30f0iter.From != nil {
							f1valf30f0elem.From = f1valf30f0iter.From
						}
						if f1valf30f0iter.Keys != nil {
							f1valf30f0elemf1 := [][]*string{}
							for _, f1valf30f0elemf1iter := range f1valf30f0iter.Keys {
								f1valf30f0elemf1elem := []*string{}
								for _, f1valf30f0elemf1elemiter := range f1valf30f0elemf1iter {
									var f1valf30f0elemf1elemelem string
									f1valf30f0elemf1elemelem = *f1valf30f0elemf1elemiter
									f1valf30f0elemf1elem = append(f1valf30f0elemf1elem, &f1valf30f0elemf1elemelem)
								}
								f1valf30f0elemf1 = append(f1valf30f0elemf1, f1valf30f0elemf1elem)
							}
							f1valf30f0elem.Keys = f1valf30f0elemf1
						}
						f1valf30f0 = append(f1valf30f0, f1valf30f0elem)
					}
					f1valf30.Columns = f1valf30f0
				}
				if f1valiter.Join.Inputs != nil {
					f1valf30f1 := []*string{}
					for _, f1valf30f1iter := range f1valiter.Join.Inputs {
						var f1valf30f1elem string
						f1valf30f1elem = *f1valf30f1iter
						f1valf30f1 = append(f1valf30f1, &f1valf30f1elem)
					}
					f1valf30.Inputs = f1valf30f1
				}
				if f1valiter.Join.JoinType != nil {
					f1valf30.JoinType = f1valiter.Join.JoinType
				}
				if f1valiter.Join.Name != nil {
					f1valf30.Name = f1valiter.Join.Name
				}
				f1val.Join = f1valf30
			}
			if f1valiter.Merge != nil {
				f1valf31 := &svcapitypes.Merge{}
				if f1valiter.Merge.Inputs != nil {
					f1valf31f0 := []*string{}
					for _, f1valf31f0iter := range f1valiter.Merge.Inputs {
						var f1valf31f0elem string
						f1valf31f0elem = *f1valf31f0iter
						f1valf31f0 = append(f1valf31f0, &f1valf31f0elem)
					}
					f1valf31.Inputs = f1valf31f0
				}
				if f1valiter.Merge.Name != nil {
					f1valf31.Name = f1valiter.Merge.Name
				}
				if f1valiter.Merge.PrimaryKeys != nil {
					f1valf31f2 := [][]*string{}
					for _, f1valf31f2iter := range f1valiter.Merge.PrimaryKeys {
						f1valf31f2elem := []*string{}
						for _, f1valf31f2elemiter := range f1valf31f2iter {
							var f1valf31f2elemelem string
							f1valf31f2elemelem = *f1valf31f2elemiter
							f1valf31f2elem = append(f1valf31f2elem, &f1valf31f2elemelem)
						}
						f1valf31f2 = append(f1valf31f2, f1valf31f2elem)
					}
					f1valf31.PrimaryKeys = f1valf31f2
				}
				if f1valiter.Merge.Source != nil {
					f1valf31.Source = f1valiter.Merge.Source
				}
				f1val.Merge = f1valf31
			}
			if f1valiter.MicrosoftSQLServerCatalogSource != nil {
				f1valf32 := &svcapitypes.MicrosoftSQLServerCatalogSource{}
				if f1valiter.MicrosoftSQLServerCatalogSource.Database != nil {
					f1valf32.Database = f1valiter.MicrosoftSQLServerCatalogSource.Database
				}
				if f1valiter.MicrosoftSQLServerCatalogSource.Name != nil {
					f1valf32.Name = f1valiter.MicrosoftSQLServerCatalogSource.Name
				}
				if f1valiter.MicrosoftSQLServerCatalogSource.Table != nil {
					f1valf32.Table = f1valiter.MicrosoftSQLServerCatalogSource.Table
				}
				f1val.MicrosoftSQLServerCatalogSource = f1valf32
			}
			if f1valiter.MicrosoftSQLServerCatalogTarget != nil {
				f1valf33 := &svcapitypes.MicrosoftSQLServerCatalogTarget{}
				if f1valiter.MicrosoftSQLServerCatalogTarget.Database != nil {
					f1valf33.Database = f1valiter.MicrosoftSQLServerCatalogTarget.Database
				}
				if f1valiter.MicrosoftSQLServerCatalogTarget.Inputs != nil {
					f1valf33f1 := []*string{}
					for _, f1valf33f1iter := range f1valiter.MicrosoftSQLServerCatalogTarget.Inputs {
						var f1valf33f1elem string
						f1valf33f1elem = *f1valf33f1iter
						f1valf33f1 = append(f1valf33f1, &f1valf33f1elem)
					}
					f1valf33.Inputs = f1valf33f1
				}
				if f1valiter.MicrosoftSQLServerCatalogTarget.Name != nil {
					f1valf33.Name = f1valiter.MicrosoftSQLServerCatalogTarget.Name
				}
				if f1valiter.MicrosoftSQLServerCatalogTarget.Table != nil {
					f1valf33.Table = f1valiter.MicrosoftSQLServerCatalogTarget.Table
				}
				f1val.MicrosoftSQLServerCatalogTarget = f1valf33
			}
			if f1valiter.MySQLCatalogSource != nil {
				f1valf34 := &svcapitypes.MySQLCatalogSource{}
				if f1valiter.MySQLCatalogSource.Database != nil {
					f1valf34.Database = f1valiter.MySQLCatalogSource.Database
				}
				if f1valiter.MySQLCatalogSource.Name != nil {
					f1valf34.Name = f1valiter.MySQLCatalogSource.Name
				}
				if f1valiter.MySQLCatalogSource.Table != nil {
					f1valf34.Table = f1valiter.MySQLCatalogSource.Table
				}
				f1val.MySQLCatalogSource = f1valf34
			}
			if f1valiter.MySQLCatalogTarget != nil {
				f1valf35 := &svcapitypes.MySQLCatalogTarget{}
				if f1valiter.MySQLCatalogTarget.Database != nil {
					f1valf35.Database = f1valiter.MySQLCatalogTarget.Database
				}
				if f1valiter.MySQLCatalogTarget.Inputs != nil {
					f1valf35f1 := []*string{}
					for _, f1valf35f1iter := range f1valiter.MySQLCatalogTarget.Inputs {
						var f1valf35f1elem string
						f1valf35f1elem = *f1valf35f1iter
						f1valf35f1 = append(f1valf35f1, &f1valf35f1elem)
					}
					f1valf35.Inputs = f1valf35f1
				}
				if f1valiter.MySQLCatalogTarget.Name != nil {
					f1valf35.Name = f1valiter.MySQLCatalogTarget.Name
				}
				if f1valiter.MySQLCatalogTarget.Table != nil {
					f1valf35.Table = f1valiter.MySQLCatalogTarget.Table
				}
				f1val.MySQLCatalogTarget = f1valf35
			}
			if f1valiter.OracleSQLCatalogSource != nil {
				f1valf36 := &svcapitypes.OracleSQLCatalogSource{}
				if f1valiter.OracleSQLCatalogSource.Database != nil {
					f1valf36.Database = f1valiter.OracleSQLCatalogSource.Database
				}
				if f1valiter.OracleSQLCatalogSource.Name != nil {
					f1valf36.Name = f1valiter.OracleSQLCatalogSource.Name
				}
				if f1valiter.OracleSQLCatalogSource.Table != nil {
					f1valf36.Table = f1valiter.OracleSQLCatalogSource.Table
				}
				f1val.OracleSQLCatalogSource = f1valf36
			}
			if f1valiter.OracleSQLCatalogTarget != nil {
				f1valf37 := &svcapitypes.OracleSQLCatalogTarget{}
				if f1valiter.OracleSQLCatalogTarget.Database != nil {
					f1valf37.Database = f1valiter.OracleSQLCatalogTarget.Database
				}
				if f1valiter.OracleSQLCatalogTarget.Inputs != nil {
					f1valf37f1 := []*string{}
					for _, f1valf37f1iter := range f1valiter.OracleSQLCatalogTarget.Inputs {
						var f1valf37f1elem string
						f1valf37f1elem = *f1valf37f1iter
						f1valf37f1 = append(f1valf37f1, &f1valf37f1elem)
					}
					f1valf37.Inputs = f1valf37f1
				}
				if f1valiter.OracleSQLCatalogTarget.Name != nil {
					f1valf37.Name = f1valiter.OracleSQLCatalogTarget.Name
				}
				if f1valiter.OracleSQLCatalogTarget.Table != nil {
					f1valf37.Table = f1valiter.OracleSQLCatalogTarget.Table
				}
				f1val.OracleSQLCatalogTarget = f1valf37
			}
			if f1valiter.PIIDetection != nil {
				f1valf38 := &svcapitypes.PIIDetection{}
				if f1valiter.PIIDetection.EntityTypesToDetect != nil {
					f1valf38f0 := []*string{}
					for _, f1valf38f0iter := range f1valiter.PIIDetection.EntityTypesToDetect {
						var f1valf38f0elem string
						f1valf38f0elem = *f1valf38f0iter
						f1valf38f0 = append(f1valf38f0, &f1valf38f0elem)
					}
					f1valf38.EntityTypesToDetect = f1valf38f0
				}
				if f1valiter.PIIDetection.Inputs != nil {
					f1valf38f1 := []*string{}
					for _, f1valf38f1iter := range f1valiter.PIIDetection.Inputs {
						var f1valf38f1elem string
						f1valf38f1elem = *f1valf38f1iter
						f1valf38f1 = append(f1valf38f1, &f1valf38f1elem)
					}
					f1valf38.Inputs = f1valf38f1
				}
				if f1valiter.PIIDetection.MaskValue != nil {
					f1valf38.MaskValue = f1valiter.PIIDetection.MaskValue
				}
				if f1valiter.PIIDetection.Name != nil {
					f1valf38.Name = f1valiter.PIIDetection.Name
				}
				if f1valiter.PIIDetection.OutputColumnName != nil {
					f1valf38.OutputColumnName = f1valiter.PIIDetection.OutputColumnName
				}
				if f1valiter.PIIDetection.PiiType != nil {
					f1valf38.PiiType = f1valiter.PIIDetection.PiiType
				}
				if f1valiter.PIIDetection.SampleFraction != nil {
					f1valf38.SampleFraction = f1valiter.PIIDetection.SampleFraction
				}
				if f1valiter.PIIDetection.ThresholdFraction != nil {
					f1valf38.ThresholdFraction = f1valiter.PIIDetection.ThresholdFraction
				}
				f1val.PIIDetection = f1valf38
			}
			if f1valiter.PostgreSQLCatalogSource != nil {
				f1valf39 := &svcapitypes.PostgreSQLCatalogSource{}
				if f1valiter.PostgreSQLCatalogSource.Database != nil {
					f1valf39.Database = f1valiter.PostgreSQLCatalogSource.Database
				}
				if f1valiter.PostgreSQLCatalogSource.Name != nil {
					f1valf39.Name = f1valiter.PostgreSQLCatalogSource.Name
				}
				if f1valiter.PostgreSQLCatalogSource.Table != nil {
					f1valf39.Table = f1valiter.PostgreSQLCatalogSource.Table
				}
				f1val.PostgreSQLCatalogSource = f1valf39
			}
			if f1valiter.PostgreSQLCatalogTarget != nil {
				f1valf40 := &svcapitypes.PostgreSQLCatalogTarget{}
				if f1valiter.PostgreSQLCatalogTarget.Database != nil {
					f1valf40.Database = f1valiter.PostgreSQLCatalogTarget.Database
				}
				if f1valiter.PostgreSQLCatalogTarget.Inputs != nil {
					f1valf40f1 := []*string{}
					for _, f1valf40f1iter := range f1valiter.PostgreSQLCatalogTarget.Inputs {
						var f1valf40f1elem string
						f1valf40f1elem = *f1valf40f1iter
						f1valf40f1 = append(f1valf40f1, &f1valf40f1elem)
					}
					f1valf40.Inputs = f1valf40f1
				}
				if f1valiter.PostgreSQLCatalogTarget.Name != nil {
					f1valf40.Name = f1valiter.PostgreSQLCatalogTarget.Name
				}
				if f1valiter.PostgreSQLCatalogTarget.Table != nil {
					f1valf40.Table = f1valiter.PostgreSQLCatalogTarget.Table
				}
				f1val.PostgreSQLCatalogTarget = f1valf40
			}
			if f1valiter.Recipe != nil {
				f1valf41 := &svcapitypes.Recipe{}
				if f1valiter.Recipe.Inputs != nil {
					f1valf41f0 := []*string{}
					for _, f1valf41f0iter := range f1valiter.Recipe.Inputs {
						var f1valf41f0elem string
						f1valf41f0elem = *f1valf41f0iter
						f1valf41f0 = append(f1valf41f0, &f1valf41f0elem)
					}
					f1valf41.Inputs = f1valf41f0
				}
				if f1valiter.Recipe.Name != nil {
					f1valf41.Name = f1valiter.Recipe.Name
				}
				if f1valiter.Recipe.RecipeReference != nil {
					f1valf41f2 := &svcapitypes.RecipeReference{}
					if f1valiter.Recipe.RecipeReference.RecipeArn != nil {
						f1valf41f2.RecipeARN = f1valiter.Recipe.RecipeReference.RecipeArn
					}
					if f1valiter.Recipe.RecipeReference.RecipeVersion != nil {
						f1valf41f2.RecipeVersion = f1valiter.Recipe.RecipeReference.RecipeVersion
					}
					f1valf41.RecipeReference = f1valf41f2
				}
				f1val.Recipe = f1valf41
			}
			if f1valiter.RedshiftSource != nil {
				f1valf42 := &svcapitypes.RedshiftSource{}
				if f1valiter.RedshiftSource.Database != nil {
					f1valf42.Database = f1valiter.RedshiftSource.Database
				}
				if f1valiter.RedshiftSource.Name != nil {
					f1valf42.Name = f1valiter.RedshiftSource.Name
				}
				if f1valiter.RedshiftSource.RedshiftTmpDir != nil {
					f1valf42.RedshiftTmpDir = f1valiter.RedshiftSource.RedshiftTmpDir
				}
				if f1valiter.RedshiftSource.Table != nil {
					f1valf42.Table = f1valiter.RedshiftSource.Table
				}
				if f1valiter.RedshiftSource.TmpDirIAMRole != nil {
					f1valf42.TmpDirIAMRole = f1valiter.RedshiftSource.TmpDirIAMRole
				}
				f1val.RedshiftSource = f1valf42
			}
			if f1valiter.RedshiftTarget != nil {
				f1valf43 := &svcapitypes.RedshiftTarget{}
				if f1valiter.RedshiftTarget.Database != nil {
					f1valf43.Database = f1valiter.RedshiftTarget.Database
				}
				if f1valiter.RedshiftTarget.Inputs != nil {
					f1valf43f1 := []*string{}
					for _, f1valf43f1iter := range f1valiter.RedshiftTarget.Inputs {
						var f1valf43f1elem string
						f1valf43f1elem = *f1valf43f1iter
						f1valf43f1 = append(f1valf43f1, &f1valf43f1elem)
					}
					f1valf43.Inputs = f1valf43f1
				}
				if f1valiter.RedshiftTarget.Name != nil {
					f1valf43.Name = f1valiter.RedshiftTarget.Name
				}
				if f1valiter.RedshiftTarget.RedshiftTmpDir != nil {
					f1valf43.RedshiftTmpDir = f1valiter.RedshiftTarget.RedshiftTmpDir
				}
				if f1valiter.RedshiftTarget.Table != nil {
					f1valf43.Table = f1valiter.RedshiftTarget.Table
				}
				if f1valiter.RedshiftTarget.TmpDirIAMRole != nil {
					f1valf43.TmpDirIAMRole = f1valiter.RedshiftTarget.TmpDirIAMRole
				}
				if f1valiter.RedshiftTarget.UpsertRedshiftOptions != nil {
					f1valf43f6 := &svcapitypes.UpsertRedshiftTargetOptions{}
					if f1valiter.RedshiftTarget.UpsertRedshiftOptions.ConnectionName != nil {
						f1valf43f6.ConnectionName = f1valiter.RedshiftTarget.UpsertRedshiftOptions.ConnectionName
					}
					if f1valiter.RedshiftTarget.UpsertRedshiftOptions.TableLocation != nil {
						f1valf43f6.TableLocation = f1valiter.RedshiftTarget.UpsertRedshiftOptions.TableLocation
					}
					if f1valiter.RedshiftTarget.UpsertRedshiftOptions.UpsertKeys != nil {
						f1valf43f6f2 := []*string{}
						for _, f1valf43f6f2iter := range f1valiter.RedshiftTarget.UpsertRedshiftOptions.UpsertKeys {
							var f1valf43f6f2elem string
							f1valf43f6f2elem = *f1valf43f6f2iter
							f1valf43f6f2 = append(f1valf43f6f2, &f1valf43f6f2elem)
						}
						f1valf43f6.UpsertKeys = f1valf43f6f2
					}
					f1valf43.UpsertRedshiftOptions = f1valf43f6
				}
				f1val.RedshiftTarget = f1valf43
			}
			if f1valiter.RelationalCatalogSource != nil {
				f1valf44 := &svcapitypes.RelationalCatalogSource{}
				if f1valiter.RelationalCatalogSource.Database != nil {
					f1valf44.Database = f1valiter.RelationalCatalogSource.Database
				}
				if f1valiter.RelationalCatalogSource.Name != nil {
					f1valf44.Name = f1valiter.RelationalCatalogSource.Name
				}
				if f1valiter.RelationalCatalogSource.Table != nil {
					f1valf44.Table = f1valiter.RelationalCatalogSource.Table
				}
				f1val.RelationalCatalogSource = f1valf44
			}
			if f1valiter.RenameField != nil {
				f1valf45 := &svcapitypes.RenameField{}
				if f1valiter.RenameField.Inputs != nil {
					f1valf45f0 := []*string{}
					for _, f1valf45f0iter := range f1valiter.RenameField.Inputs {
						var f1valf45f0elem string
						f1valf45f0elem = *f1valf45f0iter
						f1valf45f0 = append(f1valf45f0, &f1valf45f0elem)
					}
					f1valf45.Inputs = f1valf45f0
				}
				if f1valiter.RenameField.Name != nil {
					f1valf45.Name = f1valiter.RenameField.Name
				}
				if f1valiter.RenameField.SourcePath != nil {
					f1valf45f2 := []*string{}
					for _, f1valf45f2iter := range f1valiter.RenameField.SourcePath {
						var f1valf45f2elem string
						f1valf45f2elem = *f1valf45f2iter
						f1valf45f2 = append(f1valf45f2, &f1valf45f2elem)
					}
					f1valf45.SourcePath = f1valf45f2
				}
				if f1valiter.RenameField.TargetPath != nil {
					f1valf45f3 := []*string{}
					for _, f1valf45f3iter := range f1valiter.RenameField.TargetPath {
						var f1valf45f3elem string
						f1valf45f3elem = *f1valf45f3iter
						f1valf45f3 = append(f1valf45f3, &f1valf45f3elem)
					}
					f1valf45.TargetPath = f1valf45f3
				}
				f1val.RenameField = f1valf45
			}
			if f1valiter.S3CatalogDeltaSource != nil {
				f1valf46 := &svcapitypes.S3CatalogDeltaSource{}
				if f1valiter.S3CatalogDeltaSource.AdditionalDeltaOptions != nil {
					f1valf46f0 := map[string]*string{}
					for f1valf46f0key, f1valf46f0valiter := range f1valiter.S3CatalogDeltaSource.AdditionalDeltaOptions {
						var f1valf46f0val string
						f1valf46f0val = *f1valf46f0valiter
						f1valf46f0[f1valf46f0key] = &f1valf46f0val
					}
					f1valf46.AdditionalDeltaOptions = f1valf46f0
				}
				if f1valiter.S3CatalogDeltaSource.Database != nil {
					f1valf46.Database = f1valiter.S3CatalogDeltaSource.Database
				}
				if f1valiter.S3CatalogDeltaSource.Name != nil {
					f1valf46.Name = f1valiter.S3CatalogDeltaSource.Name
				}
				if f1valiter.S3CatalogDeltaSource.OutputSchemas != nil {
					f1valf46f3 := []*svcapitypes.GlueSchema{}
					for _, f1valf46f3iter := range f1valiter.S3CatalogDeltaSource.OutputSchemas {
						f1valf46f3elem := &svcapitypes.GlueSchema{}
						if f1valf46f3iter.Columns != nil {
							f1valf46f3elemf0 := []*svcapitypes.GlueStudioSchemaColumn{}
							for _, f1valf46f3elemf0iter := range f1valf46f3iter.Columns {
								f1valf46f3elemf0elem := &svcapitypes.GlueStudioSchemaColumn{}
								if f1valf46f3elemf0iter.Name != nil {
									f1valf46f3elemf0elem.Name = f1valf46f3elemf0iter.Name
								}
								if f1valf46f3elemf0iter.Type != nil {
									f1valf46f3elemf0elem.Type = f1valf46f3elemf0iter.Type
								}
								f1valf46f3elemf0 = append(f1valf46f3elemf0, f1valf46f3elemf0elem)
							}
							f1valf46f3elem.Columns = f1valf46f3elemf0
						}
						f1valf46f3 = append(f1valf46f3, f1valf46f3elem)
					}
					f1valf46.OutputSchemas = f1valf46f3
				}
				if f1valiter.S3CatalogDeltaSource.Table != nil {
					f1valf46.Table = f1valiter.S3CatalogDeltaSource.Table
				}
				f1val.S3CatalogDeltaSource = f1valf46
			}
			if f1valiter.S3CatalogHudiSource != nil {
				f1valf47 := &svcapitypes.S3CatalogHudiSource{}
				if f1valiter.S3CatalogHudiSource.AdditionalHudiOptions != nil {
					f1valf47f0 := map[string]*string{}
					for f1valf47f0key, f1valf47f0valiter := range f1valiter.S3CatalogHudiSource.AdditionalHudiOptions {
						var f1valf47f0val string
						f1valf47f0val = *f1valf47f0valiter
						f1valf47f0[f1valf47f0key] = &f1valf47f0val
					}
					f1valf47.AdditionalHudiOptions = f1valf47f0
				}
				if f1valiter.S3CatalogHudiSource.Database != nil {
					f1valf47.Database = f1valiter.S3CatalogHudiSource.Database
				}
				if f1valiter.S3CatalogHudiSource.Name != nil {
					f1valf47.Name = f1valiter.S3CatalogHudiSource.Name
				}
				if f1valiter.S3CatalogHudiSource.OutputSchemas != nil {
					f1valf47f3 := []*svcapitypes.GlueSchema{}
					for _, f1valf47f3iter := range f1valiter.S3CatalogHudiSource.OutputSchemas {
						f1valf47f3elem := &svcapitypes.GlueSchema{}
						if f1valf47f3iter.Columns != nil {
							f1valf47f3elemf0 := []*svcapitypes.GlueStudioSchemaColumn{}
							for _, f1valf47f3elemf0iter := range f1valf47f3iter.Columns {
								f1valf47f3elemf0elem := &svcapitypes.GlueStudioSchemaColumn{}
								if f1valf47f3elemf0iter.Name != nil {
									f1valf47f3elemf0elem.Name = f1valf47f3elemf0iter.Name
								}
								if f1valf47f3elemf0iter.Type != nil {
									f1valf47f3elemf0elem.Type = f1valf47f3elemf0iter.Type
								}
								f1valf47f3elemf0 = append(f1valf47f3elemf0, f1valf47f3elemf0elem)
							}
							f1valf47f3elem.Columns = f1valf47f3elemf0
						}
						f1valf47f3 = append(f1valf47f3, f1valf47f3elem)
					}
					f1valf47.OutputSchemas = f1valf47f3
				}
				if f1valiter.S3CatalogHudiSource.Table != nil {
					f1valf47.Table = f1valiter.S3CatalogHudiSource.Table
				}
				f1val.S3CatalogHudiSource = f1valf47
			}
			if f1valiter.S3CatalogSource != nil {
				f1valf48 := &svcapitypes.S3CatalogSource{}
				if f1valiter.S3CatalogSource.AdditionalOptions != nil {
					f1valf48f0 := &svcapitypes.S3SourceAdditionalOptions{}
					if f1valiter.S3CatalogSource.AdditionalOptions.BoundedFiles != nil {
						f1valf48f0.BoundedFiles = f1valiter.S3CatalogSource.AdditionalOptions.BoundedFiles
					}
					if f1valiter.S3CatalogSource.AdditionalOptions.BoundedSize != nil {
						f1valf48f0.BoundedSize = f1valiter.S3CatalogSource.AdditionalOptions.BoundedSize
					}
					f1valf48.AdditionalOptions = f1valf48f0
				}
				if f1valiter.S3CatalogSource.Database != nil {
					f1valf48.Database = f1valiter.S3CatalogSource.Database
				}
				if f1valiter.S3CatalogSource.Name != nil {
					f1valf48.Name = f1valiter.S3CatalogSource.Name
				}
				if f1valiter.S3CatalogSource.PartitionPredicate != nil {
					f1valf48.PartitionPredicate = f1valiter.S3CatalogSource.PartitionPredicate
				}
				if f1valiter.S3CatalogSource.Table != nil {
					f1valf48.Table = f1valiter.S3CatalogSource.Table
				}
				f1val.S3CatalogSource = f1valf48
			}
			if f1valiter.S3CatalogTarget != nil {
				f1valf49 := &svcapitypes.S3CatalogTarget{}
				if f1valiter.S3CatalogTarget.Database != nil {
					f1valf49.Database = f1valiter.S3CatalogTarget.Database
				}
				if f1valiter.S3CatalogTarget.Inputs != nil {
					f1valf49f1 := []*string{}
					for _, f1valf49f1iter := range f1valiter.S3CatalogTarget.Inputs {
						var f1valf49f1elem string
						f1valf49f1elem = *f1valf49f1iter
						f1valf49f1 = append(f1valf49f1, &f1valf49f1elem)
					}
					f1valf49.Inputs = f1valf49f1
				}
				if f1valiter.S3CatalogTarget.Name != nil {
					f1valf49.Name = f1valiter.S3CatalogTarget.Name
				}
				if f1valiter.S3CatalogTarget.PartitionKeys != nil {
					f1valf49f3 := [][]*string{}
					for _, f1valf49f3iter := range f1valiter.S3CatalogTarget.PartitionKeys {
						f1valf49f3elem := []*string{}
						for _, f1valf49f3elemiter := range f1valf49f3iter {
							var f1valf49f3elemelem string
							f1valf49f3elemelem = *f1valf49f3elemiter
							f1valf49f3elem = append(f1valf49f3elem, &f1valf49f3elemelem)
						}
						f1valf49f3 = append(f1valf49f3, f1valf49f3elem)
					}
					f1valf49.PartitionKeys = f1valf49f3
				}
				if f1valiter.S3CatalogTarget.SchemaChangePolicy != nil {
					f1valf49f4 := &svcapitypes.CatalogSchemaChangePolicy{}
					if f1valiter.S3CatalogTarget.SchemaChangePolicy.EnableUpdateCatalog != nil {
						f1valf49f4.EnableUpdateCatalog = f1valiter.S3CatalogTarget.SchemaChangePolicy.EnableUpdateCatalog
					}
					if f1valiter.S3CatalogTarget.SchemaChangePolicy.UpdateBehavior != nil {
						f1valf49f4.UpdateBehavior = f1valiter.S3CatalogTarget.SchemaChangePolicy.UpdateBehavior
					}
					f1valf49.SchemaChangePolicy = f1valf49f4
				}
				if f1valiter.S3CatalogTarget.Table != nil {
					f1valf49.Table = f1valiter.S3CatalogTarget.Table
				}
				f1val.S3CatalogTarget = f1valf49
			}
			if f1valiter.S3CsvSource != nil {
				f1valf50 := &svcapitypes.S3CsvSource{}
				if f1valiter.S3CsvSource.AdditionalOptions != nil {
					f1valf50f0 := &svcapitypes.S3DirectSourceAdditionalOptions{}
					if f1valiter.S3CsvSource.AdditionalOptions.BoundedFiles != nil {
						f1valf50f0.BoundedFiles = f1valiter.S3CsvSource.AdditionalOptions.BoundedFiles
					}
					if f1valiter.S3CsvSource.AdditionalOptions.BoundedSize != nil {
						f1valf50f0.BoundedSize = f1valiter.S3CsvSource.AdditionalOptions.BoundedSize
					}
					if f1valiter.S3CsvSource.AdditionalOptions.EnableSamplePath != nil {
						f1valf50f0.EnableSamplePath = f1valiter.S3CsvSource.AdditionalOptions.EnableSamplePath
					}
					if f1valiter.S3CsvSource.AdditionalOptions.SamplePath != nil {
						f1valf50f0.SamplePath = f1valiter.S3CsvSource.AdditionalOptions.SamplePath
					}
					f1valf50.AdditionalOptions = f1valf50f0
				}
				if f1valiter.S3CsvSource.CompressionType != nil {
					f1valf50.CompressionType = f1valiter.S3CsvSource.CompressionType
				}
				if f1valiter.S3CsvSource.Escaper != nil {
					f1valf50.Escaper = f1valiter.S3CsvSource.Escaper
				}
				if f1valiter.S3CsvSource.Exclusions != nil {
					f1valf50f3 := []*string{}
					for _, f1valf50f3iter := range f1valiter.S3CsvSource.Exclusions {
						var f1valf50f3elem string
						f1valf50f3elem = *f1valf50f3iter
						f1valf50f3 = append(f1valf50f3, &f1valf50f3elem)
					}
					f1valf50.Exclusions = f1valf50f3
				}
				if f1valiter.S3CsvSource.GroupFiles != nil {
					f1valf50.GroupFiles = f1valiter.S3CsvSource.GroupFiles
				}
				if f1valiter.S3CsvSource.GroupSize != nil {
					f1valf50.GroupSize = f1valiter.S3CsvSource.GroupSize
				}
				if f1valiter.S3CsvSource.MaxBand != nil {
					f1valf50.MaxBand = f1valiter.S3CsvSource.MaxBand
				}
				if f1valiter.S3CsvSource.MaxFilesInBand != nil {
					f1valf50.MaxFilesInBand = f1valiter.S3CsvSource.MaxFilesInBand
				}
				if f1valiter.S3CsvSource.Multiline != nil {
					f1valf50.Multiline = f1valiter.S3CsvSource.Multiline
				}
				if f1valiter.S3CsvSource.Name != nil {
					f1valf50.Name = f1valiter.S3CsvSource.Name
				}
				if f1valiter.S3CsvSource.OptimizePerformance != nil {
					f1valf50.OptimizePerformance = f1valiter.S3CsvSource.OptimizePerformance
				}
				if f1valiter.S3CsvSource.OutputSchemas != nil {
					f1valf50f11 := []*svcapitypes.GlueSchema{}
					for _, f1valf50f11iter := range f1valiter.S3CsvSource.OutputSchemas {
						f1valf50f11elem := &svcapitypes.GlueSchema{}
						if f1valf50f11iter.Columns != nil {
							f1valf50f11elemf0 := []*svcapitypes.GlueStudioSchemaColumn{}
							for _, f1valf50f11elemf0iter := range f1valf50f11iter.Columns {
								f1valf50f11elemf0elem := &svcapitypes.GlueStudioSchemaColumn{}
								if f1valf50f11elemf0iter.Name != nil {
									f1valf50f11elemf0elem.Name = f1valf50f11elemf0iter.Name
								}
								if f1valf50f11elemf0iter.Type != nil {
									f1valf50f11elemf0elem.Type = f1valf50f11elemf0iter.Type
								}
								f1valf50f11elemf0 = append(f1valf50f11elemf0, f1valf50f11elemf0elem)
							}
							f1valf50f11elem.Columns = f1valf50f11elemf0
						}
						f1valf50f11 = append(f1valf50f11, f1valf50f11elem)
					}
					f1valf50.OutputSchemas = f1valf50f11
				}
				if f1valiter.S3CsvSource.Paths != nil {
					f1valf50f12 := []*string{}
					for _, f1valf50f12iter := range f1valiter.S3CsvSource.Paths {
						var f1valf50f12elem string
						f1valf50f12elem = *f1valf50f12iter
						f1valf50f12 = append(f1valf50f12, &f1valf50f12elem)
					}
					f1valf50.Paths = f1valf50f12
				}
				if f1valiter.S3CsvSource.QuoteChar != nil {
					f1valf50.QuoteChar = f1valiter.S3CsvSource.QuoteChar
				}
				if f1valiter.S3CsvSource.Recurse != nil {
					f1valf50.Recurse = f1valiter.S3CsvSource.Recurse
				}
				if f1valiter.S3CsvSource.Separator != nil {
					f1valf50.Separator = f1valiter.S3CsvSource.Separator
				}
				if f1valiter.S3CsvSource.SkipFirst != nil {
					f1valf50.SkipFirst = f1valiter.S3CsvSource.SkipFirst
				}
				if f1valiter.S3CsvSource.WithHeader != nil {
					f1valf50.WithHeader = f1valiter.S3CsvSource.WithHeader
				}
				if f1valiter.S3CsvSource.WriteHeader != nil {
					f1valf50.WriteHeader = f1valiter.S3CsvSource.WriteHeader
				}
				f1val.S3CsvSource = f1valf50
			}
			if f1valiter.S3DeltaCatalogTarget != nil {
				f1valf51 := &svcapitypes.S3DeltaCatalogTarget{}
				if f1valiter.S3DeltaCatalogTarget.AdditionalOptions != nil {
					f1valf51f0 := map[string]*string{}
					for f1valf51f0key, f1valf51f0valiter := range f1valiter.S3DeltaCatalogTarget.AdditionalOptions {
						var f1valf51f0val string
						f1valf51f0val = *f1valf51f0valiter
						f1valf51f0[f1valf51f0key] = &f1valf51f0val
					}
					f1valf51.AdditionalOptions = f1valf51f0
				}
				if f1valiter.S3DeltaCatalogTarget.Database != nil {
					f1valf51.Database = f1valiter.S3DeltaCatalogTarget.Database
				}
				if f1valiter.S3DeltaCatalogTarget.Inputs != nil {
					f1valf51f2 := []*string{}
					for _, f1valf51f2iter := range f1valiter.S3DeltaCatalogTarget.Inputs {
						var f1valf51f2elem string
						f1valf51f2elem = *f1valf51f2iter
						f1valf51f2 = append(f1valf51f2, &f1valf51f2elem)
					}
					f1valf51.Inputs = f1valf51f2
				}
				if f1valiter.S3DeltaCatalogTarget.Name != nil {
					f1valf51.Name = f1valiter.S3DeltaCatalogTarget.Name
				}
				if f1valiter.S3DeltaCatalogTarget.PartitionKeys != nil {
					f1valf51f4 := [][]*string{}
					for _, f1valf51f4iter := range f1valiter.S3DeltaCatalogTarget.PartitionKeys {
						f1valf51f4elem := []*string{}
						for _, f1valf51f4elemiter := range f1valf51f4iter {
							var f1valf51f4elemelem string
							f1valf51f4elemelem = *f1valf51f4elemiter
							f1valf51f4elem = append(f1valf51f4elem, &f1valf51f4elemelem)
						}
						f1valf51f4 = append(f1valf51f4, f1valf51f4elem)
					}
					f1valf51.PartitionKeys = f1valf51f4
				}
				if f1valiter.S3DeltaCatalogTarget.SchemaChangePolicy != nil {
					f1valf51f5 := &svcapitypes.CatalogSchemaChangePolicy{}
					if f1valiter.S3DeltaCatalogTarget.SchemaChangePolicy.EnableUpdateCatalog != nil {
						f1valf51f5.EnableUpdateCatalog = f1valiter.S3DeltaCatalogTarget.SchemaChangePolicy.EnableUpdateCatalog
					}
					if f1valiter.S3DeltaCatalogTarget.SchemaChangePolicy.UpdateBehavior != nil {
						f1valf51f5.UpdateBehavior = f1valiter.S3DeltaCatalogTarget.SchemaChangePolicy.UpdateBehavior
					}
					f1valf51.SchemaChangePolicy = f1valf51f5
				}
				if f1valiter.S3DeltaCatalogTarget.Table != nil {
					f1valf51.Table = f1valiter.S3DeltaCatalogTarget.Table
				}
				f1val.S3DeltaCatalogTarget = f1valf51
			}
			if f1valiter.S3DeltaDirectTarget != nil {
				f1valf52 := &svcapitypes.S3DeltaDirectTarget{}
				if f1valiter.S3DeltaDirectTarget.AdditionalOptions != nil {
					f1valf52f0 := map[string]*string{}
					for f1valf52f0key, f1valf52f0valiter := range f1valiter.S3DeltaDirectTarget.AdditionalOptions {
						var f1valf52f0val string
						f1valf52f0val = *f1valf52f0valiter
						f1valf52f0[f1valf52f0key] = &f1valf52f0val
					}
					f1valf52.AdditionalOptions = f1valf52f0
				}
				if f1valiter.S3DeltaDirectTarget.Compression != nil {
					f1valf52.Compression = f1valiter.S3DeltaDirectTarget.Compression
				}
				if f1valiter.S3DeltaDirectTarget.Format != nil {
					f1valf52.Format = f1valiter.S3DeltaDirectTarget.Format
				}
				if f1valiter.S3DeltaDirectTarget.Inputs != nil {
					f1valf52f3 := []*string{}
					for _, f1valf52f3iter := range f1valiter.S3DeltaDirectTarget.Inputs {
						var f1valf52f3elem string
						f1valf52f3elem = *f1valf52f3iter
						f1valf52f3 = append(f1valf52f3, &f1valf52f3elem)
					}
					f1valf52.Inputs = f1valf52f3
				}
				if f1valiter.S3DeltaDirectTarget.Name != nil {
					f1valf52.Name = f1valiter.S3DeltaDirectTarget.Name
				}
				if f1valiter.S3DeltaDirectTarget.PartitionKeys != nil {
					f1valf52f5 := [][]*string{}
					for _, f1valf52f5iter := range f1valiter.S3DeltaDirectTarget.PartitionKeys {
						f1valf52f5elem := []*string{}
						for _, f1valf52f5elemiter := range f1valf52f5iter {
							var f1valf52f5elemelem string
							f1valf52f5elemelem = *f1valf52f5elemiter
							f1valf52f5elem = append(f1valf52f5elem, &f1valf52f5elemelem)
						}
						f1valf52f5 = append(f1valf52f5, f1valf52f5elem)
					}
					f1valf52.PartitionKeys = f1valf52f5
				}
				if f1valiter.S3DeltaDirectTarget.Path != nil {
					f1valf52.Path = f1valiter.S3DeltaDirectTarget.Path
				}
				if f1valiter.S3DeltaDirectTarget.SchemaChangePolicy != nil {
					f1valf52f7 := &svcapitypes.DirectSchemaChangePolicy{}
					if f1valiter.S3DeltaDirectTarget.SchemaChangePolicy.Database != nil {
						f1valf52f7.Database = f1valiter.S3DeltaDirectTarget.SchemaChangePolicy.Database
					}
					if f1valiter.S3DeltaDirectTarget.SchemaChangePolicy.EnableUpdateCatalog != nil {
						f1valf52f7.EnableUpdateCatalog = f1valiter.S3DeltaDirectTarget.SchemaChangePolicy.EnableUpdateCatalog
					}
					if f1valiter.S3DeltaDirectTarget.SchemaChangePolicy.Table != nil {
						f1valf52f7.Table = f1valiter.S3DeltaDirectTarget.SchemaChangePolicy.Table
					}
					if f1valiter.S3DeltaDirectTarget.SchemaChangePolicy.UpdateBehavior != nil {
						f1valf52f7.UpdateBehavior = f1valiter.S3DeltaDirectTarget.SchemaChangePolicy.UpdateBehavior
					}
					f1valf52.SchemaChangePolicy = f1valf52f7
				}
				f1val.S3DeltaDirectTarget = f1valf52
			}
			if f1valiter.S3DeltaSource != nil {
				f1valf53 := &svcapitypes.S3DeltaSource{}
				if f1valiter.S3DeltaSource.AdditionalDeltaOptions != nil {
					f1valf53f0 := map[string]*string{}
					for f1valf53f0key, f1valf53f0valiter := range f1valiter.S3DeltaSource.AdditionalDeltaOptions {
						var f1valf53f0val string
						f1valf53f0val = *f1valf53f0valiter
						f1valf53f0[f1valf53f0key] = &f1valf53f0val
					}
					f1valf53.AdditionalDeltaOptions = f1valf53f0
				}
				if f1valiter.S3DeltaSource.AdditionalOptions != nil {
					f1valf53f1 := &svcapitypes.S3DirectSourceAdditionalOptions{}
					if f1valiter.S3DeltaSource.AdditionalOptions.BoundedFiles != nil {
						f1valf53f1.BoundedFiles = f1valiter.S3DeltaSource.AdditionalOptions.BoundedFiles
					}
					if f1valiter.S3DeltaSource.AdditionalOptions.BoundedSize != nil {
						f1valf53f1.BoundedSize = f1valiter.S3DeltaSource.AdditionalOptions.BoundedSize
					}
					if f1valiter.S3DeltaSource.AdditionalOptions.EnableSamplePath != nil {
						f1valf53f1.EnableSamplePath = f1valiter.S3DeltaSource.AdditionalOptions.EnableSamplePath
					}
					if f1valiter.S3DeltaSource.AdditionalOptions.SamplePath != nil {
						f1valf53f1.SamplePath = f1valiter.S3DeltaSource.AdditionalOptions.SamplePath
					}
					f1valf53.AdditionalOptions = f1valf53f1
				}
				if f1valiter.S3DeltaSource.Name != nil {
					f1valf53.Name = f1valiter.S3DeltaSource.Name
				}
				if f1valiter.S3DeltaSource.OutputSchemas != nil {
					f1valf53f3 := []*svcapitypes.GlueSchema{}
					for _, f1valf53f3iter := range f1valiter.S3DeltaSource.OutputSchemas {
						f1valf53f3elem := &svcapitypes.GlueSchema{}
						if f1valf53f3iter.Columns != nil {
							f1valf53f3elemf0 := []*svcapitypes.GlueStudioSchemaColumn{}
							for _, f1valf53f3elemf0iter := range f1valf53f3iter.Columns {
								f1valf53f3elemf0elem := &svcapitypes.GlueStudioSchemaColumn{}
								if f1valf53f3elemf0iter.Name != nil {
									f1valf53f3elemf0elem.Name = f1valf53f3elemf0iter.Name
								}
								if f1valf53f3elemf0iter.Type != nil {
									f1valf53f3elemf0elem.Type = f1valf53f3elemf0iter.Type
								}
								f1valf53f3elemf0 = append(f1valf53f3elemf0, f1valf53f3elemf0elem)
							}
							f1valf53f3elem.Columns = f1valf53f3elemf0
						}
						f1valf53f3 = append(f1valf53f3, f1valf53f3elem)
					}
					f1valf53.OutputSchemas = f1valf53f3
				}
				if f1valiter.S3DeltaSource.Paths != nil {
					f1valf53f4 := []*string{}
					for _, f1valf53f4iter := range f1valiter.S3DeltaSource.Paths {
						var f1valf53f4elem string
						f1valf53f4elem = *f1valf53f4iter
						f1valf53f4 = append(f1valf53f4, &f1valf53f4elem)
					}
					f1valf53.Paths = f1valf53f4
				}
				f1val.S3DeltaSource = f1valf53
			}
			if f1valiter.S3DirectTarget != nil {
				f1valf54 := &svcapitypes.S3DirectTarget{}
				if f1valiter.S3DirectTarget.Compression != nil {
					f1valf54.Compression = f1valiter.S3DirectTarget.Compression
				}
				if f1valiter.S3DirectTarget.Format != nil {
					f1valf54.Format = f1valiter.S3DirectTarget.Format
				}
				if f1valiter.S3DirectTarget.Inputs != nil {
					f1valf54f2 := []*string{}
					for _, f1valf54f2iter := range f1valiter.S3DirectTarget.Inputs {
						var f1valf54f2elem string
						f1valf54f2elem = *f1valf54f2iter
						f1valf54f2 = append(f1valf54f2, &f1valf54f2elem)
					}
					f1valf54.Inputs = f1valf54f2
				}
				if f1valiter.S3DirectTarget.Name != nil {
					f1valf54.Name = f1valiter.S3DirectTarget.Name
				}
				if f1valiter.S3DirectTarget.PartitionKeys != nil {
					f1valf54f4 := [][]*string{}
					for _, f1valf54f4iter := range f1valiter.S3DirectTarget.PartitionKeys {
						f1valf54f4elem := []*string{}
						for _, f1valf54f4elemiter := range f1valf54f4iter {
							var f1valf54f4elemelem string
							f1valf54f4elemelem = *f1valf54f4elemiter
							f1valf54f4elem = append(f1valf54f4elem, &f1valf54f4elemelem)
						}
						f1valf54f4 = append(f1valf54f4, f1valf54f4elem)
					}
					f1valf54.PartitionKeys = f1valf54f4
				}
				if f1valiter.S3DirectTarget.Path != nil {
					f1valf54.Path = f1valiter.S3DirectTarget.Path
				}
				if f1valiter.S3DirectTarget.SchemaChangePolicy != nil {
					f1valf54f6 := &svcapitypes.DirectSchemaChangePolicy{}
					if f1valiter.S3DirectTarget.SchemaChangePolicy.Database != nil {
						f1valf54f6.Database = f1valiter.S3DirectTarget.SchemaChangePolicy.Database
					}
					if f1valiter.S3DirectTarget.SchemaChangePolicy.EnableUpdateCatalog != nil {
						f1valf54f6.EnableUpdateCatalog = f1valiter.S3DirectTarget.SchemaChangePolicy.EnableUpdateCatalog
					}
					if f1valiter.S3DirectTarget.SchemaChangePolicy.Table != nil {
						f1valf54f6.Table = f1valiter.S3DirectTarget.SchemaChangePolicy.Table
					}
					if f1valiter.S3DirectTarget.SchemaChangePolicy.UpdateBehavior != nil {
						f1valf54f6.UpdateBehavior = f1valiter.S3DirectTarget.SchemaChangePolicy.UpdateBehavior
					}
					f1valf54.SchemaChangePolicy = f1valf54f6
				}
				f1val.S3DirectTarget = f1valf54
			}
			if f1valiter.S3GlueParquetTarget != nil {
				f1valf55 := &svcapitypes.S3GlueParquetTarget{}
				if f1valiter.S3GlueParquetTarget.Compression != nil {
					f1valf55.Compression = f1valiter.S3GlueParquetTarget.Compression
				}
				if f1valiter.S3GlueParquetTarget.Inputs != nil {
					f1valf55f1 := []*string{}
					for _, f1valf55f1iter := range f1valiter.S3GlueParquetTarget.Inputs {
						var f1valf55f1elem string
						f1valf55f1elem = *f1valf55f1iter
						f1valf55f1 = append(f1valf55f1, &f1valf55f1elem)
					}
					f1valf55.Inputs = f1valf55f1
				}
				if f1valiter.S3GlueParquetTarget.Name != nil {
					f1valf55.Name = f1valiter.S3GlueParquetTarget.Name
				}
				if f1valiter.S3GlueParquetTarget.PartitionKeys != nil {
					f1valf55f3 := [][]*string{}
					for _, f1valf55f3iter := range f1valiter.S3GlueParquetTarget.PartitionKeys {
						f1valf55f3elem := []*string{}
						for _, f1valf55f3elemiter := range f1valf55f3iter {
							var f1valf55f3elemelem string
							f1valf55f3elemelem = *f1valf55f3elemiter
							f1valf55f3elem = append(f1valf55f3elem, &f1valf55f3elemelem)
						}
						f1valf55f3 = append(f1valf55f3, f1valf55f3elem)
					}
					f1valf55.PartitionKeys = f1valf55f3
				}
				if f1valiter.S3GlueParquetTarget.Path != nil {
					f1valf55.Path = f1valiter.S3GlueParquetTarget.Path
				}
				if f1valiter.S3GlueParquetTarget.SchemaChangePolicy != nil {
					f1valf55f5 := &svcapitypes.DirectSchemaChangePolicy{}
					if f1valiter.S3GlueParquetTarget.SchemaChangePolicy.Database != nil {
						f1valf55f5.Database = f1valiter.S3GlueParquetTarget.SchemaChangePolicy.Database
					}
					if f1valiter.S3GlueParquetTarget.SchemaChangePolicy.EnableUpdateCatalog != nil {
						f1valf55f5.EnableUpdateCatalog = f1valiter.S3GlueParquetTarget.SchemaChangePolicy.EnableUpdateCatalog
					}
					if f1valiter.S3GlueParquetTarget.SchemaChangePolicy.Table != nil {
						f1valf55f5.Table = f1valiter.S3GlueParquetTarget.SchemaChangePolicy.Table
					}
					if f1valiter.S3GlueParquetTarget.SchemaChangePolicy.UpdateBehavior != nil {
						f1valf55f5.UpdateBehavior = f1valiter.S3GlueParquetTarget.SchemaChangePolicy.UpdateBehavior
					}
					f1valf55.SchemaChangePolicy = f1valf55f5
				}
				f1val.S3GlueParquetTarget = f1valf55
			}
			if f1valiter.S3HudiCatalogTarget != nil {
				f1valf56 := &svcapitypes.S3HudiCatalogTarget{}
				if f1valiter.S3HudiCatalogTarget.AdditionalOptions != nil {
					f1valf56f0 := map[string]*string{}
					for f1valf56f0key, f1valf56f0valiter := range f1valiter.S3HudiCatalogTarget.AdditionalOptions {
						var f1valf56f0val string
						f1valf56f0val = *f1valf56f0valiter
						f1valf56f0[f1valf56f0key] = &f1valf56f0val
					}
					f1valf56.AdditionalOptions = f1valf56f0
				}
				if f1valiter.S3HudiCatalogTarget.Database != nil {
					f1valf56.Database = f1valiter.S3HudiCatalogTarget.Database
				}
				if f1valiter.S3HudiCatalogTarget.Inputs != nil {
					f1valf56f2 := []*string{}
					for _, f1valf56f2iter := range f1valiter.S3HudiCatalogTarget.Inputs {
						var f1valf56f2elem string
						f1valf56f2elem = *f1valf56f2iter
						f1valf56f2 = append(f1valf56f2, &f1valf56f2elem)
					}
					f1valf56.Inputs = f1valf56f2
				}
				if f1valiter.S3HudiCatalogTarget.Name != nil {
					f1valf56.Name = f1valiter.S3HudiCatalogTarget.Name
				}
				if f1valiter.S3HudiCatalogTarget.PartitionKeys != nil {
					f1valf56f4 := [][]*string{}
					for _, f1valf56f4iter := range f1valiter.S3HudiCatalogTarget.PartitionKeys {
						f1valf56f4elem := []*string{}
						for _, f1valf56f4elemiter := range f1valf56f4iter {
							var f1valf56f4elemelem string
							f1valf56f4elemelem = *f1valf56f4elemiter
							f1valf56f4elem = append(f1valf56f4elem, &f1valf56f4elemelem)
						}
						f1valf56f4 = append(f1valf56f4, f1valf56f4elem)
					}
					f1valf56.PartitionKeys = f1valf56f4
				}
				if f1valiter.S3HudiCatalogTarget.SchemaChangePolicy != nil {
					f1valf56f5 := &svcapitypes.CatalogSchemaChangePolicy{}
					if f1valiter.S3HudiCatalogTarget.SchemaChangePolicy.EnableUpdateCatalog != nil {
						f1valf56f5.EnableUpdateCatalog = f1valiter.S3HudiCatalogTarget.SchemaChangePolicy.EnableUpdateCatalog
					}
					if f1valiter.S3HudiCatalogTarget.SchemaChangePolicy.UpdateBehavior != nil {
						f1valf56f5.UpdateBehavior = f1valiter.S3HudiCatalogTarget.SchemaChangePolicy.UpdateBehavior
					}
					f1valf56.SchemaChangePolicy = f1valf56f5
				}
				if f1valiter.S3HudiCatalogTarget.Table != nil {
					f1valf56.Table = f1valiter.S3HudiCatalogTarget.Table
				}
				f1val.S3HudiCatalogTarget = f1valf56
			}
			if f1valiter.S3HudiDirectTarget != nil {
				f1valf57 := &svcapitypes.S3HudiDirectTarget{}
				if f1valiter.S3HudiDirectTarget.AdditionalOptions != nil {
					f1valf57f0 := map[string]*string{}
					for f1valf57f0key, f1valf57f0valiter := range f1valiter.S3HudiDirectTarget.AdditionalOptions {
						var f1valf57f0val string
						f1valf57f0val = *f1valf57f0valiter
						f1valf57f0[f1valf57f0key] = &f1valf57f0val
					}
					f1valf57.AdditionalOptions = f1valf57f0
				}
				if f1valiter.S3HudiDirectTarget.Compression != nil {
					f1valf57.Compression = f1valiter.S3HudiDirectTarget.Compression
				}
				if f1valiter.S3HudiDirectTarget.Format != nil {
					f1valf57.Format = f1valiter.S3HudiDirectTarget.Format
				}
				if f1valiter.S3HudiDirectTarget.Inputs != nil {
					f1valf57f3 := []*string{}
					for _, f1valf57f3iter := range f1valiter.S3HudiDirectTarget.Inputs {
						var f1valf57f3elem string
						f1valf57f3elem = *f1valf57f3iter
						f1valf57f3 = append(f1valf57f3, &f1valf57f3elem)
					}
					f1valf57.Inputs = f1valf57f3
				}
				if f1valiter.S3HudiDirectTarget.Name != nil {
					f1valf57.Name = f1valiter.S3HudiDirectTarget.Name
				}
				if f1valiter.S3HudiDirectTarget.PartitionKeys != nil {
					f1valf57f5 := [][]*string{}
					for _, f1valf57f5iter := range f1valiter.S3HudiDirectTarget.PartitionKeys {
						f1valf57f5elem := []*string{}
						for _, f1valf57f5elemiter := range f1valf57f5iter {
							var f1valf57f5elemelem string
							f1valf57f5elemelem = *f1valf57f5elemiter
							f1valf57f5elem = append(f1valf57f5elem, &f1valf57f5elemelem)
						}
						f1valf57f5 = append(f1valf57f5, f1valf57f5elem)
					}
					f1valf57.PartitionKeys = f1valf57f5
				}
				if f1valiter.S3HudiDirectTarget.Path != nil {
					f1valf57.Path = f1valiter.S3HudiDirectTarget.Path
				}
				if f1valiter.S3HudiDirectTarget.SchemaChangePolicy != nil {
					f1valf57f7 := &svcapitypes.DirectSchemaChangePolicy{}
					if f1valiter.S3HudiDirectTarget.SchemaChangePolicy.Database != nil {
						f1valf57f7.Database = f1valiter.S3HudiDirectTarget.SchemaChangePolicy.Database
					}
					if f1valiter.S3HudiDirectTarget.SchemaChangePolicy.EnableUpdateCatalog != nil {
						f1valf57f7.EnableUpdateCatalog = f1valiter.S3HudiDirectTarget.SchemaChangePolicy.EnableUpdateCatalog
					}
					if f1valiter.S3HudiDirectTarget.SchemaChangePolicy.Table != nil {
						f1valf57f7.Table = f1valiter.S3HudiDirectTarget.SchemaChangePolicy.Table
					}
					if f1valiter.S3HudiDirectTarget.SchemaChangePolicy.UpdateBehavior != nil {
						f1valf57f7.UpdateBehavior = f1valiter.S3HudiDirectTarget.SchemaChangePolicy.UpdateBehavior
					}
					f1valf57.SchemaChangePolicy = f1valf57f7
				}
				f1val.S3HudiDirectTarget = f1valf57
			}
			if f1valiter.S3HudiSource != nil {
				f1valf58 := &svcapitypes.S3HudiSource{}
				if f1valiter.S3HudiSource.AdditionalHudiOptions != nil {
					f1valf58f0 := map[string]*string{}
					for f1valf58f0key, f1valf58f0valiter := range f1valiter.S3HudiSource.AdditionalHudiOptions {
						var f1valf58f0val string
						f1valf58f0val = *f1valf58f0valiter
						f1valf58f0[f1valf58f0key] = &f1valf58f0val
					}
					f1valf58.AdditionalHudiOptions = f1valf58f0
				}
				if f1valiter.S3HudiSource.AdditionalOptions != nil {
					f1valf58f1 := &svcapitypes.S3DirectSourceAdditionalOptions{}
					if f1valiter.S3HudiSource.AdditionalOptions.BoundedFiles != nil {
						f1valf58f1.BoundedFiles = f1valiter.S3HudiSource.AdditionalOptions.BoundedFiles
					}
					if f1valiter.S3HudiSource.AdditionalOptions.BoundedSize != nil {
						f1valf58f1.BoundedSize = f1valiter.S3HudiSource.AdditionalOptions.BoundedSize
					}
					if f1valiter.S3HudiSource.AdditionalOptions.EnableSamplePath != nil {
						f1valf58f1.EnableSamplePath = f1valiter.S3HudiSource.AdditionalOptions.EnableSamplePath
					}
					if f1valiter.S3HudiSource.AdditionalOptions.SamplePath != nil {
						f1valf58f1.SamplePath = f1valiter.S3HudiSource.AdditionalOptions.SamplePath
					}
					f1valf58.AdditionalOptions = f1valf58f1
				}
				if f1valiter.S3HudiSource.Name != nil {
					f1valf58.Name = f1valiter.S3HudiSource.Name
				}
				if f1valiter.S3HudiSource.OutputSchemas != nil {
					f1valf58f3 := []*svcapitypes.GlueSchema{}
					for _, f1valf58f3iter := range f1valiter.S3HudiSource.OutputSchemas {
						f1valf58f3elem := &svcapitypes.GlueSchema{}
						if f1valf58f3iter.Columns != nil {
							f1valf58f3elemf0 := []*svcapitypes.GlueStudioSchemaColumn{}
							for _, f1valf58f3elemf0iter := range f1valf58f3iter.Columns {
								f1valf58f3elemf0elem := &svcapitypes.GlueStudioSchemaColumn{}
								if f1valf58f3elemf0iter.Name != nil {
									f1valf58f3elemf0elem.Name = f1valf58f3elemf0iter.Name
								}
								if f1valf58f3elemf0iter.Type != nil {
									f1valf58f3elemf0elem.Type = f1valf58f3elemf0iter.Type
								}
								f1valf58f3elemf0 = append(f1valf58f3elemf0, f1valf58f3elemf0elem)
							}
							f1valf58f3elem.Columns = f1valf58f3elemf0
						}
						f1valf58f3 = append(f1valf58f3, f1valf58f3elem)
					}
					f1valf58.OutputSchemas = f1valf58f3
				}
				if f1valiter.S3HudiSource.Paths != nil {
					f1valf58f4 := []*string{}
					for _, f1valf58f4iter := range f1valiter.S3HudiSource.Paths {
						var f1valf58f4elem string
						f1valf58f4elem = *f1valf58f4iter
						f1valf58f4 = append(f1valf58f4, &f1valf58f4elem)
					}
					f1valf58.Paths = f1valf58f4
				}
				f1val.S3HudiSource = f1valf58
			}
			if f1valiter.S3JsonSource != nil {
				f1valf59 := &svcapitypes.S3JSONSource{}
				if f1valiter.S3JsonSource.AdditionalOptions != nil {
					f1valf59f0 := &svcapitypes.S3DirectSourceAdditionalOptions{}
					if f1valiter.S3JsonSource.AdditionalOptions.BoundedFiles != nil {
						f1valf59f0.BoundedFiles = f1valiter.S3JsonSource.AdditionalOptions.BoundedFiles
					}
					if f1valiter.S3JsonSource.AdditionalOptions.BoundedSize != nil {
						f1valf59f0.BoundedSize = f1valiter.S3JsonSource.AdditionalOptions.BoundedSize
					}
					if f1valiter.S3JsonSource.AdditionalOptions.EnableSamplePath != nil {
						f1valf59f0.EnableSamplePath = f1valiter.S3JsonSource.AdditionalOptions.EnableSamplePath
					}
					if f1valiter.S3JsonSource.AdditionalOptions.SamplePath != nil {
						f1valf59f0.SamplePath = f1valiter.S3JsonSource.AdditionalOptions.SamplePath
					}
					f1valf59.AdditionalOptions = f1valf59f0
				}
				if f1valiter.S3JsonSource.CompressionType != nil {
					f1valf59.CompressionType = f1valiter.S3JsonSource.CompressionType
				}
				if f1valiter.S3JsonSource.Exclusions != nil {
					f1valf59f2 := []*string{}
					for _, f1valf59f2iter := range f1valiter.S3JsonSource.Exclusions {
						var f1valf59f2elem string
						f1valf59f2elem = *f1valf59f2iter
						f1valf59f2 = append(f1valf59f2, &f1valf59f2elem)
					}
					f1valf59.Exclusions = f1valf59f2
				}
				if f1valiter.S3JsonSource.GroupFiles != nil {
					f1valf59.GroupFiles = f1valiter.S3JsonSource.GroupFiles
				}
				if f1valiter.S3JsonSource.GroupSize != nil {
					f1valf59.GroupSize = f1valiter.S3JsonSource.GroupSize
				}
				if f1valiter.S3JsonSource.JsonPath != nil {
					f1valf59.JSONPath = f1valiter.S3JsonSource.JsonPath
				}
				if f1valiter.S3JsonSource.MaxBand != nil {
					f1valf59.MaxBand = f1valiter.S3JsonSource.MaxBand
				}
				if f1valiter.S3JsonSource.MaxFilesInBand != nil {
					f1valf59.MaxFilesInBand = f1valiter.S3JsonSource.MaxFilesInBand
				}
				if f1valiter.S3JsonSource.Multiline != nil {
					f1valf59.Multiline = f1valiter.S3JsonSource.Multiline
				}
				if f1valiter.S3JsonSource.Name != nil {
					f1valf59.Name = f1valiter.S3JsonSource.Name
				}
				if f1valiter.S3JsonSource.OutputSchemas != nil {
					f1valf59f10 := []*svcapitypes.GlueSchema{}
					for _, f1valf59f10iter := range f1valiter.S3JsonSource.OutputSchemas {
						f1valf59f10elem := &svcapitypes.GlueSchema{}
						if f1valf59f10iter.Columns != nil {
							f1valf59f10elemf0 := []*svcapitypes.GlueStudioSchemaColumn{}
							for _, f1valf59f10elemf0iter := range f1valf59f10iter.Columns {
								f1valf59f10elemf0elem := &svcapitypes.GlueStudioSchemaColumn{}
								if f1valf59f10elemf0iter.Name != nil {
									f1valf59f10elemf0elem.Name = f1valf59f10elemf0iter.Name
								}
								if f1valf59f10elemf0iter.Type != nil {
									f1valf59f10elemf0elem.Type = f1valf59f10elemf0iter.Type
								}
								f1valf59f10elemf0 = append(f1valf59f10elemf0, f1valf59f10elemf0elem)
							}
							f1valf59f10elem.Columns = f1valf59f10elemf0
						}
						f1valf59f10 = append(f1valf59f10, f1valf59f10elem)
					}
					f1valf59.OutputSchemas = f1valf59f10
				}
				if f1valiter.S3JsonSource.Paths != nil {
					f1valf59f11 := []*string{}
					for _, f1valf59f11iter := range f1valiter.S3JsonSource.Paths {
						var f1valf59f11elem string
						f1valf59f11elem = *f1valf59f11iter
						f1valf59f11 = append(f1valf59f11, &f1valf59f11elem)
					}
					f1valf59.Paths = f1valf59f11
				}
				if f1valiter.S3JsonSource.Recurse != nil {
					f1valf59.Recurse = f1valiter.S3JsonSource.Recurse
				}
				f1val.S3JSONSource = f1valf59
			}
			if f1valiter.S3ParquetSource != nil {
				f1valf60 := &svcapitypes.S3ParquetSource{}
				if f1valiter.S3ParquetSource.AdditionalOptions != nil {
					f1valf60f0 := &svcapitypes.S3DirectSourceAdditionalOptions{}
					if f1valiter.S3ParquetSource.AdditionalOptions.BoundedFiles != nil {
						f1valf60f0.BoundedFiles = f1valiter.S3ParquetSource.AdditionalOptions.BoundedFiles
					}
					if f1valiter.S3ParquetSource.AdditionalOptions.BoundedSize != nil {
						f1valf60f0.BoundedSize = f1valiter.S3ParquetSource.AdditionalOptions.BoundedSize
					}
					if f1valiter.S3ParquetSource.AdditionalOptions.EnableSamplePath != nil {
						f1valf60f0.EnableSamplePath = f1valiter.S3ParquetSource.AdditionalOptions.EnableSamplePath
					}
					if f1valiter.S3ParquetSource.AdditionalOptions.SamplePath != nil {
						f1valf60f0.SamplePath = f1valiter.S3ParquetSource.AdditionalOptions.SamplePath
					}
					f1valf60.AdditionalOptions = f1valf60f0
				}
				if f1valiter.S3ParquetSource.CompressionType != nil {
					f1valf60.CompressionType = f1valiter.S3ParquetSource.CompressionType
				}
				if f1valiter.S3ParquetSource.Exclusions != nil {
					f1valf60f2 := []*string{}
					for _, f1valf60f2iter := range f1valiter.S3ParquetSource.Exclusions {
						var f1valf60f2elem string
						f1valf60f2elem = *f1valf60f2iter
						f1valf60f2 = append(f1valf60f2, &f1valf60f2elem)
					}
					f1valf60.Exclusions = f1valf60f2
				}
				if f1valiter.S3ParquetSource.GroupFiles != nil {
					f1valf60.GroupFiles = f1valiter.S3ParquetSource.GroupFiles
				}
				if f1valiter.S3ParquetSource.GroupSize != nil {
					f1valf60.GroupSize = f1valiter.S3ParquetSource.GroupSize
				}
				if f1valiter.S3ParquetSource.MaxBand != nil {
					f1valf60.MaxBand = f1valiter.S3ParquetSource.MaxBand
				}
				if f1valiter.S3ParquetSource.MaxFilesInBand != nil {
					f1valf60.MaxFilesInBand = f1valiter.S3ParquetSource.MaxFilesInBand
				}
				if f1valiter.S3ParquetSource.Name != nil {
					f1valf60.Name = f1valiter.S3ParquetSource.Name
				}
				if f1valiter.S3ParquetSource.OutputSchemas != nil {
					f1valf60f8 := []*svcapitypes.GlueSchema{}
					for _, f1valf60f8iter := range f1valiter.S3ParquetSource.OutputSchemas {
						f1valf60f8elem := &svcapitypes.GlueSchema{}
						if f1valf60f8iter.Columns != nil {
							f1valf60f8elemf0 := []*svcapitypes.GlueStudioSchemaColumn{}
							for _, f1valf60f8elemf0iter := range f1valf60f8iter.Columns {
								f1valf60f8elemf0elem := &svcapitypes.GlueStudioSchemaColumn{}
								if f1valf60f8elemf0iter.Name != nil {
									f1valf60f8elemf0elem.Name = f1valf60f8elemf0iter.Name
								}
								if f1valf60f8elemf0iter.Type != nil {
									f1valf60f8elemf0elem.Type = f1valf60f8elemf0iter.Type
								}
								f1valf60f8elemf0 = append(f1valf60f8elemf0, f1valf60f8elemf0elem)
							}
							f1valf60f8elem.Columns = f1valf60f8elemf0
						}
						f1valf60f8 = append(f1valf60f8, f1valf60f8elem)
					}
					f1valf60.OutputSchemas = f1valf60f8
				}
				if f1valiter.S3ParquetSource.Paths != nil {
					f1valf60f9 := []*string{}
					for _, f1valf60f9iter := range f1valiter.S3ParquetSource.Paths {
						var f1valf60f9elem string
						f1valf60f9elem = *f1valf60f9iter
						f1valf60f9 = append(f1valf60f9, &f1valf60f9elem)
					}
					f1valf60.Paths = f1valf60f9
				}
				if f1valiter.S3ParquetSource.Recurse != nil {
					f1valf60.Recurse = f1valiter.S3ParquetSource.Recurse
				}
				f1val.S3ParquetSource = f1valf60
			}
			if f1valiter.SelectFields != nil {
				f1valf61 := &svcapitypes.SelectFields{}
				if f1valiter.SelectFields.Inputs != nil {
					f1valf61f0 := []*string{}
					for _, f1valf61f0iter := range f1valiter.SelectFields.Inputs {
						var f1valf61f0elem string
						f1valf61f0elem = *f1valf61f0iter
						f1valf61f0 = append(f1valf61f0, &f1valf61f0elem)
					}
					f1valf61.Inputs = f1valf61f0
				}
				if f1valiter.SelectFields.Name != nil {
					f1valf61.Name = f1valiter.SelectFields.Name
				}
				if f1valiter.SelectFields.Paths != nil {
					f1valf61f2 := [][]*string{}
					for _, f1valf61f2iter := range f1valiter.SelectFields.Paths {
						f1valf61f2elem := []*string{}
						for _, f1valf61f2elemiter := range f1valf61f2iter {
							var f1valf61f2elemelem string
							f1valf61f2elemelem = *f1valf61f2elemiter
							f1valf61f2elem = append(f1valf61f2elem, &f1valf61f2elemelem)
						}
						f1valf61f2 = append(f1valf61f2, f1valf61f2elem)
					}
					f1valf61.Paths = f1valf61f2
				}
				f1val.SelectFields = f1valf61
			}
			if f1valiter.SelectFromCollection != nil {
				f1valf62 := &svcapitypes.SelectFromCollection{}
				if f1valiter.SelectFromCollection.Index != nil {
					f1valf62.Index = f1valiter.SelectFromCollection.Index
				}
				if f1valiter.SelectFromCollection.Inputs != nil {
					f1valf62f1 := []*string{}
					for _, f1valf62f1iter := range f1valiter.SelectFromCollection.Inputs {
						var f1valf62f1elem string
						f1valf62f1elem = *f1valf62f1iter
						f1valf62f1 = append(f1valf62f1, &f1valf62f1elem)
					}
					f1valf62.Inputs = f1valf62f1
				}
				if f1valiter.SelectFromCollection.Name != nil {
					f1valf62.Name = f1valiter.SelectFromCollection.Name
				}
				f1val.SelectFromCollection = f1valf62
			}
			if f1valiter.SnowflakeSource != nil {
				f1valf63 := &svcapitypes.SnowflakeSource{}
				if f1valiter.SnowflakeSource.Data != nil {
					f1valf63f0 := &svcapitypes.SnowflakeNodeData{}
					if f1valiter.SnowflakeSource.Data.Action != nil {
						f1valf63f0.Action = f1valiter.SnowflakeSource.Data.Action
					}
					if f1valiter.SnowflakeSource.Data.AdditionalOptions != nil {
						f1valf63f0f1 := map[string]*string{}
						for f1valf63f0f1key, f1valf63f0f1valiter := range f1valiter.SnowflakeSource.Data.AdditionalOptions {
							var f1valf63f0f1val string
							f1valf63f0f1val = *f1valf63f0f1valiter
							f1valf63f0f1[f1valf63f0f1key] = &f1valf63f0f1val
						}
						f1valf63f0.AdditionalOptions = f1valf63f0f1
					}
					if f1valiter.SnowflakeSource.Data.AutoPushdown != nil {
						f1valf63f0.AutoPushdown = f1valiter.SnowflakeSource.Data.AutoPushdown
					}
					if f1valiter.SnowflakeSource.Data.Connection != nil {
						f1valf63f0f3 := &svcapitypes.Option{}
						if f1valiter.SnowflakeSource.Data.Connection.Description != nil {
							f1valf63f0f3.Description = f1valiter.SnowflakeSource.Data.Connection.Description
						}
						if f1valiter.SnowflakeSource.Data.Connection.Label != nil {
							f1valf63f0f3.Label = f1valiter.SnowflakeSource.Data.Connection.Label
						}
						if f1valiter.SnowflakeSource.Data.Connection.Value != nil {
							f1valf63f0f3.Value = f1valiter.SnowflakeSource.Data.Connection.Value
						}
						f1valf63f0.Connection = f1valf63f0f3
					}
					if f1valiter.SnowflakeSource.Data.Database != nil {
						f1valf63f0.Database = f1valiter.SnowflakeSource.Data.Database
					}
					if f1valiter.SnowflakeSource.Data.IamRole != nil {
						f1valf63f0f5 := &svcapitypes.Option{}
						if f1valiter.SnowflakeSource.Data.IamRole.Description != nil {
							f1valf63f0f5.Description = f1valiter.SnowflakeSource.Data.IamRole.Description
						}
						if f1valiter.SnowflakeSource.Data.IamRole.Label != nil {
							f1valf63f0f5.Label = f1valiter.SnowflakeSource.Data.IamRole.Label
						}
						if f1valiter.SnowflakeSource.Data.IamRole.Value != nil {
							f1valf63f0f5.Value = f1valiter.SnowflakeSource.Data.IamRole.Value
						}
						f1valf63f0.IAMRole = f1valf63f0f5
					}
					if f1valiter.SnowflakeSource.Data.MergeAction != nil {
						f1valf63f0.MergeAction = f1valiter.SnowflakeSource.Data.MergeAction
					}
					if f1valiter.SnowflakeSource.Data.MergeClause != nil {
						f1valf63f0.MergeClause = f1valiter.SnowflakeSource.Data.MergeClause
					}
					if f1valiter.SnowflakeSource.Data.MergeWhenMatched != nil {
						f1valf63f0.MergeWhenMatched = f1valiter.SnowflakeSource.Data.MergeWhenMatched
					}
					if f1valiter.SnowflakeSource.Data.MergeWhenNotMatched != nil {
						f1valf63f0.MergeWhenNotMatched = f1valiter.SnowflakeSource.Data.MergeWhenNotMatched
					}
					if f1valiter.SnowflakeSource.Data.PostAction != nil {
						f1valf63f0.PostAction = f1valiter.SnowflakeSource.Data.PostAction
					}
					if f1valiter.SnowflakeSource.Data.PreAction != nil {
						f1valf63f0.PreAction = f1valiter.SnowflakeSource.Data.PreAction
					}
					if f1valiter.SnowflakeSource.Data.SampleQuery != nil {
						f1valf63f0.SampleQuery = f1valiter.SnowflakeSource.Data.SampleQuery
					}
					if f1valiter.SnowflakeSource.Data.Schema != nil {
						f1valf63f0.Schema = f1valiter.SnowflakeSource.Data.Schema
					}
					if f1valiter.SnowflakeSource.Data.SelectedColumns != nil {
						f1valf63f0f14 := []*svcapitypes.Option{}
						for _, f1valf63f0f14iter := range f1valiter.SnowflakeSource.Data.SelectedColumns {
							f1valf63f0f14elem := &svcapitypes.Option{}
							if f1valf63f0f14iter.Description != nil {
								f1valf63f0f14elem.Description = f1valf63f0f14iter.Description
							}
							if f1valf63f0f14iter.Label != nil {
								f1valf63f0f14elem.Label = f1valf63f0f14iter.Label
							}
							if f1valf63f0f14iter.Value != nil {
								f1valf63f0f14elem.Value = f1valf63f0f14iter.Value
							}
							f1valf63f0f14 = append(f1valf63f0f14, f1valf63f0f14elem)
						}
						f1valf63f0.SelectedColumns = f1valf63f0f14
					}
					if f1valiter.SnowflakeSource.Data.SourceType != nil {
						f1valf63f0.SourceType = f1valiter.SnowflakeSource.Data.SourceType
					}
					if f1valiter.SnowflakeSource.Data.StagingTable != nil {
						f1valf63f0.StagingTable = f1valiter.SnowflakeSource.Data.StagingTable
					}
					if f1valiter.SnowflakeSource.Data.Table != nil {
						f1valf63f0.Table = f1valiter.SnowflakeSource.Data.Table
					}
					if f1valiter.SnowflakeSource.Data.TableSchema != nil {
						f1valf63f0f18 := []*svcapitypes.Option{}
						for _, f1valf63f0f18iter := range f1valiter.SnowflakeSource.Data.TableSchema {
							f1valf63f0f18elem := &svcapitypes.Option{}
							if f1valf63f0f18iter.Description != nil {
								f1valf63f0f18elem.Description = f1valf63f0f18iter.Description
							}
							if f1valf63f0f18iter.Label != nil {
								f1valf63f0f18elem.Label = f1valf63f0f18iter.Label
							}
							if f1valf63f0f18iter.Value != nil {
								f1valf63f0f18elem.Value = f1valf63f0f18iter.Value
							}
							f1valf63f0f18 = append(f1valf63f0f18, f1valf63f0f18elem)
						}
						f1valf63f0.TableSchema = f1valf63f0f18
					}
					if f1valiter.SnowflakeSource.Data.TempDir != nil {
						f1valf63f0.TempDir = f1valiter.SnowflakeSource.Data.TempDir
					}
					if f1valiter.SnowflakeSource.Data.Upsert != nil {
						f1valf63f0.Upsert = f1valiter.SnowflakeSource.Data.Upsert
					}
					f1valf63.Data = f1valf63f0
				}
				if f1valiter.SnowflakeSource.Name != nil {
					f1valf63.Name = f1valiter.SnowflakeSource.Name
				}
				if f1valiter.SnowflakeSource.OutputSchemas != nil {
					f1valf63f2 := []*svcapitypes.GlueSchema{}
					for _, f1valf63f2iter := range f1valiter.SnowflakeSource.OutputSchemas {
						f1valf63f2elem := &svcapitypes.GlueSchema{}
						if f1valf63f2iter.Columns != nil {
							f1valf63f2elemf0 := []*svcapitypes.GlueStudioSchemaColumn{}
							for _, f1valf63f2elemf0iter := range f1valf63f2iter.Columns {
								f1valf63f2elemf0elem := &svcapitypes.GlueStudioSchemaColumn{}
								if f1valf63f2elemf0iter.Name != nil {
									f1valf63f2elemf0elem.Name = f1valf63f2elemf0iter.Name
								}
								if f1valf63f2elemf0iter.Type != nil {
									f1valf63f2elemf0elem.Type = f1valf63f2elemf0iter.Type
								}
								f1valf63f2elemf0 = append(f1valf63f2elemf0, f1valf63f2elemf0elem)
							}
							f1valf63f2elem.Columns = f1valf63f2elemf0
						}
						f1valf63f2 = append(f1valf63f2, f1valf63f2elem)
					}
					f1valf63.OutputSchemas = f1valf63f2
				}
				f1val.SnowflakeSource = f1valf63
			}
			if f1valiter.SnowflakeTarget != nil {
				f1valf64 := &svcapitypes.SnowflakeTarget{}
				if f1valiter.SnowflakeTarget.Data != nil {
					f1valf64f0 := &svcapitypes.SnowflakeNodeData{}
					if f1valiter.SnowflakeTarget.Data.Action != nil {
						f1valf64f0.Action = f1valiter.SnowflakeTarget.Data.Action
					}
					if f1valiter.SnowflakeTarget.Data.AdditionalOptions != nil {
						f1valf64f0f1 := map[string]*string{}
						for f1valf64f0f1key, f1valf64f0f1valiter := range f1valiter.SnowflakeTarget.Data.AdditionalOptions {
							var f1valf64f0f1val string
							f1valf64f0f1val = *f1valf64f0f1valiter
							f1valf64f0f1[f1valf64f0f1key] = &f1valf64f0f1val
						}
						f1valf64f0.AdditionalOptions = f1valf64f0f1
					}
					if f1valiter.SnowflakeTarget.Data.AutoPushdown != nil {
						f1valf64f0.AutoPushdown = f1valiter.SnowflakeTarget.Data.AutoPushdown
					}
					if f1valiter.SnowflakeTarget.Data.Connection != nil {
						f1valf64f0f3 := &svcapitypes.Option{}
						if f1valiter.SnowflakeTarget.Data.Connection.Description != nil {
							f1valf64f0f3.Description = f1valiter.SnowflakeTarget.Data.Connection.Description
						}
						if f1valiter.SnowflakeTarget.Data.Connection.Label != nil {
							f1valf64f0f3.Label = f1valiter.SnowflakeTarget.Data.Connection.Label
						}
						if f1valiter.SnowflakeTarget.Data.Connection.Value != nil {
							f1valf64f0f3.Value = f1valiter.SnowflakeTarget.Data.Connection.Value
						}
						f1valf64f0.Connection = f1valf64f0f3
					}
					if f1valiter.SnowflakeTarget.Data.Database != nil {
						f1valf64f0.Database = f1valiter.SnowflakeTarget.Data.Database
					}
					if f1valiter.SnowflakeTarget.Data.IamRole != nil {
						f1valf64f0f5 := &svcapitypes.Option{}
						if f1valiter.SnowflakeTarget.Data.IamRole.Description != nil {
							f1valf64f0f5.Description = f1valiter.SnowflakeTarget.Data.IamRole.Description
						}
						if f1valiter.SnowflakeTarget.Data.IamRole.Label != nil {
							f1valf64f0f5.Label = f1valiter.SnowflakeTarget.Data.IamRole.Label
						}
						if f1valiter.SnowflakeTarget.Data.IamRole.Value != nil {
							f1valf64f0f5.Value = f1valiter.SnowflakeTarget.Data.IamRole.Value
						}
						f1valf64f0.IAMRole = f1valf64f0f5
					}
					if f1valiter.SnowflakeTarget.Data.MergeAction != nil {
						f1valf64f0.MergeAction = f1valiter.SnowflakeTarget.Data.MergeAction
					}
					if f1valiter.SnowflakeTarget.Data.MergeClause != nil {
						f1valf64f0.MergeClause = f1valiter.SnowflakeTarget.Data.MergeClause
					}
					if f1valiter.SnowflakeTarget.Data.MergeWhenMatched != nil {
						f1valf64f0.MergeWhenMatched = f1valiter.SnowflakeTarget.Data.MergeWhenMatched
					}
					if f1valiter.SnowflakeTarget.Data.MergeWhenNotMatched != nil {
						f1valf64f0.MergeWhenNotMatched = f1valiter.SnowflakeTarget.Data.MergeWhenNotMatched
					}
					if f1valiter.SnowflakeTarget.Data.PostAction != nil {
						f1valf64f0.PostAction = f1valiter.SnowflakeTarget.Data.PostAction
					}
					if f1valiter.SnowflakeTarget.Data.PreAction != nil {
						f1valf64f0.PreAction = f1valiter.SnowflakeTarget.Data.PreAction
					}
					if f1valiter.SnowflakeTarget.Data.SampleQuery != nil {
						f1valf64f0.SampleQuery = f1valiter.SnowflakeTarget.Data.SampleQuery
					}
					if f1valiter.SnowflakeTarget.Data.Schema != nil {
						f1valf64f0.Schema = f1valiter.SnowflakeTarget.Data.Schema
					}
					if f1valiter.SnowflakeTarget.Data.SelectedColumns != nil {
						f1valf64f0f14 := []*svcapitypes.Option{}
						for _, f1valf64f0f14iter := range f1valiter.SnowflakeTarget.Data.SelectedColumns {
							f1valf64f0f14elem := &svcapitypes.Option{}
							if f1valf64f0f14iter.Description != nil {
								f1valf64f0f14elem.Description = f1valf64f0f14iter.Description
							}
							if f1valf64f0f14iter.Label != nil {
								f1valf64f0f14elem.Label = f1valf64f0f14iter.Label
							}
							if f1valf64f0f14iter.Value != nil {
								f1valf64f0f14elem.Value = f1valf64f0f14iter.Value
							}
							f1valf64f0f14 = append(f1valf64f0f14, f1valf64f0f14elem)
						}
						f1valf64f0.SelectedColumns = f1valf64f0f14
					}
					if f1valiter.SnowflakeTarget.Data.SourceType != nil {
						f1valf64f0.SourceType = f1valiter.SnowflakeTarget.Data.SourceType
					}
					if f1valiter.SnowflakeTarget.Data.StagingTable != nil {
						f1valf64f0.StagingTable = f1valiter.SnowflakeTarget.Data.StagingTable
					}
					if f1valiter.SnowflakeTarget.Data.Table != nil {
						f1valf64f0.Table = f1valiter.SnowflakeTarget.Data.Table
					}
					if f1valiter.SnowflakeTarget.Data.TableSchema != nil {
						f1valf64f0f18 := []*svcapitypes.Option{}
						for _, f1valf64f0f18iter := range f1valiter.SnowflakeTarget.Data.TableSchema {
							f1valf64f0f18elem := &svcapitypes.Option{}
							if f1valf64f0f18iter.Description != nil {
								f1valf64f0f18elem.Description = f1valf64f0f18iter.Description
							}
							if f1valf64f0f18iter.Label != nil {
								f1valf64f0f18elem.Label = f1valf64f0f18iter.Label
							}
							if f1valf64f0f18iter.Value != nil {
								f1valf64f0f18elem.Value = f1valf64f0f18iter.Value
							}
							f1valf64f0f18 = append(f1valf64f0f18, f1valf64f0f18elem)
						}
						f1valf64f0.TableSchema = f1valf64f0f18
					}
					if f1valiter.SnowflakeTarget.Data.TempDir != nil {
						f1valf64f0.TempDir = f1valiter.SnowflakeTarget.Data.TempDir
					}
					if f1valiter.SnowflakeTarget.Data.Upsert != nil {
						f1valf64f0.Upsert = f1valiter.SnowflakeTarget.Data.Upsert
					}
					f1valf64.Data = f1valf64f0
				}
				if f1valiter.SnowflakeTarget.Inputs != nil {
					f1valf64f1 := []*string{}
					for _, f1valf64f1iter := range f1valiter.SnowflakeTarget.Inputs {
						var f1valf64f1elem string
						f1valf64f1elem = *f1valf64f1iter
						f1valf64f1 = append(f1valf64f1, &f1valf64f1elem)
					}
					f1valf64.Inputs = f1valf64f1
				}
				if f1valiter.SnowflakeTarget.Name != nil {
					f1valf64.Name = f1valiter.SnowflakeTarget.Name
				}
				f1val.SnowflakeTarget = f1valf64
			}
			if f1valiter.SparkConnectorSource != nil {
				f1valf65 := &svcapitypes.SparkConnectorSource{}
				if f1valiter.SparkConnectorSource.AdditionalOptions != nil {
					f1valf65f0 := map[string]*string{}
					for f1valf65f0key, f1valf65f0valiter := range f1valiter.SparkConnectorSource.AdditionalOptions {
						var f1valf65f0val string
						f1valf65f0val = *f1valf65f0valiter
						f1valf65f0[f1valf65f0key] = &f1valf65f0val
					}
					f1valf65.AdditionalOptions = f1valf65f0
				}
				if f1valiter.SparkConnectorSource.ConnectionName != nil {
					f1valf65.ConnectionName = f1valiter.SparkConnectorSource.ConnectionName
				}
				if f1valiter.SparkConnectorSource.ConnectionType != nil {
					f1valf65.ConnectionType = f1valiter.SparkConnectorSource.ConnectionType
				}
				if f1valiter.SparkConnectorSource.ConnectorName != nil {
					f1valf65.ConnectorName = f1valiter.SparkConnectorSource.ConnectorName
				}
				if f1valiter.SparkConnectorSource.Name != nil {
					f1valf65.Name = f1valiter.SparkConnectorSource.Name
				}
				if f1valiter.SparkConnectorSource.OutputSchemas != nil {
					f1valf65f5 := []*svcapitypes.GlueSchema{}
					for _, f1valf65f5iter := range f1valiter.SparkConnectorSource.OutputSchemas {
						f1valf65f5elem := &svcapitypes.GlueSchema{}
						if f1valf65f5iter.Columns != nil {
							f1valf65f5elemf0 := []*svcapitypes.GlueStudioSchemaColumn{}
							for _, f1valf65f5elemf0iter := range f1valf65f5iter.Columns {
								f1valf65f5elemf0elem := &svcapitypes.GlueStudioSchemaColumn{}
								if f1valf65f5elemf0iter.Name != nil {
									f1valf65f5elemf0elem.Name = f1valf65f5elemf0iter.Name
								}
								if f1valf65f5elemf0iter.Type != nil {
									f1valf65f5elemf0elem.Type = f1valf65f5elemf0iter.Type
								}
								f1valf65f5elemf0 = append(f1valf65f5elemf0, f1valf65f5elemf0elem)
							}
							f1valf65f5elem.Columns = f1valf65f5elemf0
						}
						f1valf65f5 = append(f1valf65f5, f1valf65f5elem)
					}
					f1valf65.OutputSchemas = f1valf65f5
				}
				f1val.SparkConnectorSource = f1valf65
			}
			if f1valiter.SparkConnectorTarget != nil {
				f1valf66 := &svcapitypes.SparkConnectorTarget{}
				if f1valiter.SparkConnectorTarget.AdditionalOptions != nil {
					f1valf66f0 := map[string]*string{}
					for f1valf66f0key, f1valf66f0valiter := range f1valiter.SparkConnectorTarget.AdditionalOptions {
						var f1valf66f0val string
						f1valf66f0val = *f1valf66f0valiter
						f1valf66f0[f1valf66f0key] = &f1valf66f0val
					}
					f1valf66.AdditionalOptions = f1valf66f0
				}
				if f1valiter.SparkConnectorTarget.ConnectionName != nil {
					f1valf66.ConnectionName = f1valiter.SparkConnectorTarget.ConnectionName
				}
				if f1valiter.SparkConnectorTarget.ConnectionType != nil {
					f1valf66.ConnectionType = f1valiter.SparkConnectorTarget.ConnectionType
				}
				if f1valiter.SparkConnectorTarget.ConnectorName != nil {
					f1valf66.ConnectorName = f1valiter.SparkConnectorTarget.ConnectorName
				}
				if f1valiter.SparkConnectorTarget.Inputs != nil {
					f1valf66f4 := []*string{}
					for _, f1valf66f4iter := range f1valiter.SparkConnectorTarget.Inputs {
						var f1valf66f4elem string
						f1valf66f4elem = *f1valf66f4iter
						f1valf66f4 = append(f1valf66f4, &f1valf66f4elem)
					}
					f1valf66.Inputs = f1valf66f4
				}
				if f1valiter.SparkConnectorTarget.Name != nil {
					f1valf66.Name = f1valiter.SparkConnectorTarget.Name
				}
				if f1valiter.SparkConnectorTarget.OutputSchemas != nil {
					f1valf66f6 := []*svcapitypes.GlueSchema{}
					for _, f1valf66f6iter := range f1valiter.SparkConnectorTarget.OutputSchemas {
						f1valf66f6elem := &svcapitypes.GlueSchema{}
						if f1valf66f6iter.Columns != nil {
							f1valf66f6elemf0 := []*svcapitypes.GlueStudioSchemaColumn{}
							for _, f1valf66f6elemf0iter := range f1valf66f6iter.Columns {
								f1valf66f6elemf0elem := &svcapitypes.GlueStudioSchemaColumn{}
								if f1valf66f6elemf0iter.Name != nil {
									f1valf66f6elemf0elem.Name = f1valf66f6elemf0iter.Name
								}
								if f1valf66f6elemf0iter.Type != nil {
									f1valf66f6elemf0elem.Type = f1valf66f6elemf0iter.Type
								}
								f1valf66f6elemf0 = append(f1valf66f6elemf0, f1valf66f6elemf0elem)
							}
							f1valf66f6elem.Columns = f1valf66f6elemf0
						}
						f1valf66f6 = append(f1valf66f6, f1valf66f6elem)
					}
					f1valf66.OutputSchemas = f1valf66f6
				}
				f1val.SparkConnectorTarget = f1valf66
			}
			if f1valiter.SparkSQL != nil {
				f1valf67 := &svcapitypes.SparkSQL{}
				if f1valiter.SparkSQL.Inputs != nil {
					f1valf67f0 := []*string{}
					for _, f1valf67f0iter := range f1valiter.SparkSQL.Inputs {
						var f1valf67f0elem string
						f1valf67f0elem = *f1valf67f0iter
						f1valf67f0 = append(f1valf67f0, &f1valf67f0elem)
					}
					f1valf67.Inputs = f1valf67f0
				}
				if f1valiter.SparkSQL.Name != nil {
					f1valf67.Name = f1valiter.SparkSQL.Name
				}
				if f1valiter.SparkSQL.OutputSchemas != nil {
					f1valf67f2 := []*svcapitypes.GlueSchema{}
					for _, f1valf67f2iter := range f1valiter.SparkSQL.OutputSchemas {
						f1valf67f2elem := &svcapitypes.GlueSchema{}
						if f1valf67f2iter.Columns != nil {
							f1valf67f2elemf0 := []*svcapitypes.GlueStudioSchemaColumn{}
							for _, f1valf67f2elemf0iter := range f1valf67f2iter.Columns {
								f1valf67f2elemf0elem := &svcapitypes.GlueStudioSchemaColumn{}
								if f1valf67f2elemf0iter.Name != nil {
									f1valf67f2elemf0elem.Name = f1valf67f2elemf0iter.Name
								}
								if f1valf67f2elemf0iter.Type != nil {
									f1valf67f2elemf0elem.Type = f1valf67f2elemf0iter.Type
								}
								f1valf67f2elemf0 = append(f1valf67f2elemf0, f1valf67f2elemf0elem)
							}
							f1valf67f2elem.Columns = f1valf67f2elemf0
						}
						f1valf67f2 = append(f1valf67f2, f1valf67f2elem)
					}
					f1valf67.OutputSchemas = f1valf67f2
				}
				if f1valiter.SparkSQL.SqlAliases != nil {
					f1valf67f3 := []*svcapitypes.SQLAlias{}
					for _, f1valf67f3iter := range f1valiter.SparkSQL.SqlAliases {
						f1valf67f3elem := &svcapitypes.SQLAlias{}
						if f1valf67f3iter.Alias != nil {
							f1valf67f3elem.Alias = f1valf67f3iter.Alias
						}
						if f1valf67f3iter.From != nil {
							f1valf67f3elem.From = f1valf67f3iter.From
						}
						f1valf67f3 = append(f1valf67f3, f1valf67f3elem)
					}
					f1valf67.SQLAliases = f1valf67f3
				}
				if f1valiter.SparkSQL.SqlQuery != nil {
					f1valf67.SQLQuery = f1valiter.SparkSQL.SqlQuery
				}
				f1val.SparkSQL = f1valf67
			}
			if f1valiter.Spigot != nil {
				f1valf68 := &svcapitypes.Spigot{}
				if f1valiter.Spigot.Inputs != nil {
					f1valf68f0 := []*string{}
					for _, f1valf68f0iter := range f1valiter.Spigot.Inputs {
						var f1valf68f0elem string
						f1valf68f0elem = *f1valf68f0iter
						f1valf68f0 = append(f1valf68f0, &f1valf68f0elem)
					}
					f1valf68.Inputs = f1valf68f0
				}
				if f1valiter.Spigot.Name != nil {
					f1valf68.Name = f1valiter.Spigot.Name
				}
				if f1valiter.Spigot.Path != nil {
					f1valf68.Path = f1valiter.Spigot.Path
				}
				if f1valiter.Spigot.Prob != nil {
					f1valf68.Prob = f1valiter.Spigot.Prob
				}
				if f1valiter.Spigot.Topk != nil {
					f1valf68.Topk = f1valiter.Spigot.Topk
				}
				f1val.Spigot = f1valf68
			}
			if f1valiter.SplitFields != nil {
				f1valf69 := &svcapitypes.SplitFields{}
				if f1valiter.SplitFields.Inputs != nil {
					f1valf69f0 := []*string{}
					for _, f1valf69f0iter := range f1valiter.SplitFields.Inputs {
						var f1valf69f0elem string
						f1valf69f0elem = *f1valf69f0iter
						f1valf69f0 = append(f1valf69f0, &f1valf69f0elem)
					}
					f1valf69.Inputs = f1valf69f0
				}
				if f1valiter.SplitFields.Name != nil {
					f1valf69.Name = f1valiter.SplitFields.Name
				}
				if f1valiter.SplitFields.Paths != nil {
					f1valf69f2 := [][]*string{}
					for _, f1valf69f2iter := range f1valiter.SplitFields.Paths {
						f1valf69f2elem := []*string{}
						for _, f1valf69f2elemiter := range f1valf69f2iter {
							var f1valf69f2elemelem string
							f1valf69f2elemelem = *f1valf69f2elemiter
							f1valf69f2elem = append(f1valf69f2elem, &f1valf69f2elemelem)
						}
						f1valf69f2 = append(f1valf69f2, f1valf69f2elem)
					}
					f1valf69.Paths = f1valf69f2
				}
				f1val.SplitFields = f1valf69
			}
			if f1valiter.Union != nil {
				f1valf70 := &svcapitypes.Union{}
				if f1valiter.Union.Inputs != nil {
					f1valf70f0 := []*string{}
					for _, f1valf70f0iter := range f1valiter.Union.Inputs {
						var f1valf70f0elem string
						f1valf70f0elem = *f1valf70f0iter
						f1valf70f0 = append(f1valf70f0, &f1valf70f0elem)
					}
					f1valf70.Inputs = f1valf70f0
				}
				if f1valiter.Union.Name != nil {
					f1valf70.Name = f1valiter.Union.Name
				}
				if f1valiter.Union.UnionType != nil {
					f1valf70.UnionType = f1valiter.Union.UnionType
				}
				f1val.Union = f1valf70
			}
			f1[f1key] = f1val
		}
		cr.Spec.ForProvider.CodeGenConfigurationNodes = f1
	} else {
		cr.Spec.ForProvider.CodeGenConfigurationNodes = nil
	}
	if resp.Job.Command != nil {
		f2 := &svcapitypes.JobCommand{}
		if resp.Job.Command.Name != nil {
			f2.Name = resp.Job.Command.Name
		}
		if resp.Job.Command.PythonVersion != nil {
			f2.PythonVersion = resp.Job.Command.PythonVersion
		}
		if resp.Job.Command.Runtime != nil {
			f2.Runtime = resp.Job.Command.Runtime
		}
		if resp.Job.Command.ScriptLocation != nil {
			f2.ScriptLocation = resp.Job.Command.ScriptLocation
		}
		cr.Spec.ForProvider.Command = f2
	} else {
		cr.Spec.ForProvider.Command = nil
	}
	if resp.Job.CreatedOn != nil {
		cr.Status.AtProvider.CreatedOn = &metav1.Time{*resp.Job.CreatedOn}
	} else {
		cr.Status.AtProvider.CreatedOn = nil
	}
	if resp.Job.DefaultArguments != nil {
		f5 := map[string]*string{}
		for f5key, f5valiter := range resp.Job.DefaultArguments {
			var f5val string
			f5val = *f5valiter
			f5[f5key] = &f5val
		}
		cr.Spec.ForProvider.DefaultArguments = f5
	} else {
		cr.Spec.ForProvider.DefaultArguments = nil
	}
	if resp.Job.Description != nil {
		cr.Spec.ForProvider.Description = resp.Job.Description
	} else {
		cr.Spec.ForProvider.Description = nil
	}
	if resp.Job.ExecutionClass != nil {
		cr.Spec.ForProvider.ExecutionClass = resp.Job.ExecutionClass
	} else {
		cr.Spec.ForProvider.ExecutionClass = nil
	}
	if resp.Job.ExecutionProperty != nil {
		f8 := &svcapitypes.ExecutionProperty{}
		if resp.Job.ExecutionProperty.MaxConcurrentRuns != nil {
			f8.MaxConcurrentRuns = resp.Job.ExecutionProperty.MaxConcurrentRuns
		}
		cr.Spec.ForProvider.ExecutionProperty = f8
	} else {
		cr.Spec.ForProvider.ExecutionProperty = nil
	}
	if resp.Job.GlueVersion != nil {
		cr.Spec.ForProvider.GlueVersion = resp.Job.GlueVersion
	} else {
		cr.Spec.ForProvider.GlueVersion = nil
	}
	if resp.Job.LastModifiedOn != nil {
		cr.Status.AtProvider.LastModifiedOn = &metav1.Time{*resp.Job.LastModifiedOn}
	} else {
		cr.Status.AtProvider.LastModifiedOn = nil
	}
	if resp.Job.LogUri != nil {
		cr.Spec.ForProvider.LogURI = resp.Job.LogUri
	} else {
		cr.Spec.ForProvider.LogURI = nil
	}
	if resp.Job.MaxCapacity != nil {
		cr.Spec.ForProvider.MaxCapacity = resp.Job.MaxCapacity
	} else {
		cr.Spec.ForProvider.MaxCapacity = nil
	}
	if resp.Job.MaxRetries != nil {
		cr.Spec.ForProvider.MaxRetries = resp.Job.MaxRetries
	} else {
		cr.Spec.ForProvider.MaxRetries = nil
	}
	if resp.Job.Name != nil {
		cr.Status.AtProvider.Name = resp.Job.Name
	} else {
		cr.Status.AtProvider.Name = nil
	}
	if resp.Job.NonOverridableArguments != nil {
		f15 := map[string]*string{}
		for f15key, f15valiter := range resp.Job.NonOverridableArguments {
			var f15val string
			f15val = *f15valiter
			f15[f15key] = &f15val
		}
		cr.Spec.ForProvider.NonOverridableArguments = f15
	} else {
		cr.Spec.ForProvider.NonOverridableArguments = nil
	}
	if resp.Job.NotificationProperty != nil {
		f16 := &svcapitypes.NotificationProperty{}
		if resp.Job.NotificationProperty.NotifyDelayAfter != nil {
			f16.NotifyDelayAfter = resp.Job.NotificationProperty.NotifyDelayAfter
		}
		cr.Spec.ForProvider.NotificationProperty = f16
	} else {
		cr.Spec.ForProvider.NotificationProperty = nil
	}
	if resp.Job.NumberOfWorkers != nil {
		cr.Spec.ForProvider.NumberOfWorkers = resp.Job.NumberOfWorkers
	} else {
		cr.Spec.ForProvider.NumberOfWorkers = nil
	}
	if resp.Job.SourceControlDetails != nil {
		f20 := &svcapitypes.SourceControlDetails{}
		if resp.Job.SourceControlDetails.AuthStrategy != nil {
			f20.AuthStrategy = resp.Job.SourceControlDetails.AuthStrategy
		}
		if resp.Job.SourceControlDetails.AuthToken != nil {
			f20.AuthToken = resp.Job.SourceControlDetails.AuthToken
		}
		if resp.Job.SourceControlDetails.Branch != nil {
			f20.Branch = resp.Job.SourceControlDetails.Branch
		}
		if resp.Job.SourceControlDetails.Folder != nil {
			f20.Folder = resp.Job.SourceControlDetails.Folder
		}
		if resp.Job.SourceControlDetails.LastCommitId != nil {
			f20.LastCommitID = resp.Job.SourceControlDetails.LastCommitId
		}
		if resp.Job.SourceControlDetails.Owner != nil {
			f20.Owner = resp.Job.SourceControlDetails.Owner
		}
		if resp.Job.SourceControlDetails.Provider != nil {
			f20.Provider = resp.Job.SourceControlDetails.Provider
		}
		if resp.Job.SourceControlDetails.Repository != nil {
			f20.Repository = resp.Job.SourceControlDetails.Repository
		}
		cr.Spec.ForProvider.SourceControlDetails = f20
	} else {
		cr.Spec.ForProvider.SourceControlDetails = nil
	}
	if resp.Job.Timeout != nil {
		cr.Spec.ForProvider.Timeout = resp.Job.Timeout
	} else {
		cr.Spec.ForProvider.Timeout = nil
	}
	if resp.Job.WorkerType != nil {
		cr.Spec.ForProvider.WorkerType = resp.Job.WorkerType
	} else {
		cr.Spec.ForProvider.WorkerType = nil
	}

	return cr
}

// GenerateCreateJobInput returns a create input.
func GenerateCreateJobInput(cr *svcapitypes.Job) *svcsdk.CreateJobInput {
	res := &svcsdk.CreateJobInput{}

	if cr.Spec.ForProvider.AllocatedCapacity != nil {
		res.SetAllocatedCapacity(*cr.Spec.ForProvider.AllocatedCapacity)
	}
	if cr.Spec.ForProvider.CodeGenConfigurationNodes != nil {
		f1 := map[string]*svcsdk.CodeGenConfigurationNode{}
		for f1key, f1valiter := range cr.Spec.ForProvider.CodeGenConfigurationNodes {
			f1val := &svcsdk.CodeGenConfigurationNode{}
			if f1valiter.Aggregate != nil {
				f1valf0 := &svcsdk.Aggregate{}
				if f1valiter.Aggregate.Aggs != nil {
					f1valf0f0 := []*svcsdk.AggregateOperation{}
					for _, f1valf0f0iter := range f1valiter.Aggregate.Aggs {
						f1valf0f0elem := &svcsdk.AggregateOperation{}
						if f1valf0f0iter.AggFunc != nil {
							f1valf0f0elem.SetAggFunc(*f1valf0f0iter.AggFunc)
						}
						if f1valf0f0iter.Column != nil {
							f1valf0f0elemf1 := []*string{}
							for _, f1valf0f0elemf1iter := range f1valf0f0iter.Column {
								var f1valf0f0elemf1elem string
								f1valf0f0elemf1elem = *f1valf0f0elemf1iter
								f1valf0f0elemf1 = append(f1valf0f0elemf1, &f1valf0f0elemf1elem)
							}
							f1valf0f0elem.SetColumn(f1valf0f0elemf1)
						}
						f1valf0f0 = append(f1valf0f0, f1valf0f0elem)
					}
					f1valf0.SetAggs(f1valf0f0)
				}
				if f1valiter.Aggregate.Groups != nil {
					f1valf0f1 := [][]*string{}
					for _, f1valf0f1iter := range f1valiter.Aggregate.Groups {
						f1valf0f1elem := []*string{}
						for _, f1valf0f1elemiter := range f1valf0f1iter {
							var f1valf0f1elemelem string
							f1valf0f1elemelem = *f1valf0f1elemiter
							f1valf0f1elem = append(f1valf0f1elem, &f1valf0f1elemelem)
						}
						f1valf0f1 = append(f1valf0f1, f1valf0f1elem)
					}
					f1valf0.SetGroups(f1valf0f1)
				}
				if f1valiter.Aggregate.Inputs != nil {
					f1valf0f2 := []*string{}
					for _, f1valf0f2iter := range f1valiter.Aggregate.Inputs {
						var f1valf0f2elem string
						f1valf0f2elem = *f1valf0f2iter
						f1valf0f2 = append(f1valf0f2, &f1valf0f2elem)
					}
					f1valf0.SetInputs(f1valf0f2)
				}
				if f1valiter.Aggregate.Name != nil {
					f1valf0.SetName(*f1valiter.Aggregate.Name)
				}
				f1val.SetAggregate(f1valf0)
			}
			if f1valiter.AmazonRedshiftSource != nil {
				f1valf1 := &svcsdk.AmazonRedshiftSource{}
				if f1valiter.AmazonRedshiftSource.Data != nil {
					f1valf1f0 := &svcsdk.AmazonRedshiftNodeData{}
					if f1valiter.AmazonRedshiftSource.Data.AccessType != nil {
						f1valf1f0.SetAccessType(*f1valiter.AmazonRedshiftSource.Data.AccessType)
					}
					if f1valiter.AmazonRedshiftSource.Data.Action != nil {
						f1valf1f0.SetAction(*f1valiter.AmazonRedshiftSource.Data.Action)
					}
					if f1valiter.AmazonRedshiftSource.Data.AdvancedOptions != nil {
						f1valf1f0f2 := []*svcsdk.AmazonRedshiftAdvancedOption{}
						for _, f1valf1f0f2iter := range f1valiter.AmazonRedshiftSource.Data.AdvancedOptions {
							f1valf1f0f2elem := &svcsdk.AmazonRedshiftAdvancedOption{}
							if f1valf1f0f2iter.Key != nil {
								f1valf1f0f2elem.SetKey(*f1valf1f0f2iter.Key)
							}
							if f1valf1f0f2iter.Value != nil {
								f1valf1f0f2elem.SetValue(*f1valf1f0f2iter.Value)
							}
							f1valf1f0f2 = append(f1valf1f0f2, f1valf1f0f2elem)
						}
						f1valf1f0.SetAdvancedOptions(f1valf1f0f2)
					}
					if f1valiter.AmazonRedshiftSource.Data.CatalogDatabase != nil {
						f1valf1f0f3 := &svcsdk.Option{}
						if f1valiter.AmazonRedshiftSource.Data.CatalogDatabase.Description != nil {
							f1valf1f0f3.SetDescription(*f1valiter.AmazonRedshiftSource.Data.CatalogDatabase.Description)
						}
						if f1valiter.AmazonRedshiftSource.Data.CatalogDatabase.Label != nil {
							f1valf1f0f3.SetLabel(*f1valiter.AmazonRedshiftSource.Data.CatalogDatabase.Label)
						}
						if f1valiter.AmazonRedshiftSource.Data.CatalogDatabase.Value != nil {
							f1valf1f0f3.SetValue(*f1valiter.AmazonRedshiftSource.Data.CatalogDatabase.Value)
						}
						f1valf1f0.SetCatalogDatabase(f1valf1f0f3)
					}
					if f1valiter.AmazonRedshiftSource.Data.CatalogRedshiftSchema != nil {
						f1valf1f0.SetCatalogRedshiftSchema(*f1valiter.AmazonRedshiftSource.Data.CatalogRedshiftSchema)
					}
					if f1valiter.AmazonRedshiftSource.Data.CatalogRedshiftTable != nil {
						f1valf1f0.SetCatalogRedshiftTable(*f1valiter.AmazonRedshiftSource.Data.CatalogRedshiftTable)
					}
					if f1valiter.AmazonRedshiftSource.Data.CatalogTable != nil {
						f1valf1f0f6 := &svcsdk.Option{}
						if f1valiter.AmazonRedshiftSource.Data.CatalogTable.Description != nil {
							f1valf1f0f6.SetDescription(*f1valiter.AmazonRedshiftSource.Data.CatalogTable.Description)
						}
						if f1valiter.AmazonRedshiftSource.Data.CatalogTable.Label != nil {
							f1valf1f0f6.SetLabel(*f1valiter.AmazonRedshiftSource.Data.CatalogTable.Label)
						}
						if f1valiter.AmazonRedshiftSource.Data.CatalogTable.Value != nil {
							f1valf1f0f6.SetValue(*f1valiter.AmazonRedshiftSource.Data.CatalogTable.Value)
						}
						f1valf1f0.SetCatalogTable(f1valf1f0f6)
					}
					if f1valiter.AmazonRedshiftSource.Data.Connection != nil {
						f1valf1f0f7 := &svcsdk.Option{}
						if f1valiter.AmazonRedshiftSource.Data.Connection.Description != nil {
							f1valf1f0f7.SetDescription(*f1valiter.AmazonRedshiftSource.Data.Connection.Description)
						}
						if f1valiter.AmazonRedshiftSource.Data.Connection.Label != nil {
							f1valf1f0f7.SetLabel(*f1valiter.AmazonRedshiftSource.Data.Connection.Label)
						}
						if f1valiter.AmazonRedshiftSource.Data.Connection.Value != nil {
							f1valf1f0f7.SetValue(*f1valiter.AmazonRedshiftSource.Data.Connection.Value)
						}
						f1valf1f0.SetConnection(f1valf1f0f7)
					}
					if f1valiter.AmazonRedshiftSource.Data.CrawlerConnection != nil {
						f1valf1f0.SetCrawlerConnection(*f1valiter.AmazonRedshiftSource.Data.CrawlerConnection)
					}
					if f1valiter.AmazonRedshiftSource.Data.IAMRole != nil {
						f1valf1f0f9 := &svcsdk.Option{}
						if f1valiter.AmazonRedshiftSource.Data.IAMRole.Description != nil {
							f1valf1f0f9.SetDescription(*f1valiter.AmazonRedshiftSource.Data.IAMRole.Description)
						}
						if f1valiter.AmazonRedshiftSource.Data.IAMRole.Label != nil {
							f1valf1f0f9.SetLabel(*f1valiter.AmazonRedshiftSource.Data.IAMRole.Label)
						}
						if f1valiter.AmazonRedshiftSource.Data.IAMRole.Value != nil {
							f1valf1f0f9.SetValue(*f1valiter.AmazonRedshiftSource.Data.IAMRole.Value)
						}
						f1valf1f0.SetIamRole(f1valf1f0f9)
					}
					if f1valiter.AmazonRedshiftSource.Data.MergeAction != nil {
						f1valf1f0.SetMergeAction(*f1valiter.AmazonRedshiftSource.Data.MergeAction)
					}
					if f1valiter.AmazonRedshiftSource.Data.MergeClause != nil {
						f1valf1f0.SetMergeClause(*f1valiter.AmazonRedshiftSource.Data.MergeClause)
					}
					if f1valiter.AmazonRedshiftSource.Data.MergeWhenMatched != nil {
						f1valf1f0.SetMergeWhenMatched(*f1valiter.AmazonRedshiftSource.Data.MergeWhenMatched)
					}
					if f1valiter.AmazonRedshiftSource.Data.MergeWhenNotMatched != nil {
						f1valf1f0.SetMergeWhenNotMatched(*f1valiter.AmazonRedshiftSource.Data.MergeWhenNotMatched)
					}
					if f1valiter.AmazonRedshiftSource.Data.PostAction != nil {
						f1valf1f0.SetPostAction(*f1valiter.AmazonRedshiftSource.Data.PostAction)
					}
					if f1valiter.AmazonRedshiftSource.Data.PreAction != nil {
						f1valf1f0.SetPreAction(*f1valiter.AmazonRedshiftSource.Data.PreAction)
					}
					if f1valiter.AmazonRedshiftSource.Data.SampleQuery != nil {
						f1valf1f0.SetSampleQuery(*f1valiter.AmazonRedshiftSource.Data.SampleQuery)
					}
					if f1valiter.AmazonRedshiftSource.Data.Schema != nil {
						f1valf1f0f17 := &svcsdk.Option{}
						if f1valiter.AmazonRedshiftSource.Data.Schema.Description != nil {
							f1valf1f0f17.SetDescription(*f1valiter.AmazonRedshiftSource.Data.Schema.Description)
						}
						if f1valiter.AmazonRedshiftSource.Data.Schema.Label != nil {
							f1valf1f0f17.SetLabel(*f1valiter.AmazonRedshiftSource.Data.Schema.Label)
						}
						if f1valiter.AmazonRedshiftSource.Data.Schema.Value != nil {
							f1valf1f0f17.SetValue(*f1valiter.AmazonRedshiftSource.Data.Schema.Value)
						}
						f1valf1f0.SetSchema(f1valf1f0f17)
					}
					if f1valiter.AmazonRedshiftSource.Data.SelectedColumns != nil {
						f1valf1f0f18 := []*svcsdk.Option{}
						for _, f1valf1f0f18iter := range f1valiter.AmazonRedshiftSource.Data.SelectedColumns {
							f1valf1f0f18elem := &svcsdk.Option{}
							if f1valf1f0f18iter.Description != nil {
								f1valf1f0f18elem.SetDescription(*f1valf1f0f18iter.Description)
							}
							if f1valf1f0f18iter.Label != nil {
								f1valf1f0f18elem.SetLabel(*f1valf1f0f18iter.Label)
							}
							if f1valf1f0f18iter.Value != nil {
								f1valf1f0f18elem.SetValue(*f1valf1f0f18iter.Value)
							}
							f1valf1f0f18 = append(f1valf1f0f18, f1valf1f0f18elem)
						}
						f1valf1f0.SetSelectedColumns(f1valf1f0f18)
					}
					if f1valiter.AmazonRedshiftSource.Data.SourceType != nil {
						f1valf1f0.SetSourceType(*f1valiter.AmazonRedshiftSource.Data.SourceType)
					}
					if f1valiter.AmazonRedshiftSource.Data.StagingTable != nil {
						f1valf1f0.SetStagingTable(*f1valiter.AmazonRedshiftSource.Data.StagingTable)
					}
					if f1valiter.AmazonRedshiftSource.Data.Table != nil {
						f1valf1f0f21 := &svcsdk.Option{}
						if f1valiter.AmazonRedshiftSource.Data.Table.Description != nil {
							f1valf1f0f21.SetDescription(*f1valiter.AmazonRedshiftSource.Data.Table.Description)
						}
						if f1valiter.AmazonRedshiftSource.Data.Table.Label != nil {
							f1valf1f0f21.SetLabel(*f1valiter.AmazonRedshiftSource.Data.Table.Label)
						}
						if f1valiter.AmazonRedshiftSource.Data.Table.Value != nil {
							f1valf1f0f21.SetValue(*f1valiter.AmazonRedshiftSource.Data.Table.Value)
						}
						f1valf1f0.SetTable(f1valf1f0f21)
					}
					if f1valiter.AmazonRedshiftSource.Data.TablePrefix != nil {
						f1valf1f0.SetTablePrefix(*f1valiter.AmazonRedshiftSource.Data.TablePrefix)
					}
					if f1valiter.AmazonRedshiftSource.Data.TableSchema != nil {
						f1valf1f0f23 := []*svcsdk.Option{}
						for _, f1valf1f0f23iter := range f1valiter.AmazonRedshiftSource.Data.TableSchema {
							f1valf1f0f23elem := &svcsdk.Option{}
							if f1valf1f0f23iter.Description != nil {
								f1valf1f0f23elem.SetDescription(*f1valf1f0f23iter.Description)
							}
							if f1valf1f0f23iter.Label != nil {
								f1valf1f0f23elem.SetLabel(*f1valf1f0f23iter.Label)
							}
							if f1valf1f0f23iter.Value != nil {
								f1valf1f0f23elem.SetValue(*f1valf1f0f23iter.Value)
							}
							f1valf1f0f23 = append(f1valf1f0f23, f1valf1f0f23elem)
						}
						f1valf1f0.SetTableSchema(f1valf1f0f23)
					}
					if f1valiter.AmazonRedshiftSource.Data.TempDir != nil {
						f1valf1f0.SetTempDir(*f1valiter.AmazonRedshiftSource.Data.TempDir)
					}
					if f1valiter.AmazonRedshiftSource.Data.Upsert != nil {
						f1valf1f0.SetUpsert(*f1valiter.AmazonRedshiftSource.Data.Upsert)
					}
					f1valf1.SetData(f1valf1f0)
				}
				if f1valiter.AmazonRedshiftSource.Name != nil {
					f1valf1.SetName(*f1valiter.AmazonRedshiftSource.Name)
				}
				f1val.SetAmazonRedshiftSource(f1valf1)
			}
			if f1valiter.AmazonRedshiftTarget != nil {
				f1valf2 := &svcsdk.AmazonRedshiftTarget{}
				if f1valiter.AmazonRedshiftTarget.Data != nil {
					f1valf2f0 := &svcsdk.AmazonRedshiftNodeData{}
					if f1valiter.AmazonRedshiftTarget.Data.AccessType != nil {
						f1valf2f0.SetAccessType(*f1valiter.AmazonRedshiftTarget.Data.AccessType)
					}
					if f1valiter.AmazonRedshiftTarget.Data.Action != nil {
						f1valf2f0.SetAction(*f1valiter.AmazonRedshiftTarget.Data.Action)
					}
					if f1valiter.AmazonRedshiftTarget.Data.AdvancedOptions != nil {
						f1valf2f0f2 := []*svcsdk.AmazonRedshiftAdvancedOption{}
						for _, f1valf2f0f2iter := range f1valiter.AmazonRedshiftTarget.Data.AdvancedOptions {
							f1valf2f0f2elem := &svcsdk.AmazonRedshiftAdvancedOption{}
							if f1valf2f0f2iter.Key != nil {
								f1valf2f0f2elem.SetKey(*f1valf2f0f2iter.Key)
							}
							if f1valf2f0f2iter.Value != nil {
								f1valf2f0f2elem.SetValue(*f1valf2f0f2iter.Value)
							}
							f1valf2f0f2 = append(f1valf2f0f2, f1valf2f0f2elem)
						}
						f1valf2f0.SetAdvancedOptions(f1valf2f0f2)
					}
					if f1valiter.AmazonRedshiftTarget.Data.CatalogDatabase != nil {
						f1valf2f0f3 := &svcsdk.Option{}
						if f1valiter.AmazonRedshiftTarget.Data.CatalogDatabase.Description != nil {
							f1valf2f0f3.SetDescription(*f1valiter.AmazonRedshiftTarget.Data.CatalogDatabase.Description)
						}
						if f1valiter.AmazonRedshiftTarget.Data.CatalogDatabase.Label != nil {
							f1valf2f0f3.SetLabel(*f1valiter.AmazonRedshiftTarget.Data.CatalogDatabase.Label)
						}
						if f1valiter.AmazonRedshiftTarget.Data.CatalogDatabase.Value != nil {
							f1valf2f0f3.SetValue(*f1valiter.AmazonRedshiftTarget.Data.CatalogDatabase.Value)
						}
						f1valf2f0.SetCatalogDatabase(f1valf2f0f3)
					}
					if f1valiter.AmazonRedshiftTarget.Data.CatalogRedshiftSchema != nil {
						f1valf2f0.SetCatalogRedshiftSchema(*f1valiter.AmazonRedshiftTarget.Data.CatalogRedshiftSchema)
					}
					if f1valiter.AmazonRedshiftTarget.Data.CatalogRedshiftTable != nil {
						f1valf2f0.SetCatalogRedshiftTable(*f1valiter.AmazonRedshiftTarget.Data.CatalogRedshiftTable)
					}
					if f1valiter.AmazonRedshiftTarget.Data.CatalogTable != nil {
						f1valf2f0f6 := &svcsdk.Option{}
						if f1valiter.AmazonRedshiftTarget.Data.CatalogTable.Description != nil {
							f1valf2f0f6.SetDescription(*f1valiter.AmazonRedshiftTarget.Data.CatalogTable.Description)
						}
						if f1valiter.AmazonRedshiftTarget.Data.CatalogTable.Label != nil {
							f1valf2f0f6.SetLabel(*f1valiter.AmazonRedshiftTarget.Data.CatalogTable.Label)
						}
						if f1valiter.AmazonRedshiftTarget.Data.CatalogTable.Value != nil {
							f1valf2f0f6.SetValue(*f1valiter.AmazonRedshiftTarget.Data.CatalogTable.Value)
						}
						f1valf2f0.SetCatalogTable(f1valf2f0f6)
					}
					if f1valiter.AmazonRedshiftTarget.Data.Connection != nil {
						f1valf2f0f7 := &svcsdk.Option{}
						if f1valiter.AmazonRedshiftTarget.Data.Connection.Description != nil {
							f1valf2f0f7.SetDescription(*f1valiter.AmazonRedshiftTarget.Data.Connection.Description)
						}
						if f1valiter.AmazonRedshiftTarget.Data.Connection.Label != nil {
							f1valf2f0f7.SetLabel(*f1valiter.AmazonRedshiftTarget.Data.Connection.Label)
						}
						if f1valiter.AmazonRedshiftTarget.Data.Connection.Value != nil {
							f1valf2f0f7.SetValue(*f1valiter.AmazonRedshiftTarget.Data.Connection.Value)
						}
						f1valf2f0.SetConnection(f1valf2f0f7)
					}
					if f1valiter.AmazonRedshiftTarget.Data.CrawlerConnection != nil {
						f1valf2f0.SetCrawlerConnection(*f1valiter.AmazonRedshiftTarget.Data.CrawlerConnection)
					}
					if f1valiter.AmazonRedshiftTarget.Data.IAMRole != nil {
						f1valf2f0f9 := &svcsdk.Option{}
						if f1valiter.AmazonRedshiftTarget.Data.IAMRole.Description != nil {
							f1valf2f0f9.SetDescription(*f1valiter.AmazonRedshiftTarget.Data.IAMRole.Description)
						}
						if f1valiter.AmazonRedshiftTarget.Data.IAMRole.Label != nil {
							f1valf2f0f9.SetLabel(*f1valiter.AmazonRedshiftTarget.Data.IAMRole.Label)
						}
						if f1valiter.AmazonRedshiftTarget.Data.IAMRole.Value != nil {
							f1valf2f0f9.SetValue(*f1valiter.AmazonRedshiftTarget.Data.IAMRole.Value)
						}
						f1valf2f0.SetIamRole(f1valf2f0f9)
					}
					if f1valiter.AmazonRedshiftTarget.Data.MergeAction != nil {
						f1valf2f0.SetMergeAction(*f1valiter.AmazonRedshiftTarget.Data.MergeAction)
					}
					if f1valiter.AmazonRedshiftTarget.Data.MergeClause != nil {
						f1valf2f0.SetMergeClause(*f1valiter.AmazonRedshiftTarget.Data.MergeClause)
					}
					if f1valiter.AmazonRedshiftTarget.Data.MergeWhenMatched != nil {
						f1valf2f0.SetMergeWhenMatched(*f1valiter.AmazonRedshiftTarget.Data.MergeWhenMatched)
					}
					if f1valiter.AmazonRedshiftTarget.Data.MergeWhenNotMatched != nil {
						f1valf2f0.SetMergeWhenNotMatched(*f1valiter.AmazonRedshiftTarget.Data.MergeWhenNotMatched)
					}
					if f1valiter.AmazonRedshiftTarget.Data.PostAction != nil {
						f1valf2f0.SetPostAction(*f1valiter.AmazonRedshiftTarget.Data.PostAction)
					}
					if f1valiter.AmazonRedshiftTarget.Data.PreAction != nil {
						f1valf2f0.SetPreAction(*f1valiter.AmazonRedshiftTarget.Data.PreAction)
					}
					if f1valiter.AmazonRedshiftTarget.Data.SampleQuery != nil {
						f1valf2f0.SetSampleQuery(*f1valiter.AmazonRedshiftTarget.Data.SampleQuery)
					}
					if f1valiter.AmazonRedshiftTarget.Data.Schema != nil {
						f1valf2f0f17 := &svcsdk.Option{}
						if f1valiter.AmazonRedshiftTarget.Data.Schema.Description != nil {
							f1valf2f0f17.SetDescription(*f1valiter.AmazonRedshiftTarget.Data.Schema.Description)
						}
						if f1valiter.AmazonRedshiftTarget.Data.Schema.Label != nil {
							f1valf2f0f17.SetLabel(*f1valiter.AmazonRedshiftTarget.Data.Schema.Label)
						}
						if f1valiter.AmazonRedshiftTarget.Data.Schema.Value != nil {
							f1valf2f0f17.SetValue(*f1valiter.AmazonRedshiftTarget.Data.Schema.Value)
						}
						f1valf2f0.SetSchema(f1valf2f0f17)
					}
					if f1valiter.AmazonRedshiftTarget.Data.SelectedColumns != nil {
						f1valf2f0f18 := []*svcsdk.Option{}
						for _, f1valf2f0f18iter := range f1valiter.AmazonRedshiftTarget.Data.SelectedColumns {
							f1valf2f0f18elem := &svcsdk.Option{}
							if f1valf2f0f18iter.Description != nil {
								f1valf2f0f18elem.SetDescription(*f1valf2f0f18iter.Description)
							}
							if f1valf2f0f18iter.Label != nil {
								f1valf2f0f18elem.SetLabel(*f1valf2f0f18iter.Label)
							}
							if f1valf2f0f18iter.Value != nil {
								f1valf2f0f18elem.SetValue(*f1valf2f0f18iter.Value)
							}
							f1valf2f0f18 = append(f1valf2f0f18, f1valf2f0f18elem)
						}
						f1valf2f0.SetSelectedColumns(f1valf2f0f18)
					}
					if f1valiter.AmazonRedshiftTarget.Data.SourceType != nil {
						f1valf2f0.SetSourceType(*f1valiter.AmazonRedshiftTarget.Data.SourceType)
					}
					if f1valiter.AmazonRedshiftTarget.Data.StagingTable != nil {
						f1valf2f0.SetStagingTable(*f1valiter.AmazonRedshiftTarget.Data.StagingTable)
					}
					if f1valiter.AmazonRedshiftTarget.Data.Table != nil {
						f1valf2f0f21 := &svcsdk.Option{}
						if f1valiter.AmazonRedshiftTarget.Data.Table.Description != nil {
							f1valf2f0f21.SetDescription(*f1valiter.AmazonRedshiftTarget.Data.Table.Description)
						}
						if f1valiter.AmazonRedshiftTarget.Data.Table.Label != nil {
							f1valf2f0f21.SetLabel(*f1valiter.AmazonRedshiftTarget.Data.Table.Label)
						}
						if f1valiter.AmazonRedshiftTarget.Data.Table.Value != nil {
							f1valf2f0f21.SetValue(*f1valiter.AmazonRedshiftTarget.Data.Table.Value)
						}
						f1valf2f0.SetTable(f1valf2f0f21)
					}
					if f1valiter.AmazonRedshiftTarget.Data.TablePrefix != nil {
						f1valf2f0.SetTablePrefix(*f1valiter.AmazonRedshiftTarget.Data.TablePrefix)
					}
					if f1valiter.AmazonRedshiftTarget.Data.TableSchema != nil {
						f1valf2f0f23 := []*svcsdk.Option{}
						for _, f1valf2f0f23iter := range f1valiter.AmazonRedshiftTarget.Data.TableSchema {
							f1valf2f0f23elem := &svcsdk.Option{}
							if f1valf2f0f23iter.Description != nil {
								f1valf2f0f23elem.SetDescription(*f1valf2f0f23iter.Description)
							}
							if f1valf2f0f23iter.Label != nil {
								f1valf2f0f23elem.SetLabel(*f1valf2f0f23iter.Label)
							}
							if f1valf2f0f23iter.Value != nil {
								f1valf2f0f23elem.SetValue(*f1valf2f0f23iter.Value)
							}
							f1valf2f0f23 = append(f1valf2f0f23, f1valf2f0f23elem)
						}
						f1valf2f0.SetTableSchema(f1valf2f0f23)
					}
					if f1valiter.AmazonRedshiftTarget.Data.TempDir != nil {
						f1valf2f0.SetTempDir(*f1valiter.AmazonRedshiftTarget.Data.TempDir)
					}
					if f1valiter.AmazonRedshiftTarget.Data.Upsert != nil {
						f1valf2f0.SetUpsert(*f1valiter.AmazonRedshiftTarget.Data.Upsert)
					}
					f1valf2.SetData(f1valf2f0)
				}
				if f1valiter.AmazonRedshiftTarget.Inputs != nil {
					f1valf2f1 := []*string{}
					for _, f1valf2f1iter := range f1valiter.AmazonRedshiftTarget.Inputs {
						var f1valf2f1elem string
						f1valf2f1elem = *f1valf2f1iter
						f1valf2f1 = append(f1valf2f1, &f1valf2f1elem)
					}
					f1valf2.SetInputs(f1valf2f1)
				}
				if f1valiter.AmazonRedshiftTarget.Name != nil {
					f1valf2.SetName(*f1valiter.AmazonRedshiftTarget.Name)
				}
				f1val.SetAmazonRedshiftTarget(f1valf2)
			}
			if f1valiter.ApplyMapping != nil {
				f1valf3 := &svcsdk.ApplyMapping{}
				if f1valiter.ApplyMapping.Inputs != nil {
					f1valf3f0 := []*string{}
					for _, f1valf3f0iter := range f1valiter.ApplyMapping.Inputs {
						var f1valf3f0elem string
						f1valf3f0elem = *f1valf3f0iter
						f1valf3f0 = append(f1valf3f0, &f1valf3f0elem)
					}
					f1valf3.SetInputs(f1valf3f0)
				}
				if f1valiter.ApplyMapping.Mapping != nil {
					f1valf3f1 := []*svcsdk.Mapping{}
					for _, f1valf3f1iter := range f1valiter.ApplyMapping.Mapping {
						f1valf3f1elem := &svcsdk.Mapping{}
						if f1valf3f1iter.Dropped != nil {
							f1valf3f1elem.SetDropped(*f1valf3f1iter.Dropped)
						}
						if f1valf3f1iter.FromPath != nil {
							f1valf3f1elemf1 := []*string{}
							for _, f1valf3f1elemf1iter := range f1valf3f1iter.FromPath {
								var f1valf3f1elemf1elem string
								f1valf3f1elemf1elem = *f1valf3f1elemf1iter
								f1valf3f1elemf1 = append(f1valf3f1elemf1, &f1valf3f1elemf1elem)
							}
							f1valf3f1elem.SetFromPath(f1valf3f1elemf1)
						}
						if f1valf3f1iter.FromType != nil {
							f1valf3f1elem.SetFromType(*f1valf3f1iter.FromType)
						}
						if f1valf3f1iter.ToKey != nil {
							f1valf3f1elem.SetToKey(*f1valf3f1iter.ToKey)
						}
						if f1valf3f1iter.ToType != nil {
							f1valf3f1elem.SetToType(*f1valf3f1iter.ToType)
						}
						f1valf3f1 = append(f1valf3f1, f1valf3f1elem)
					}
					f1valf3.SetMapping(f1valf3f1)
				}
				if f1valiter.ApplyMapping.Name != nil {
					f1valf3.SetName(*f1valiter.ApplyMapping.Name)
				}
				f1val.SetApplyMapping(f1valf3)
			}
			if f1valiter.AthenaConnectorSource != nil {
				f1valf4 := &svcsdk.AthenaConnectorSource{}
				if f1valiter.AthenaConnectorSource.ConnectionName != nil {
					f1valf4.SetConnectionName(*f1valiter.AthenaConnectorSource.ConnectionName)
				}
				if f1valiter.AthenaConnectorSource.ConnectionTable != nil {
					f1valf4.SetConnectionTable(*f1valiter.AthenaConnectorSource.ConnectionTable)
				}
				if f1valiter.AthenaConnectorSource.ConnectionType != nil {
					f1valf4.SetConnectionType(*f1valiter.AthenaConnectorSource.ConnectionType)
				}
				if f1valiter.AthenaConnectorSource.ConnectorName != nil {
					f1valf4.SetConnectorName(*f1valiter.AthenaConnectorSource.ConnectorName)
				}
				if f1valiter.AthenaConnectorSource.Name != nil {
					f1valf4.SetName(*f1valiter.AthenaConnectorSource.Name)
				}
				if f1valiter.AthenaConnectorSource.OutputSchemas != nil {
					f1valf4f5 := []*svcsdk.GlueSchema{}
					for _, f1valf4f5iter := range f1valiter.AthenaConnectorSource.OutputSchemas {
						f1valf4f5elem := &svcsdk.GlueSchema{}
						if f1valf4f5iter.Columns != nil {
							f1valf4f5elemf0 := []*svcsdk.GlueStudioSchemaColumn{}
							for _, f1valf4f5elemf0iter := range f1valf4f5iter.Columns {
								f1valf4f5elemf0elem := &svcsdk.GlueStudioSchemaColumn{}
								if f1valf4f5elemf0iter.Name != nil {
									f1valf4f5elemf0elem.SetName(*f1valf4f5elemf0iter.Name)
								}
								if f1valf4f5elemf0iter.Type != nil {
									f1valf4f5elemf0elem.SetType(*f1valf4f5elemf0iter.Type)
								}
								f1valf4f5elemf0 = append(f1valf4f5elemf0, f1valf4f5elemf0elem)
							}
							f1valf4f5elem.SetColumns(f1valf4f5elemf0)
						}
						f1valf4f5 = append(f1valf4f5, f1valf4f5elem)
					}
					f1valf4.SetOutputSchemas(f1valf4f5)
				}
				if f1valiter.AthenaConnectorSource.SchemaName != nil {
					f1valf4.SetSchemaName(*f1valiter.AthenaConnectorSource.SchemaName)
				}
				f1val.SetAthenaConnectorSource(f1valf4)
			}
			if f1valiter.CatalogDeltaSource != nil {
				f1valf5 := &svcsdk.CatalogDeltaSource{}
				if f1valiter.CatalogDeltaSource.AdditionalDeltaOptions != nil {
					f1valf5f0 := map[string]*string{}
					for f1valf5f0key, f1valf5f0valiter := range f1valiter.CatalogDeltaSource.AdditionalDeltaOptions {
						var f1valf5f0val string
						f1valf5f0val = *f1valf5f0valiter
						f1valf5f0[f1valf5f0key] = &f1valf5f0val
					}
					f1valf5.SetAdditionalDeltaOptions(f1valf5f0)
				}
				if f1valiter.CatalogDeltaSource.Database != nil {
					f1valf5.SetDatabase(*f1valiter.CatalogDeltaSource.Database)
				}
				if f1valiter.CatalogDeltaSource.Name != nil {
					f1valf5.SetName(*f1valiter.CatalogDeltaSource.Name)
				}
				if f1valiter.CatalogDeltaSource.OutputSchemas != nil {
					f1valf5f3 := []*svcsdk.GlueSchema{}
					for _, f1valf5f3iter := range f1valiter.CatalogDeltaSource.OutputSchemas {
						f1valf5f3elem := &svcsdk.GlueSchema{}
						if f1valf5f3iter.Columns != nil {
							f1valf5f3elemf0 := []*svcsdk.GlueStudioSchemaColumn{}
							for _, f1valf5f3elemf0iter := range f1valf5f3iter.Columns {
								f1valf5f3elemf0elem := &svcsdk.GlueStudioSchemaColumn{}
								if f1valf5f3elemf0iter.Name != nil {
									f1valf5f3elemf0elem.SetName(*f1valf5f3elemf0iter.Name)
								}
								if f1valf5f3elemf0iter.Type != nil {
									f1valf5f3elemf0elem.SetType(*f1valf5f3elemf0iter.Type)
								}
								f1valf5f3elemf0 = append(f1valf5f3elemf0, f1valf5f3elemf0elem)
							}
							f1valf5f3elem.SetColumns(f1valf5f3elemf0)
						}
						f1valf5f3 = append(f1valf5f3, f1valf5f3elem)
					}
					f1valf5.SetOutputSchemas(f1valf5f3)
				}
				if f1valiter.CatalogDeltaSource.Table != nil {
					f1valf5.SetTable(*f1valiter.CatalogDeltaSource.Table)
				}
				f1val.SetCatalogDeltaSource(f1valf5)
			}
			if f1valiter.CatalogHudiSource != nil {
				f1valf6 := &svcsdk.CatalogHudiSource{}
				if f1valiter.CatalogHudiSource.AdditionalHudiOptions != nil {
					f1valf6f0 := map[string]*string{}
					for f1valf6f0key, f1valf6f0valiter := range f1valiter.CatalogHudiSource.AdditionalHudiOptions {
						var f1valf6f0val string
						f1valf6f0val = *f1valf6f0valiter
						f1valf6f0[f1valf6f0key] = &f1valf6f0val
					}
					f1valf6.SetAdditionalHudiOptions(f1valf6f0)
				}
				if f1valiter.CatalogHudiSource.Database != nil {
					f1valf6.SetDatabase(*f1valiter.CatalogHudiSource.Database)
				}
				if f1valiter.CatalogHudiSource.Name != nil {
					f1valf6.SetName(*f1valiter.CatalogHudiSource.Name)
				}
				if f1valiter.CatalogHudiSource.OutputSchemas != nil {
					f1valf6f3 := []*svcsdk.GlueSchema{}
					for _, f1valf6f3iter := range f1valiter.CatalogHudiSource.OutputSchemas {
						f1valf6f3elem := &svcsdk.GlueSchema{}
						if f1valf6f3iter.Columns != nil {
							f1valf6f3elemf0 := []*svcsdk.GlueStudioSchemaColumn{}
							for _, f1valf6f3elemf0iter := range f1valf6f3iter.Columns {
								f1valf6f3elemf0elem := &svcsdk.GlueStudioSchemaColumn{}
								if f1valf6f3elemf0iter.Name != nil {
									f1valf6f3elemf0elem.SetName(*f1valf6f3elemf0iter.Name)
								}
								if f1valf6f3elemf0iter.Type != nil {
									f1valf6f3elemf0elem.SetType(*f1valf6f3elemf0iter.Type)
								}
								f1valf6f3elemf0 = append(f1valf6f3elemf0, f1valf6f3elemf0elem)
							}
							f1valf6f3elem.SetColumns(f1valf6f3elemf0)
						}
						f1valf6f3 = append(f1valf6f3, f1valf6f3elem)
					}
					f1valf6.SetOutputSchemas(f1valf6f3)
				}
				if f1valiter.CatalogHudiSource.Table != nil {
					f1valf6.SetTable(*f1valiter.CatalogHudiSource.Table)
				}
				f1val.SetCatalogHudiSource(f1valf6)
			}
			if f1valiter.CatalogKafkaSource != nil {
				f1valf7 := &svcsdk.CatalogKafkaSource{}
				if f1valiter.CatalogKafkaSource.DataPreviewOptions != nil {
					f1valf7f0 := &svcsdk.StreamingDataPreviewOptions{}
					if f1valiter.CatalogKafkaSource.DataPreviewOptions.PollingTime != nil {
						f1valf7f0.SetPollingTime(*f1valiter.CatalogKafkaSource.DataPreviewOptions.PollingTime)
					}
					if f1valiter.CatalogKafkaSource.DataPreviewOptions.RecordPollingLimit != nil {
						f1valf7f0.SetRecordPollingLimit(*f1valiter.CatalogKafkaSource.DataPreviewOptions.RecordPollingLimit)
					}
					f1valf7.SetDataPreviewOptions(f1valf7f0)
				}
				if f1valiter.CatalogKafkaSource.Database != nil {
					f1valf7.SetDatabase(*f1valiter.CatalogKafkaSource.Database)
				}
				if f1valiter.CatalogKafkaSource.DetectSchema != nil {
					f1valf7.SetDetectSchema(*f1valiter.CatalogKafkaSource.DetectSchema)
				}
				if f1valiter.CatalogKafkaSource.Name != nil {
					f1valf7.SetName(*f1valiter.CatalogKafkaSource.Name)
				}
				if f1valiter.CatalogKafkaSource.StreamingOptions != nil {
					f1valf7f4 := &svcsdk.KafkaStreamingSourceOptions{}
					if f1valiter.CatalogKafkaSource.StreamingOptions.AddRecordTimestamp != nil {
						f1valf7f4.SetAddRecordTimestamp(*f1valiter.CatalogKafkaSource.StreamingOptions.AddRecordTimestamp)
					}
					if f1valiter.CatalogKafkaSource.StreamingOptions.Assign != nil {
						f1valf7f4.SetAssign(*f1valiter.CatalogKafkaSource.StreamingOptions.Assign)
					}
					if f1valiter.CatalogKafkaSource.StreamingOptions.BootstrapServers != nil {
						f1valf7f4.SetBootstrapServers(*f1valiter.CatalogKafkaSource.StreamingOptions.BootstrapServers)
					}
					if f1valiter.CatalogKafkaSource.StreamingOptions.Classification != nil {
						f1valf7f4.SetClassification(*f1valiter.CatalogKafkaSource.StreamingOptions.Classification)
					}
					if f1valiter.CatalogKafkaSource.StreamingOptions.ConnectionName != nil {
						f1valf7f4.SetConnectionName(*f1valiter.CatalogKafkaSource.StreamingOptions.ConnectionName)
					}
					if f1valiter.CatalogKafkaSource.StreamingOptions.Delimiter != nil {
						f1valf7f4.SetDelimiter(*f1valiter.CatalogKafkaSource.StreamingOptions.Delimiter)
					}
					if f1valiter.CatalogKafkaSource.StreamingOptions.EmitConsumerLagMetrics != nil {
						f1valf7f4.SetEmitConsumerLagMetrics(*f1valiter.CatalogKafkaSource.StreamingOptions.EmitConsumerLagMetrics)
					}
					if f1valiter.CatalogKafkaSource.StreamingOptions.EndingOffsets != nil {
						f1valf7f4.SetEndingOffsets(*f1valiter.CatalogKafkaSource.StreamingOptions.EndingOffsets)
					}
					if f1valiter.CatalogKafkaSource.StreamingOptions.IncludeHeaders != nil {
						f1valf7f4.SetIncludeHeaders(*f1valiter.CatalogKafkaSource.StreamingOptions.IncludeHeaders)
					}
					if f1valiter.CatalogKafkaSource.StreamingOptions.MaxOffsetsPerTrigger != nil {
						f1valf7f4.SetMaxOffsetsPerTrigger(*f1valiter.CatalogKafkaSource.StreamingOptions.MaxOffsetsPerTrigger)
					}
					if f1valiter.CatalogKafkaSource.StreamingOptions.MinPartitions != nil {
						f1valf7f4.SetMinPartitions(*f1valiter.CatalogKafkaSource.StreamingOptions.MinPartitions)
					}
					if f1valiter.CatalogKafkaSource.StreamingOptions.NumRetries != nil {
						f1valf7f4.SetNumRetries(*f1valiter.CatalogKafkaSource.StreamingOptions.NumRetries)
					}
					if f1valiter.CatalogKafkaSource.StreamingOptions.PollTimeoutMs != nil {
						f1valf7f4.SetPollTimeoutMs(*f1valiter.CatalogKafkaSource.StreamingOptions.PollTimeoutMs)
					}
					if f1valiter.CatalogKafkaSource.StreamingOptions.RetryIntervalMs != nil {
						f1valf7f4.SetRetryIntervalMs(*f1valiter.CatalogKafkaSource.StreamingOptions.RetryIntervalMs)
					}
					if f1valiter.CatalogKafkaSource.StreamingOptions.SecurityProtocol != nil {
						f1valf7f4.SetSecurityProtocol(*f1valiter.CatalogKafkaSource.StreamingOptions.SecurityProtocol)
					}
					if f1valiter.CatalogKafkaSource.StreamingOptions.StartingOffsets != nil {
						f1valf7f4.SetStartingOffsets(*f1valiter.CatalogKafkaSource.StreamingOptions.StartingOffsets)
					}
					if f1valiter.CatalogKafkaSource.StreamingOptions.StartingTimestamp != nil {
						f1valf7f4.SetStartingTimestamp(f1valiter.CatalogKafkaSource.StreamingOptions.StartingTimestamp.Time)
					}
					if f1valiter.CatalogKafkaSource.StreamingOptions.SubscribePattern != nil {
						f1valf7f4.SetSubscribePattern(*f1valiter.CatalogKafkaSource.StreamingOptions.SubscribePattern)
					}
					if f1valiter.CatalogKafkaSource.StreamingOptions.TopicName != nil {
						f1valf7f4.SetTopicName(*f1valiter.CatalogKafkaSource.StreamingOptions.TopicName)
					}
					f1valf7.SetStreamingOptions(f1valf7f4)
				}
				if f1valiter.CatalogKafkaSource.Table != nil {
					f1valf7.SetTable(*f1valiter.CatalogKafkaSource.Table)
				}
				if f1valiter.CatalogKafkaSource.WindowSize != nil {
					f1valf7.SetWindowSize(*f1valiter.CatalogKafkaSource.WindowSize)
				}
				f1val.SetCatalogKafkaSource(f1valf7)
			}
			if f1valiter.CatalogKinesisSource != nil {
				f1valf8 := &svcsdk.CatalogKinesisSource{}
				if f1valiter.CatalogKinesisSource.DataPreviewOptions != nil {
					f1valf8f0 := &svcsdk.StreamingDataPreviewOptions{}
					if f1valiter.CatalogKinesisSource.DataPreviewOptions.PollingTime != nil {
						f1valf8f0.SetPollingTime(*f1valiter.CatalogKinesisSource.DataPreviewOptions.PollingTime)
					}
					if f1valiter.CatalogKinesisSource.DataPreviewOptions.RecordPollingLimit != nil {
						f1valf8f0.SetRecordPollingLimit(*f1valiter.CatalogKinesisSource.DataPreviewOptions.RecordPollingLimit)
					}
					f1valf8.SetDataPreviewOptions(f1valf8f0)
				}
				if f1valiter.CatalogKinesisSource.Database != nil {
					f1valf8.SetDatabase(*f1valiter.CatalogKinesisSource.Database)
				}
				if f1valiter.CatalogKinesisSource.DetectSchema != nil {
					f1valf8.SetDetectSchema(*f1valiter.CatalogKinesisSource.DetectSchema)
				}
				if f1valiter.CatalogKinesisSource.Name != nil {
					f1valf8.SetName(*f1valiter.CatalogKinesisSource.Name)
				}
				if f1valiter.CatalogKinesisSource.StreamingOptions != nil {
					f1valf8f4 := &svcsdk.KinesisStreamingSourceOptions{}
					if f1valiter.CatalogKinesisSource.StreamingOptions.AddIdleTimeBetweenReads != nil {
						f1valf8f4.SetAddIdleTimeBetweenReads(*f1valiter.CatalogKinesisSource.StreamingOptions.AddIdleTimeBetweenReads)
					}
					if f1valiter.CatalogKinesisSource.StreamingOptions.AddRecordTimestamp != nil {
						f1valf8f4.SetAddRecordTimestamp(*f1valiter.CatalogKinesisSource.StreamingOptions.AddRecordTimestamp)
					}
					if f1valiter.CatalogKinesisSource.StreamingOptions.AvoidEmptyBatches != nil {
						f1valf8f4.SetAvoidEmptyBatches(*f1valiter.CatalogKinesisSource.StreamingOptions.AvoidEmptyBatches)
					}
					if f1valiter.CatalogKinesisSource.StreamingOptions.Classification != nil {
						f1valf8f4.SetClassification(*f1valiter.CatalogKinesisSource.StreamingOptions.Classification)
					}
					if f1valiter.CatalogKinesisSource.StreamingOptions.Delimiter != nil {
						f1valf8f4.SetDelimiter(*f1valiter.CatalogKinesisSource.StreamingOptions.Delimiter)
					}
					if f1valiter.CatalogKinesisSource.StreamingOptions.DescribeShardInterval != nil {
						f1valf8f4.SetDescribeShardInterval(*f1valiter.CatalogKinesisSource.StreamingOptions.DescribeShardInterval)
					}
					if f1valiter.CatalogKinesisSource.StreamingOptions.EmitConsumerLagMetrics != nil {
						f1valf8f4.SetEmitConsumerLagMetrics(*f1valiter.CatalogKinesisSource.StreamingOptions.EmitConsumerLagMetrics)
					}
					if f1valiter.CatalogKinesisSource.StreamingOptions.EndpointURL != nil {
						f1valf8f4.SetEndpointUrl(*f1valiter.CatalogKinesisSource.StreamingOptions.EndpointURL)
					}
					if f1valiter.CatalogKinesisSource.StreamingOptions.IdleTimeBetweenReadsInMs != nil {
						f1valf8f4.SetIdleTimeBetweenReadsInMs(*f1valiter.CatalogKinesisSource.StreamingOptions.IdleTimeBetweenReadsInMs)
					}
					if f1valiter.CatalogKinesisSource.StreamingOptions.MaxFetchRecordsPerShard != nil {
						f1valf8f4.SetMaxFetchRecordsPerShard(*f1valiter.CatalogKinesisSource.StreamingOptions.MaxFetchRecordsPerShard)
					}
					if f1valiter.CatalogKinesisSource.StreamingOptions.MaxFetchTimeInMs != nil {
						f1valf8f4.SetMaxFetchTimeInMs(*f1valiter.CatalogKinesisSource.StreamingOptions.MaxFetchTimeInMs)
					}
					if f1valiter.CatalogKinesisSource.StreamingOptions.MaxRecordPerRead != nil {
						f1valf8f4.SetMaxRecordPerRead(*f1valiter.CatalogKinesisSource.StreamingOptions.MaxRecordPerRead)
					}
					if f1valiter.CatalogKinesisSource.StreamingOptions.MaxRetryIntervalMs != nil {
						f1valf8f4.SetMaxRetryIntervalMs(*f1valiter.CatalogKinesisSource.StreamingOptions.MaxRetryIntervalMs)
					}
					if f1valiter.CatalogKinesisSource.StreamingOptions.NumRetries != nil {
						f1valf8f4.SetNumRetries(*f1valiter.CatalogKinesisSource.StreamingOptions.NumRetries)
					}
					if f1valiter.CatalogKinesisSource.StreamingOptions.RetryIntervalMs != nil {
						f1valf8f4.SetRetryIntervalMs(*f1valiter.CatalogKinesisSource.StreamingOptions.RetryIntervalMs)
					}
					if f1valiter.CatalogKinesisSource.StreamingOptions.RoleARN != nil {
						f1valf8f4.SetRoleArn(*f1valiter.CatalogKinesisSource.StreamingOptions.RoleARN)
					}
					if f1valiter.CatalogKinesisSource.StreamingOptions.RoleSessionName != nil {
						f1valf8f4.SetRoleSessionName(*f1valiter.CatalogKinesisSource.StreamingOptions.RoleSessionName)
					}
					if f1valiter.CatalogKinesisSource.StreamingOptions.StartingPosition != nil {
						f1valf8f4.SetStartingPosition(*f1valiter.CatalogKinesisSource.StreamingOptions.StartingPosition)
					}
					if f1valiter.CatalogKinesisSource.StreamingOptions.StartingTimestamp != nil {
						f1valf8f4.SetStartingTimestamp(f1valiter.CatalogKinesisSource.StreamingOptions.StartingTimestamp.Time)
					}
					if f1valiter.CatalogKinesisSource.StreamingOptions.StreamARN != nil {
						f1valf8f4.SetStreamArn(*f1valiter.CatalogKinesisSource.StreamingOptions.StreamARN)
					}
					if f1valiter.CatalogKinesisSource.StreamingOptions.StreamName != nil {
						f1valf8f4.SetStreamName(*f1valiter.CatalogKinesisSource.StreamingOptions.StreamName)
					}
					f1valf8.SetStreamingOptions(f1valf8f4)
				}
				if f1valiter.CatalogKinesisSource.Table != nil {
					f1valf8.SetTable(*f1valiter.CatalogKinesisSource.Table)
				}
				if f1valiter.CatalogKinesisSource.WindowSize != nil {
					f1valf8.SetWindowSize(*f1valiter.CatalogKinesisSource.WindowSize)
				}
				f1val.SetCatalogKinesisSource(f1valf8)
			}
			if f1valiter.CatalogSource != nil {
				f1valf9 := &svcsdk.CatalogSource{}
				if f1valiter.CatalogSource.Database != nil {
					f1valf9.SetDatabase(*f1valiter.CatalogSource.Database)
				}
				if f1valiter.CatalogSource.Name != nil {
					f1valf9.SetName(*f1valiter.CatalogSource.Name)
				}
				if f1valiter.CatalogSource.Table != nil {
					f1valf9.SetTable(*f1valiter.CatalogSource.Table)
				}
				f1val.SetCatalogSource(f1valf9)
			}
			if f1valiter.CatalogTarget != nil {
				f1valf10 := &svcsdk.BasicCatalogTarget{}
				if f1valiter.CatalogTarget.Database != nil {
					f1valf10.SetDatabase(*f1valiter.CatalogTarget.Database)
				}
				if f1valiter.CatalogTarget.Inputs != nil {
					f1valf10f1 := []*string{}
					for _, f1valf10f1iter := range f1valiter.CatalogTarget.Inputs {
						var f1valf10f1elem string
						f1valf10f1elem = *f1valf10f1iter
						f1valf10f1 = append(f1valf10f1, &f1valf10f1elem)
					}
					f1valf10.SetInputs(f1valf10f1)
				}
				if f1valiter.CatalogTarget.Name != nil {
					f1valf10.SetName(*f1valiter.CatalogTarget.Name)
				}
				if f1valiter.CatalogTarget.Table != nil {
					f1valf10.SetTable(*f1valiter.CatalogTarget.Table)
				}
				f1val.SetCatalogTarget(f1valf10)
			}
			if f1valiter.ConnectorDataSource != nil {
				f1valf11 := &svcsdk.ConnectorDataSource{}
				if f1valiter.ConnectorDataSource.ConnectionType != nil {
					f1valf11.SetConnectionType(*f1valiter.ConnectorDataSource.ConnectionType)
				}
				if f1valiter.ConnectorDataSource.Data != nil {
					f1valf11f1 := map[string]*string{}
					for f1valf11f1key, f1valf11f1valiter := range f1valiter.ConnectorDataSource.Data {
						var f1valf11f1val string
						f1valf11f1val = *f1valf11f1valiter
						f1valf11f1[f1valf11f1key] = &f1valf11f1val
					}
					f1valf11.SetData(f1valf11f1)
				}
				if f1valiter.ConnectorDataSource.Name != nil {
					f1valf11.SetName(*f1valiter.ConnectorDataSource.Name)
				}
				if f1valiter.ConnectorDataSource.OutputSchemas != nil {
					f1valf11f3 := []*svcsdk.GlueSchema{}
					for _, f1valf11f3iter := range f1valiter.ConnectorDataSource.OutputSchemas {
						f1valf11f3elem := &svcsdk.GlueSchema{}
						if f1valf11f3iter.Columns != nil {
							f1valf11f3elemf0 := []*svcsdk.GlueStudioSchemaColumn{}
							for _, f1valf11f3elemf0iter := range f1valf11f3iter.Columns {
								f1valf11f3elemf0elem := &svcsdk.GlueStudioSchemaColumn{}
								if f1valf11f3elemf0iter.Name != nil {
									f1valf11f3elemf0elem.SetName(*f1valf11f3elemf0iter.Name)
								}
								if f1valf11f3elemf0iter.Type != nil {
									f1valf11f3elemf0elem.SetType(*f1valf11f3elemf0iter.Type)
								}
								f1valf11f3elemf0 = append(f1valf11f3elemf0, f1valf11f3elemf0elem)
							}
							f1valf11f3elem.SetColumns(f1valf11f3elemf0)
						}
						f1valf11f3 = append(f1valf11f3, f1valf11f3elem)
					}
					f1valf11.SetOutputSchemas(f1valf11f3)
				}
				f1val.SetConnectorDataSource(f1valf11)
			}
			if f1valiter.ConnectorDataTarget != nil {
				f1valf12 := &svcsdk.ConnectorDataTarget{}
				if f1valiter.ConnectorDataTarget.ConnectionType != nil {
					f1valf12.SetConnectionType(*f1valiter.ConnectorDataTarget.ConnectionType)
				}
				if f1valiter.ConnectorDataTarget.Data != nil {
					f1valf12f1 := map[string]*string{}
					for f1valf12f1key, f1valf12f1valiter := range f1valiter.ConnectorDataTarget.Data {
						var f1valf12f1val string
						f1valf12f1val = *f1valf12f1valiter
						f1valf12f1[f1valf12f1key] = &f1valf12f1val
					}
					f1valf12.SetData(f1valf12f1)
				}
				if f1valiter.ConnectorDataTarget.Inputs != nil {
					f1valf12f2 := []*string{}
					for _, f1valf12f2iter := range f1valiter.ConnectorDataTarget.Inputs {
						var f1valf12f2elem string
						f1valf12f2elem = *f1valf12f2iter
						f1valf12f2 = append(f1valf12f2, &f1valf12f2elem)
					}
					f1valf12.SetInputs(f1valf12f2)
				}
				if f1valiter.ConnectorDataTarget.Name != nil {
					f1valf12.SetName(*f1valiter.ConnectorDataTarget.Name)
				}
				f1val.SetConnectorDataTarget(f1valf12)
			}
			if f1valiter.CustomCode != nil {
				f1valf13 := &svcsdk.CustomCode{}
				if f1valiter.CustomCode.ClassName != nil {
					f1valf13.SetClassName(*f1valiter.CustomCode.ClassName)
				}
				if f1valiter.CustomCode.Code != nil {
					f1valf13.SetCode(*f1valiter.CustomCode.Code)
				}
				if f1valiter.CustomCode.Inputs != nil {
					f1valf13f2 := []*string{}
					for _, f1valf13f2iter := range f1valiter.CustomCode.Inputs {
						var f1valf13f2elem string
						f1valf13f2elem = *f1valf13f2iter
						f1valf13f2 = append(f1valf13f2, &f1valf13f2elem)
					}
					f1valf13.SetInputs(f1valf13f2)
				}
				if f1valiter.CustomCode.Name != nil {
					f1valf13.SetName(*f1valiter.CustomCode.Name)
				}
				if f1valiter.CustomCode.OutputSchemas != nil {
					f1valf13f4 := []*svcsdk.GlueSchema{}
					for _, f1valf13f4iter := range f1valiter.CustomCode.OutputSchemas {
						f1valf13f4elem := &svcsdk.GlueSchema{}
						if f1valf13f4iter.Columns != nil {
							f1valf13f4elemf0 := []*svcsdk.GlueStudioSchemaColumn{}
							for _, f1valf13f4elemf0iter := range f1valf13f4iter.Columns {
								f1valf13f4elemf0elem := &svcsdk.GlueStudioSchemaColumn{}
								if f1valf13f4elemf0iter.Name != nil {
									f1valf13f4elemf0elem.SetName(*f1valf13f4elemf0iter.Name)
								}
								if f1valf13f4elemf0iter.Type != nil {
									f1valf13f4elemf0elem.SetType(*f1valf13f4elemf0iter.Type)
								}
								f1valf13f4elemf0 = append(f1valf13f4elemf0, f1valf13f4elemf0elem)
							}
							f1valf13f4elem.SetColumns(f1valf13f4elemf0)
						}
						f1valf13f4 = append(f1valf13f4, f1valf13f4elem)
					}
					f1valf13.SetOutputSchemas(f1valf13f4)
				}
				f1val.SetCustomCode(f1valf13)
			}
			if f1valiter.DirectJDBCSource != nil {
				f1valf14 := &svcsdk.DirectJDBCSource{}
				if f1valiter.DirectJDBCSource.ConnectionName != nil {
					f1valf14.SetConnectionName(*f1valiter.DirectJDBCSource.ConnectionName)
				}
				if f1valiter.DirectJDBCSource.ConnectionType != nil {
					f1valf14.SetConnectionType(*f1valiter.DirectJDBCSource.ConnectionType)
				}
				if f1valiter.DirectJDBCSource.Database != nil {
					f1valf14.SetDatabase(*f1valiter.DirectJDBCSource.Database)
				}
				if f1valiter.DirectJDBCSource.Name != nil {
					f1valf14.SetName(*f1valiter.DirectJDBCSource.Name)
				}
				if f1valiter.DirectJDBCSource.RedshiftTmpDir != nil {
					f1valf14.SetRedshiftTmpDir(*f1valiter.DirectJDBCSource.RedshiftTmpDir)
				}
				if f1valiter.DirectJDBCSource.Table != nil {
					f1valf14.SetTable(*f1valiter.DirectJDBCSource.Table)
				}
				f1val.SetDirectJDBCSource(f1valf14)
			}
			if f1valiter.DirectKafkaSource != nil {
				f1valf15 := &svcsdk.DirectKafkaSource{}
				if f1valiter.DirectKafkaSource.DataPreviewOptions != nil {
					f1valf15f0 := &svcsdk.StreamingDataPreviewOptions{}
					if f1valiter.DirectKafkaSource.DataPreviewOptions.PollingTime != nil {
						f1valf15f0.SetPollingTime(*f1valiter.DirectKafkaSource.DataPreviewOptions.PollingTime)
					}
					if f1valiter.DirectKafkaSource.DataPreviewOptions.RecordPollingLimit != nil {
						f1valf15f0.SetRecordPollingLimit(*f1valiter.DirectKafkaSource.DataPreviewOptions.RecordPollingLimit)
					}
					f1valf15.SetDataPreviewOptions(f1valf15f0)
				}
				if f1valiter.DirectKafkaSource.DetectSchema != nil {
					f1valf15.SetDetectSchema(*f1valiter.DirectKafkaSource.DetectSchema)
				}
				if f1valiter.DirectKafkaSource.Name != nil {
					f1valf15.SetName(*f1valiter.DirectKafkaSource.Name)
				}
				if f1valiter.DirectKafkaSource.StreamingOptions != nil {
					f1valf15f3 := &svcsdk.KafkaStreamingSourceOptions{}
					if f1valiter.DirectKafkaSource.StreamingOptions.AddRecordTimestamp != nil {
						f1valf15f3.SetAddRecordTimestamp(*f1valiter.DirectKafkaSource.StreamingOptions.AddRecordTimestamp)
					}
					if f1valiter.DirectKafkaSource.StreamingOptions.Assign != nil {
						f1valf15f3.SetAssign(*f1valiter.DirectKafkaSource.StreamingOptions.Assign)
					}
					if f1valiter.DirectKafkaSource.StreamingOptions.BootstrapServers != nil {
						f1valf15f3.SetBootstrapServers(*f1valiter.DirectKafkaSource.StreamingOptions.BootstrapServers)
					}
					if f1valiter.DirectKafkaSource.StreamingOptions.Classification != nil {
						f1valf15f3.SetClassification(*f1valiter.DirectKafkaSource.StreamingOptions.Classification)
					}
					if f1valiter.DirectKafkaSource.StreamingOptions.ConnectionName != nil {
						f1valf15f3.SetConnectionName(*f1valiter.DirectKafkaSource.StreamingOptions.ConnectionName)
					}
					if f1valiter.DirectKafkaSource.StreamingOptions.Delimiter != nil {
						f1valf15f3.SetDelimiter(*f1valiter.DirectKafkaSource.StreamingOptions.Delimiter)
					}
					if f1valiter.DirectKafkaSource.StreamingOptions.EmitConsumerLagMetrics != nil {
						f1valf15f3.SetEmitConsumerLagMetrics(*f1valiter.DirectKafkaSource.StreamingOptions.EmitConsumerLagMetrics)
					}
					if f1valiter.DirectKafkaSource.StreamingOptions.EndingOffsets != nil {
						f1valf15f3.SetEndingOffsets(*f1valiter.DirectKafkaSource.StreamingOptions.EndingOffsets)
					}
					if f1valiter.DirectKafkaSource.StreamingOptions.IncludeHeaders != nil {
						f1valf15f3.SetIncludeHeaders(*f1valiter.DirectKafkaSource.StreamingOptions.IncludeHeaders)
					}
					if f1valiter.DirectKafkaSource.StreamingOptions.MaxOffsetsPerTrigger != nil {
						f1valf15f3.SetMaxOffsetsPerTrigger(*f1valiter.DirectKafkaSource.StreamingOptions.MaxOffsetsPerTrigger)
					}
					if f1valiter.DirectKafkaSource.StreamingOptions.MinPartitions != nil {
						f1valf15f3.SetMinPartitions(*f1valiter.DirectKafkaSource.StreamingOptions.MinPartitions)
					}
					if f1valiter.DirectKafkaSource.StreamingOptions.NumRetries != nil {
						f1valf15f3.SetNumRetries(*f1valiter.DirectKafkaSource.StreamingOptions.NumRetries)
					}
					if f1valiter.DirectKafkaSource.StreamingOptions.PollTimeoutMs != nil {
						f1valf15f3.SetPollTimeoutMs(*f1valiter.DirectKafkaSource.StreamingOptions.PollTimeoutMs)
					}
					if f1valiter.DirectKafkaSource.StreamingOptions.RetryIntervalMs != nil {
						f1valf15f3.SetRetryIntervalMs(*f1valiter.DirectKafkaSource.StreamingOptions.RetryIntervalMs)
					}
					if f1valiter.DirectKafkaSource.StreamingOptions.SecurityProtocol != nil {
						f1valf15f3.SetSecurityProtocol(*f1valiter.DirectKafkaSource.StreamingOptions.SecurityProtocol)
					}
					if f1valiter.DirectKafkaSource.StreamingOptions.StartingOffsets != nil {
						f1valf15f3.SetStartingOffsets(*f1valiter.DirectKafkaSource.StreamingOptions.StartingOffsets)
					}
					if f1valiter.DirectKafkaSource.StreamingOptions.StartingTimestamp != nil {
						f1valf15f3.SetStartingTimestamp(f1valiter.DirectKafkaSource.StreamingOptions.StartingTimestamp.Time)
					}
					if f1valiter.DirectKafkaSource.StreamingOptions.SubscribePattern != nil {
						f1valf15f3.SetSubscribePattern(*f1valiter.DirectKafkaSource.StreamingOptions.SubscribePattern)
					}
					if f1valiter.DirectKafkaSource.StreamingOptions.TopicName != nil {
						f1valf15f3.SetTopicName(*f1valiter.DirectKafkaSource.StreamingOptions.TopicName)
					}
					f1valf15.SetStreamingOptions(f1valf15f3)
				}
				if f1valiter.DirectKafkaSource.WindowSize != nil {
					f1valf15.SetWindowSize(*f1valiter.DirectKafkaSource.WindowSize)
				}
				f1val.SetDirectKafkaSource(f1valf15)
			}
			if f1valiter.DirectKinesisSource != nil {
				f1valf16 := &svcsdk.DirectKinesisSource{}
				if f1valiter.DirectKinesisSource.DataPreviewOptions != nil {
					f1valf16f0 := &svcsdk.StreamingDataPreviewOptions{}
					if f1valiter.DirectKinesisSource.DataPreviewOptions.PollingTime != nil {
						f1valf16f0.SetPollingTime(*f1valiter.DirectKinesisSource.DataPreviewOptions.PollingTime)
					}
					if f1valiter.DirectKinesisSource.DataPreviewOptions.RecordPollingLimit != nil {
						f1valf16f0.SetRecordPollingLimit(*f1valiter.DirectKinesisSource.DataPreviewOptions.RecordPollingLimit)
					}
					f1valf16.SetDataPreviewOptions(f1valf16f0)
				}
				if f1valiter.DirectKinesisSource.DetectSchema != nil {
					f1valf16.SetDetectSchema(*f1valiter.DirectKinesisSource.DetectSchema)
				}
				if f1valiter.DirectKinesisSource.Name != nil {
					f1valf16.SetName(*f1valiter.DirectKinesisSource.Name)
				}
				if f1valiter.DirectKinesisSource.StreamingOptions != nil {
					f1valf16f3 := &svcsdk.KinesisStreamingSourceOptions{}
					if f1valiter.DirectKinesisSource.StreamingOptions.AddIdleTimeBetweenReads != nil {
						f1valf16f3.SetAddIdleTimeBetweenReads(*f1valiter.DirectKinesisSource.StreamingOptions.AddIdleTimeBetweenReads)
					}
					if f1valiter.DirectKinesisSource.StreamingOptions.AddRecordTimestamp != nil {
						f1valf16f3.SetAddRecordTimestamp(*f1valiter.DirectKinesisSource.StreamingOptions.AddRecordTimestamp)
					}
					if f1valiter.DirectKinesisSource.StreamingOptions.AvoidEmptyBatches != nil {
						f1valf16f3.SetAvoidEmptyBatches(*f1valiter.DirectKinesisSource.StreamingOptions.AvoidEmptyBatches)
					}
					if f1valiter.DirectKinesisSource.StreamingOptions.Classification != nil {
						f1valf16f3.SetClassification(*f1valiter.DirectKinesisSource.StreamingOptions.Classification)
					}
					if f1valiter.DirectKinesisSource.StreamingOptions.Delimiter != nil {
						f1valf16f3.SetDelimiter(*f1valiter.DirectKinesisSource.StreamingOptions.Delimiter)
					}
					if f1valiter.DirectKinesisSource.StreamingOptions.DescribeShardInterval != nil {
						f1valf16f3.SetDescribeShardInterval(*f1valiter.DirectKinesisSource.StreamingOptions.DescribeShardInterval)
					}
					if f1valiter.DirectKinesisSource.StreamingOptions.EmitConsumerLagMetrics != nil {
						f1valf16f3.SetEmitConsumerLagMetrics(*f1valiter.DirectKinesisSource.StreamingOptions.EmitConsumerLagMetrics)
					}
					if f1valiter.DirectKinesisSource.StreamingOptions.EndpointURL != nil {
						f1valf16f3.SetEndpointUrl(*f1valiter.DirectKinesisSource.StreamingOptions.EndpointURL)
					}
					if f1valiter.DirectKinesisSource.StreamingOptions.IdleTimeBetweenReadsInMs != nil {
						f1valf16f3.SetIdleTimeBetweenReadsInMs(*f1valiter.DirectKinesisSource.StreamingOptions.IdleTimeBetweenReadsInMs)
					}
					if f1valiter.DirectKinesisSource.StreamingOptions.MaxFetchRecordsPerShard != nil {
						f1valf16f3.SetMaxFetchRecordsPerShard(*f1valiter.DirectKinesisSource.StreamingOptions.MaxFetchRecordsPerShard)
					}
					if f1valiter.DirectKinesisSource.StreamingOptions.MaxFetchTimeInMs != nil {
						f1valf16f3.SetMaxFetchTimeInMs(*f1valiter.DirectKinesisSource.StreamingOptions.MaxFetchTimeInMs)
					}
					if f1valiter.DirectKinesisSource.StreamingOptions.MaxRecordPerRead != nil {
						f1valf16f3.SetMaxRecordPerRead(*f1valiter.DirectKinesisSource.StreamingOptions.MaxRecordPerRead)
					}
					if f1valiter.DirectKinesisSource.StreamingOptions.MaxRetryIntervalMs != nil {
						f1valf16f3.SetMaxRetryIntervalMs(*f1valiter.DirectKinesisSource.StreamingOptions.MaxRetryIntervalMs)
					}
					if f1valiter.DirectKinesisSource.StreamingOptions.NumRetries != nil {
						f1valf16f3.SetNumRetries(*f1valiter.DirectKinesisSource.StreamingOptions.NumRetries)
					}
					if f1valiter.DirectKinesisSource.StreamingOptions.RetryIntervalMs != nil {
						f1valf16f3.SetRetryIntervalMs(*f1valiter.DirectKinesisSource.StreamingOptions.RetryIntervalMs)
					}
					if f1valiter.DirectKinesisSource.StreamingOptions.RoleARN != nil {
						f1valf16f3.SetRoleArn(*f1valiter.DirectKinesisSource.StreamingOptions.RoleARN)
					}
					if f1valiter.DirectKinesisSource.StreamingOptions.RoleSessionName != nil {
						f1valf16f3.SetRoleSessionName(*f1valiter.DirectKinesisSource.StreamingOptions.RoleSessionName)
					}
					if f1valiter.DirectKinesisSource.StreamingOptions.StartingPosition != nil {
						f1valf16f3.SetStartingPosition(*f1valiter.DirectKinesisSource.StreamingOptions.StartingPosition)
					}
					if f1valiter.DirectKinesisSource.StreamingOptions.StartingTimestamp != nil {
						f1valf16f3.SetStartingTimestamp(f1valiter.DirectKinesisSource.StreamingOptions.StartingTimestamp.Time)
					}
					if f1valiter.DirectKinesisSource.StreamingOptions.StreamARN != nil {
						f1valf16f3.SetStreamArn(*f1valiter.DirectKinesisSource.StreamingOptions.StreamARN)
					}
					if f1valiter.DirectKinesisSource.StreamingOptions.StreamName != nil {
						f1valf16f3.SetStreamName(*f1valiter.DirectKinesisSource.StreamingOptions.StreamName)
					}
					f1valf16.SetStreamingOptions(f1valf16f3)
				}
				if f1valiter.DirectKinesisSource.WindowSize != nil {
					f1valf16.SetWindowSize(*f1valiter.DirectKinesisSource.WindowSize)
				}
				f1val.SetDirectKinesisSource(f1valf16)
			}
			if f1valiter.DropDuplicates != nil {
				f1valf17 := &svcsdk.DropDuplicates{}
				if f1valiter.DropDuplicates.Columns != nil {
					f1valf17f0 := [][]*string{}
					for _, f1valf17f0iter := range f1valiter.DropDuplicates.Columns {
						f1valf17f0elem := []*string{}
						for _, f1valf17f0elemiter := range f1valf17f0iter {
							var f1valf17f0elemelem string
							f1valf17f0elemelem = *f1valf17f0elemiter
							f1valf17f0elem = append(f1valf17f0elem, &f1valf17f0elemelem)
						}
						f1valf17f0 = append(f1valf17f0, f1valf17f0elem)
					}
					f1valf17.SetColumns(f1valf17f0)
				}
				if f1valiter.DropDuplicates.Inputs != nil {
					f1valf17f1 := []*string{}
					for _, f1valf17f1iter := range f1valiter.DropDuplicates.Inputs {
						var f1valf17f1elem string
						f1valf17f1elem = *f1valf17f1iter
						f1valf17f1 = append(f1valf17f1, &f1valf17f1elem)
					}
					f1valf17.SetInputs(f1valf17f1)
				}
				if f1valiter.DropDuplicates.Name != nil {
					f1valf17.SetName(*f1valiter.DropDuplicates.Name)
				}
				f1val.SetDropDuplicates(f1valf17)
			}
			if f1valiter.DropFields != nil {
				f1valf18 := &svcsdk.DropFields{}
				if f1valiter.DropFields.Inputs != nil {
					f1valf18f0 := []*string{}
					for _, f1valf18f0iter := range f1valiter.DropFields.Inputs {
						var f1valf18f0elem string
						f1valf18f0elem = *f1valf18f0iter
						f1valf18f0 = append(f1valf18f0, &f1valf18f0elem)
					}
					f1valf18.SetInputs(f1valf18f0)
				}
				if f1valiter.DropFields.Name != nil {
					f1valf18.SetName(*f1valiter.DropFields.Name)
				}
				if f1valiter.DropFields.Paths != nil {
					f1valf18f2 := [][]*string{}
					for _, f1valf18f2iter := range f1valiter.DropFields.Paths {
						f1valf18f2elem := []*string{}
						for _, f1valf18f2elemiter := range f1valf18f2iter {
							var f1valf18f2elemelem string
							f1valf18f2elemelem = *f1valf18f2elemiter
							f1valf18f2elem = append(f1valf18f2elem, &f1valf18f2elemelem)
						}
						f1valf18f2 = append(f1valf18f2, f1valf18f2elem)
					}
					f1valf18.SetPaths(f1valf18f2)
				}
				f1val.SetDropFields(f1valf18)
			}
			if f1valiter.DropNullFields != nil {
				f1valf19 := &svcsdk.DropNullFields{}
				if f1valiter.DropNullFields.Inputs != nil {
					f1valf19f0 := []*string{}
					for _, f1valf19f0iter := range f1valiter.DropNullFields.Inputs {
						var f1valf19f0elem string
						f1valf19f0elem = *f1valf19f0iter
						f1valf19f0 = append(f1valf19f0, &f1valf19f0elem)
					}
					f1valf19.SetInputs(f1valf19f0)
				}
				if f1valiter.DropNullFields.Name != nil {
					f1valf19.SetName(*f1valiter.DropNullFields.Name)
				}
				if f1valiter.DropNullFields.NullCheckBoxList != nil {
					f1valf19f2 := &svcsdk.NullCheckBoxList{}
					if f1valiter.DropNullFields.NullCheckBoxList.IsEmpty != nil {
						f1valf19f2.SetIsEmpty(*f1valiter.DropNullFields.NullCheckBoxList.IsEmpty)
					}
					if f1valiter.DropNullFields.NullCheckBoxList.IsNegOne != nil {
						f1valf19f2.SetIsNegOne(*f1valiter.DropNullFields.NullCheckBoxList.IsNegOne)
					}
					if f1valiter.DropNullFields.NullCheckBoxList.IsNullString != nil {
						f1valf19f2.SetIsNullString(*f1valiter.DropNullFields.NullCheckBoxList.IsNullString)
					}
					f1valf19.SetNullCheckBoxList(f1valf19f2)
				}
				if f1valiter.DropNullFields.NullTextList != nil {
					f1valf19f3 := []*svcsdk.NullValueField{}
					for _, f1valf19f3iter := range f1valiter.DropNullFields.NullTextList {
						f1valf19f3elem := &svcsdk.NullValueField{}
						if f1valf19f3iter.Datatype != nil {
							f1valf19f3elemf0 := &svcsdk.Datatype{}
							if f1valf19f3iter.Datatype.ID != nil {
								f1valf19f3elemf0.SetId(*f1valf19f3iter.Datatype.ID)
							}
							if f1valf19f3iter.Datatype.Label != nil {
								f1valf19f3elemf0.SetLabel(*f1valf19f3iter.Datatype.Label)
							}
							f1valf19f3elem.SetDatatype(f1valf19f3elemf0)
						}
						if f1valf19f3iter.Value != nil {
							f1valf19f3elem.SetValue(*f1valf19f3iter.Value)
						}
						f1valf19f3 = append(f1valf19f3, f1valf19f3elem)
					}
					f1valf19.SetNullTextList(f1valf19f3)
				}
				f1val.SetDropNullFields(f1valf19)
			}
			if f1valiter.DynamicTransform != nil {
				f1valf20 := &svcsdk.DynamicTransform{}
				if f1valiter.DynamicTransform.FunctionName != nil {
					f1valf20.SetFunctionName(*f1valiter.DynamicTransform.FunctionName)
				}
				if f1valiter.DynamicTransform.Inputs != nil {
					f1valf20f1 := []*string{}
					for _, f1valf20f1iter := range f1valiter.DynamicTransform.Inputs {
						var f1valf20f1elem string
						f1valf20f1elem = *f1valf20f1iter
						f1valf20f1 = append(f1valf20f1, &f1valf20f1elem)
					}
					f1valf20.SetInputs(f1valf20f1)
				}
				if f1valiter.DynamicTransform.Name != nil {
					f1valf20.SetName(*f1valiter.DynamicTransform.Name)
				}
				if f1valiter.DynamicTransform.OutputSchemas != nil {
					f1valf20f3 := []*svcsdk.GlueSchema{}
					for _, f1valf20f3iter := range f1valiter.DynamicTransform.OutputSchemas {
						f1valf20f3elem := &svcsdk.GlueSchema{}
						if f1valf20f3iter.Columns != nil {
							f1valf20f3elemf0 := []*svcsdk.GlueStudioSchemaColumn{}
							for _, f1valf20f3elemf0iter := range f1valf20f3iter.Columns {
								f1valf20f3elemf0elem := &svcsdk.GlueStudioSchemaColumn{}
								if f1valf20f3elemf0iter.Name != nil {
									f1valf20f3elemf0elem.SetName(*f1valf20f3elemf0iter.Name)
								}
								if f1valf20f3elemf0iter.Type != nil {
									f1valf20f3elemf0elem.SetType(*f1valf20f3elemf0iter.Type)
								}
								f1valf20f3elemf0 = append(f1valf20f3elemf0, f1valf20f3elemf0elem)
							}
							f1valf20f3elem.SetColumns(f1valf20f3elemf0)
						}
						f1valf20f3 = append(f1valf20f3, f1valf20f3elem)
					}
					f1valf20.SetOutputSchemas(f1valf20f3)
				}
				if f1valiter.DynamicTransform.Parameters != nil {
					f1valf20f4 := []*svcsdk.TransformConfigParameter{}
					for _, f1valf20f4iter := range f1valiter.DynamicTransform.Parameters {
						f1valf20f4elem := &svcsdk.TransformConfigParameter{}
						if f1valf20f4iter.IsOptional != nil {
							f1valf20f4elem.SetIsOptional(*f1valf20f4iter.IsOptional)
						}
						if f1valf20f4iter.ListType != nil {
							f1valf20f4elem.SetListType(*f1valf20f4iter.ListType)
						}
						if f1valf20f4iter.Name != nil {
							f1valf20f4elem.SetName(*f1valf20f4iter.Name)
						}
						if f1valf20f4iter.Type != nil {
							f1valf20f4elem.SetType(*f1valf20f4iter.Type)
						}
						if f1valf20f4iter.ValidationMessage != nil {
							f1valf20f4elem.SetValidationMessage(*f1valf20f4iter.ValidationMessage)
						}
						if f1valf20f4iter.ValidationRule != nil {
							f1valf20f4elem.SetValidationRule(*f1valf20f4iter.ValidationRule)
						}
						if f1valf20f4iter.Value != nil {
							f1valf20f4elemf6 := []*string{}
							for _, f1valf20f4elemf6iter := range f1valf20f4iter.Value {
								var f1valf20f4elemf6elem string
								f1valf20f4elemf6elem = *f1valf20f4elemf6iter
								f1valf20f4elemf6 = append(f1valf20f4elemf6, &f1valf20f4elemf6elem)
							}
							f1valf20f4elem.SetValue(f1valf20f4elemf6)
						}
						f1valf20f4 = append(f1valf20f4, f1valf20f4elem)
					}
					f1valf20.SetParameters(f1valf20f4)
				}
				if f1valiter.DynamicTransform.Path != nil {
					f1valf20.SetPath(*f1valiter.DynamicTransform.Path)
				}
				if f1valiter.DynamicTransform.TransformName != nil {
					f1valf20.SetTransformName(*f1valiter.DynamicTransform.TransformName)
				}
				if f1valiter.DynamicTransform.Version != nil {
					f1valf20.SetVersion(*f1valiter.DynamicTransform.Version)
				}
				f1val.SetDynamicTransform(f1valf20)
			}
			if f1valiter.DynamoDBCatalogSource != nil {
				f1valf21 := &svcsdk.DynamoDBCatalogSource{}
				if f1valiter.DynamoDBCatalogSource.Database != nil {
					f1valf21.SetDatabase(*f1valiter.DynamoDBCatalogSource.Database)
				}
				if f1valiter.DynamoDBCatalogSource.Name != nil {
					f1valf21.SetName(*f1valiter.DynamoDBCatalogSource.Name)
				}
				if f1valiter.DynamoDBCatalogSource.Table != nil {
					f1valf21.SetTable(*f1valiter.DynamoDBCatalogSource.Table)
				}
				f1val.SetDynamoDBCatalogSource(f1valf21)
			}
			if f1valiter.EvaluateDataQuality != nil {
				f1valf22 := &svcsdk.EvaluateDataQuality{}
				if f1valiter.EvaluateDataQuality.Inputs != nil {
					f1valf22f0 := []*string{}
					for _, f1valf22f0iter := range f1valiter.EvaluateDataQuality.Inputs {
						var f1valf22f0elem string
						f1valf22f0elem = *f1valf22f0iter
						f1valf22f0 = append(f1valf22f0, &f1valf22f0elem)
					}
					f1valf22.SetInputs(f1valf22f0)
				}
				if f1valiter.EvaluateDataQuality.Name != nil {
					f1valf22.SetName(*f1valiter.EvaluateDataQuality.Name)
				}
				if f1valiter.EvaluateDataQuality.Output != nil {
					f1valf22.SetOutput(*f1valiter.EvaluateDataQuality.Output)
				}
				if f1valiter.EvaluateDataQuality.PublishingOptions != nil {
					f1valf22f3 := &svcsdk.DQResultsPublishingOptions{}
					if f1valiter.EvaluateDataQuality.PublishingOptions.CloudWatchMetricsEnabled != nil {
						f1valf22f3.SetCloudWatchMetricsEnabled(*f1valiter.EvaluateDataQuality.PublishingOptions.CloudWatchMetricsEnabled)
					}
					if f1valiter.EvaluateDataQuality.PublishingOptions.EvaluationContext != nil {
						f1valf22f3.SetEvaluationContext(*f1valiter.EvaluateDataQuality.PublishingOptions.EvaluationContext)
					}
					if f1valiter.EvaluateDataQuality.PublishingOptions.ResultsPublishingEnabled != nil {
						f1valf22f3.SetResultsPublishingEnabled(*f1valiter.EvaluateDataQuality.PublishingOptions.ResultsPublishingEnabled)
					}
					if f1valiter.EvaluateDataQuality.PublishingOptions.ResultsS3Prefix != nil {
						f1valf22f3.SetResultsS3Prefix(*f1valiter.EvaluateDataQuality.PublishingOptions.ResultsS3Prefix)
					}
					f1valf22.SetPublishingOptions(f1valf22f3)
				}
				if f1valiter.EvaluateDataQuality.Ruleset != nil {
					f1valf22.SetRuleset(*f1valiter.EvaluateDataQuality.Ruleset)
				}
				if f1valiter.EvaluateDataQuality.StopJobOnFailureOptions != nil {
					f1valf22f5 := &svcsdk.DQStopJobOnFailureOptions{}
					if f1valiter.EvaluateDataQuality.StopJobOnFailureOptions.StopJobOnFailureTiming != nil {
						f1valf22f5.SetStopJobOnFailureTiming(*f1valiter.EvaluateDataQuality.StopJobOnFailureOptions.StopJobOnFailureTiming)
					}
					f1valf22.SetStopJobOnFailureOptions(f1valf22f5)
				}
				f1val.SetEvaluateDataQuality(f1valf22)
			}
			if f1valiter.EvaluateDataQualityMultiFrame != nil {
				f1valf23 := &svcsdk.EvaluateDataQualityMultiFrame{}
				if f1valiter.EvaluateDataQualityMultiFrame.AdditionalDataSources != nil {
					f1valf23f0 := map[string]*string{}
					for f1valf23f0key, f1valf23f0valiter := range f1valiter.EvaluateDataQualityMultiFrame.AdditionalDataSources {
						var f1valf23f0val string
						f1valf23f0val = *f1valf23f0valiter
						f1valf23f0[f1valf23f0key] = &f1valf23f0val
					}
					f1valf23.SetAdditionalDataSources(f1valf23f0)
				}
				if f1valiter.EvaluateDataQualityMultiFrame.AdditionalOptions != nil {
					f1valf23f1 := map[string]*string{}
					for f1valf23f1key, f1valf23f1valiter := range f1valiter.EvaluateDataQualityMultiFrame.AdditionalOptions {
						var f1valf23f1val string
						f1valf23f1val = *f1valf23f1valiter
						f1valf23f1[f1valf23f1key] = &f1valf23f1val
					}
					f1valf23.SetAdditionalOptions(f1valf23f1)
				}
				if f1valiter.EvaluateDataQualityMultiFrame.Inputs != nil {
					f1valf23f2 := []*string{}
					for _, f1valf23f2iter := range f1valiter.EvaluateDataQualityMultiFrame.Inputs {
						var f1valf23f2elem string
						f1valf23f2elem = *f1valf23f2iter
						f1valf23f2 = append(f1valf23f2, &f1valf23f2elem)
					}
					f1valf23.SetInputs(f1valf23f2)
				}
				if f1valiter.EvaluateDataQualityMultiFrame.Name != nil {
					f1valf23.SetName(*f1valiter.EvaluateDataQualityMultiFrame.Name)
				}
				if f1valiter.EvaluateDataQualityMultiFrame.PublishingOptions != nil {
					f1valf23f4 := &svcsdk.DQResultsPublishingOptions{}
					if f1valiter.EvaluateDataQualityMultiFrame.PublishingOptions.CloudWatchMetricsEnabled != nil {
						f1valf23f4.SetCloudWatchMetricsEnabled(*f1valiter.EvaluateDataQualityMultiFrame.PublishingOptions.CloudWatchMetricsEnabled)
					}
					if f1valiter.EvaluateDataQualityMultiFrame.PublishingOptions.EvaluationContext != nil {
						f1valf23f4.SetEvaluationContext(*f1valiter.EvaluateDataQualityMultiFrame.PublishingOptions.EvaluationContext)
					}
					if f1valiter.EvaluateDataQualityMultiFrame.PublishingOptions.ResultsPublishingEnabled != nil {
						f1valf23f4.SetResultsPublishingEnabled(*f1valiter.EvaluateDataQualityMultiFrame.PublishingOptions.ResultsPublishingEnabled)
					}
					if f1valiter.EvaluateDataQualityMultiFrame.PublishingOptions.ResultsS3Prefix != nil {
						f1valf23f4.SetResultsS3Prefix(*f1valiter.EvaluateDataQualityMultiFrame.PublishingOptions.ResultsS3Prefix)
					}
					f1valf23.SetPublishingOptions(f1valf23f4)
				}
				if f1valiter.EvaluateDataQualityMultiFrame.Ruleset != nil {
					f1valf23.SetRuleset(*f1valiter.EvaluateDataQualityMultiFrame.Ruleset)
				}
				if f1valiter.EvaluateDataQualityMultiFrame.StopJobOnFailureOptions != nil {
					f1valf23f6 := &svcsdk.DQStopJobOnFailureOptions{}
					if f1valiter.EvaluateDataQualityMultiFrame.StopJobOnFailureOptions.StopJobOnFailureTiming != nil {
						f1valf23f6.SetStopJobOnFailureTiming(*f1valiter.EvaluateDataQualityMultiFrame.StopJobOnFailureOptions.StopJobOnFailureTiming)
					}
					f1valf23.SetStopJobOnFailureOptions(f1valf23f6)
				}
				f1val.SetEvaluateDataQualityMultiFrame(f1valf23)
			}
			if f1valiter.FillMissingValues != nil {
				f1valf24 := &svcsdk.FillMissingValues{}
				if f1valiter.FillMissingValues.FilledPath != nil {
					f1valf24.SetFilledPath(*f1valiter.FillMissingValues.FilledPath)
				}
				if f1valiter.FillMissingValues.ImputedPath != nil {
					f1valf24.SetImputedPath(*f1valiter.FillMissingValues.ImputedPath)
				}
				if f1valiter.FillMissingValues.Inputs != nil {
					f1valf24f2 := []*string{}
					for _, f1valf24f2iter := range f1valiter.FillMissingValues.Inputs {
						var f1valf24f2elem string
						f1valf24f2elem = *f1valf24f2iter
						f1valf24f2 = append(f1valf24f2, &f1valf24f2elem)
					}
					f1valf24.SetInputs(f1valf24f2)
				}
				if f1valiter.FillMissingValues.Name != nil {
					f1valf24.SetName(*f1valiter.FillMissingValues.Name)
				}
				f1val.SetFillMissingValues(f1valf24)
			}
			if f1valiter.Filter != nil {
				f1valf25 := &svcsdk.Filter{}
				if f1valiter.Filter.Filters != nil {
					f1valf25f0 := []*svcsdk.FilterExpression{}
					for _, f1valf25f0iter := range f1valiter.Filter.Filters {
						f1valf25f0elem := &svcsdk.FilterExpression{}
						if f1valf25f0iter.Negated != nil {
							f1valf25f0elem.SetNegated(*f1valf25f0iter.Negated)
						}
						if f1valf25f0iter.Operation != nil {
							f1valf25f0elem.SetOperation(*f1valf25f0iter.Operation)
						}
						if f1valf25f0iter.Values != nil {
							f1valf25f0elemf2 := []*svcsdk.FilterValue{}
							for _, f1valf25f0elemf2iter := range f1valf25f0iter.Values {
								f1valf25f0elemf2elem := &svcsdk.FilterValue{}
								if f1valf25f0elemf2iter.Type != nil {
									f1valf25f0elemf2elem.SetType(*f1valf25f0elemf2iter.Type)
								}
								if f1valf25f0elemf2iter.Value != nil {
									f1valf25f0elemf2elemf1 := []*string{}
									for _, f1valf25f0elemf2elemf1iter := range f1valf25f0elemf2iter.Value {
										var f1valf25f0elemf2elemf1elem string
										f1valf25f0elemf2elemf1elem = *f1valf25f0elemf2elemf1iter
										f1valf25f0elemf2elemf1 = append(f1valf25f0elemf2elemf1, &f1valf25f0elemf2elemf1elem)
									}
									f1valf25f0elemf2elem.SetValue(f1valf25f0elemf2elemf1)
								}
								f1valf25f0elemf2 = append(f1valf25f0elemf2, f1valf25f0elemf2elem)
							}
							f1valf25f0elem.SetValues(f1valf25f0elemf2)
						}
						f1valf25f0 = append(f1valf25f0, f1valf25f0elem)
					}
					f1valf25.SetFilters(f1valf25f0)
				}
				if f1valiter.Filter.Inputs != nil {
					f1valf25f1 := []*string{}
					for _, f1valf25f1iter := range f1valiter.Filter.Inputs {
						var f1valf25f1elem string
						f1valf25f1elem = *f1valf25f1iter
						f1valf25f1 = append(f1valf25f1, &f1valf25f1elem)
					}
					f1valf25.SetInputs(f1valf25f1)
				}
				if f1valiter.Filter.LogicalOperator != nil {
					f1valf25.SetLogicalOperator(*f1valiter.Filter.LogicalOperator)
				}
				if f1valiter.Filter.Name != nil {
					f1valf25.SetName(*f1valiter.Filter.Name)
				}
				f1val.SetFilter(f1valf25)
			}
			if f1valiter.GovernedCatalogSource != nil {
				f1valf26 := &svcsdk.GovernedCatalogSource{}
				if f1valiter.GovernedCatalogSource.AdditionalOptions != nil {
					f1valf26f0 := &svcsdk.S3SourceAdditionalOptions{}
					if f1valiter.GovernedCatalogSource.AdditionalOptions.BoundedFiles != nil {
						f1valf26f0.SetBoundedFiles(*f1valiter.GovernedCatalogSource.AdditionalOptions.BoundedFiles)
					}
					if f1valiter.GovernedCatalogSource.AdditionalOptions.BoundedSize != nil {
						f1valf26f0.SetBoundedSize(*f1valiter.GovernedCatalogSource.AdditionalOptions.BoundedSize)
					}
					f1valf26.SetAdditionalOptions(f1valf26f0)
				}
				if f1valiter.GovernedCatalogSource.Database != nil {
					f1valf26.SetDatabase(*f1valiter.GovernedCatalogSource.Database)
				}
				if f1valiter.GovernedCatalogSource.Name != nil {
					f1valf26.SetName(*f1valiter.GovernedCatalogSource.Name)
				}
				if f1valiter.GovernedCatalogSource.PartitionPredicate != nil {
					f1valf26.SetPartitionPredicate(*f1valiter.GovernedCatalogSource.PartitionPredicate)
				}
				if f1valiter.GovernedCatalogSource.Table != nil {
					f1valf26.SetTable(*f1valiter.GovernedCatalogSource.Table)
				}
				f1val.SetGovernedCatalogSource(f1valf26)
			}
			if f1valiter.GovernedCatalogTarget != nil {
				f1valf27 := &svcsdk.GovernedCatalogTarget{}
				if f1valiter.GovernedCatalogTarget.Database != nil {
					f1valf27.SetDatabase(*f1valiter.GovernedCatalogTarget.Database)
				}
				if f1valiter.GovernedCatalogTarget.Inputs != nil {
					f1valf27f1 := []*string{}
					for _, f1valf27f1iter := range f1valiter.GovernedCatalogTarget.Inputs {
						var f1valf27f1elem string
						f1valf27f1elem = *f1valf27f1iter
						f1valf27f1 = append(f1valf27f1, &f1valf27f1elem)
					}
					f1valf27.SetInputs(f1valf27f1)
				}
				if f1valiter.GovernedCatalogTarget.Name != nil {
					f1valf27.SetName(*f1valiter.GovernedCatalogTarget.Name)
				}
				if f1valiter.GovernedCatalogTarget.PartitionKeys != nil {
					f1valf27f3 := [][]*string{}
					for _, f1valf27f3iter := range f1valiter.GovernedCatalogTarget.PartitionKeys {
						f1valf27f3elem := []*string{}
						for _, f1valf27f3elemiter := range f1valf27f3iter {
							var f1valf27f3elemelem string
							f1valf27f3elemelem = *f1valf27f3elemiter
							f1valf27f3elem = append(f1valf27f3elem, &f1valf27f3elemelem)
						}
						f1valf27f3 = append(f1valf27f3, f1valf27f3elem)
					}
					f1valf27.SetPartitionKeys(f1valf27f3)
				}
				if f1valiter.GovernedCatalogTarget.SchemaChangePolicy != nil {
					f1valf27f4 := &svcsdk.CatalogSchemaChangePolicy{}
					if f1valiter.GovernedCatalogTarget.SchemaChangePolicy.EnableUpdateCatalog != nil {
						f1valf27f4.SetEnableUpdateCatalog(*f1valiter.GovernedCatalogTarget.SchemaChangePolicy.EnableUpdateCatalog)
					}
					if f1valiter.GovernedCatalogTarget.SchemaChangePolicy.UpdateBehavior != nil {
						f1valf27f4.SetUpdateBehavior(*f1valiter.GovernedCatalogTarget.SchemaChangePolicy.UpdateBehavior)
					}
					f1valf27.SetSchemaChangePolicy(f1valf27f4)
				}
				if f1valiter.GovernedCatalogTarget.Table != nil {
					f1valf27.SetTable(*f1valiter.GovernedCatalogTarget.Table)
				}
				f1val.SetGovernedCatalogTarget(f1valf27)
			}
			if f1valiter.JDBCConnectorSource != nil {
				f1valf28 := &svcsdk.JDBCConnectorSource{}
				if f1valiter.JDBCConnectorSource.AdditionalOptions != nil {
					f1valf28f0 := &svcsdk.JDBCConnectorOptions{}
					if f1valiter.JDBCConnectorSource.AdditionalOptions.DataTypeMapping != nil {
						f1valf28f0f0 := map[string]*string{}
						for f1valf28f0f0key, f1valf28f0f0valiter := range f1valiter.JDBCConnectorSource.AdditionalOptions.DataTypeMapping {
							var f1valf28f0f0val string
							f1valf28f0f0val = *f1valf28f0f0valiter
							f1valf28f0f0[f1valf28f0f0key] = &f1valf28f0f0val
						}
						f1valf28f0.SetDataTypeMapping(f1valf28f0f0)
					}
					if f1valiter.JDBCConnectorSource.AdditionalOptions.FilterPredicate != nil {
						f1valf28f0.SetFilterPredicate(*f1valiter.JDBCConnectorSource.AdditionalOptions.FilterPredicate)
					}
					if f1valiter.JDBCConnectorSource.AdditionalOptions.JobBookmarkKeys != nil {
						f1valf28f0f2 := []*string{}
						for _, f1valf28f0f2iter := range f1valiter.JDBCConnectorSource.AdditionalOptions.JobBookmarkKeys {
							var f1valf28f0f2elem string
							f1valf28f0f2elem = *f1valf28f0f2iter
							f1valf28f0f2 = append(f1valf28f0f2, &f1valf28f0f2elem)
						}
						f1valf28f0.SetJobBookmarkKeys(f1valf28f0f2)
					}
					if f1valiter.JDBCConnectorSource.AdditionalOptions.JobBookmarkKeysSortOrder != nil {
						f1valf28f0.SetJobBookmarkKeysSortOrder(*f1valiter.JDBCConnectorSource.AdditionalOptions.JobBookmarkKeysSortOrder)
					}
					if f1valiter.JDBCConnectorSource.AdditionalOptions.LowerBound != nil {
						f1valf28f0.SetLowerBound(*f1valiter.JDBCConnectorSource.AdditionalOptions.LowerBound)
					}
					if f1valiter.JDBCConnectorSource.AdditionalOptions.NumPartitions != nil {
						f1valf28f0.SetNumPartitions(*f1valiter.JDBCConnectorSource.AdditionalOptions.NumPartitions)
					}
					if f1valiter.JDBCConnectorSource.AdditionalOptions.PartitionColumn != nil {
						f1valf28f0.SetPartitionColumn(*f1valiter.JDBCConnectorSource.AdditionalOptions.PartitionColumn)
					}
					if f1valiter.JDBCConnectorSource.AdditionalOptions.UpperBound != nil {
						f1valf28f0.SetUpperBound(*f1valiter.JDBCConnectorSource.AdditionalOptions.UpperBound)
					}
					f1valf28.SetAdditionalOptions(f1valf28f0)
				}
				if f1valiter.JDBCConnectorSource.ConnectionName != nil {
					f1valf28.SetConnectionName(*f1valiter.JDBCConnectorSource.ConnectionName)
				}
				if f1valiter.JDBCConnectorSource.ConnectionTable != nil {
					f1valf28.SetConnectionTable(*f1valiter.JDBCConnectorSource.ConnectionTable)
				}
				if f1valiter.JDBCConnectorSource.ConnectionType != nil {
					f1valf28.SetConnectionType(*f1valiter.JDBCConnectorSource.ConnectionType)
				}
				if f1valiter.JDBCConnectorSource.ConnectorName != nil {
					f1valf28.SetConnectorName(*f1valiter.JDBCConnectorSource.ConnectorName)
				}
				if f1valiter.JDBCConnectorSource.Name != nil {
					f1valf28.SetName(*f1valiter.JDBCConnectorSource.Name)
				}
				if f1valiter.JDBCConnectorSource.OutputSchemas != nil {
					f1valf28f6 := []*svcsdk.GlueSchema{}
					for _, f1valf28f6iter := range f1valiter.JDBCConnectorSource.OutputSchemas {
						f1valf28f6elem := &svcsdk.GlueSchema{}
						if f1valf28f6iter.Columns != nil {
							f1valf28f6elemf0 := []*svcsdk.GlueStudioSchemaColumn{}
							for _, f1valf28f6elemf0iter := range f1valf28f6iter.Columns {
								f1valf28f6elemf0elem := &svcsdk.GlueStudioSchemaColumn{}
								if f1valf28f6elemf0iter.Name != nil {
									f1valf28f6elemf0elem.SetName(*f1valf28f6elemf0iter.Name)
								}
								if f1valf28f6elemf0iter.Type != nil {
									f1valf28f6elemf0elem.SetType(*f1valf28f6elemf0iter.Type)
								}
								f1valf28f6elemf0 = append(f1valf28f6elemf0, f1valf28f6elemf0elem)
							}
							f1valf28f6elem.SetColumns(f1valf28f6elemf0)
						}
						f1valf28f6 = append(f1valf28f6, f1valf28f6elem)
					}
					f1valf28.SetOutputSchemas(f1valf28f6)
				}
				if f1valiter.JDBCConnectorSource.Query != nil {
					f1valf28.SetQuery(*f1valiter.JDBCConnectorSource.Query)
				}
				f1val.SetJDBCConnectorSource(f1valf28)
			}
			if f1valiter.JDBCConnectorTarget != nil {
				f1valf29 := &svcsdk.JDBCConnectorTarget{}
				if f1valiter.JDBCConnectorTarget.AdditionalOptions != nil {
					f1valf29f0 := map[string]*string{}
					for f1valf29f0key, f1valf29f0valiter := range f1valiter.JDBCConnectorTarget.AdditionalOptions {
						var f1valf29f0val string
						f1valf29f0val = *f1valf29f0valiter
						f1valf29f0[f1valf29f0key] = &f1valf29f0val
					}
					f1valf29.SetAdditionalOptions(f1valf29f0)
				}
				if f1valiter.JDBCConnectorTarget.ConnectionName != nil {
					f1valf29.SetConnectionName(*f1valiter.JDBCConnectorTarget.ConnectionName)
				}
				if f1valiter.JDBCConnectorTarget.ConnectionTable != nil {
					f1valf29.SetConnectionTable(*f1valiter.JDBCConnectorTarget.ConnectionTable)
				}
				if f1valiter.JDBCConnectorTarget.ConnectionType != nil {
					f1valf29.SetConnectionType(*f1valiter.JDBCConnectorTarget.ConnectionType)
				}
				if f1valiter.JDBCConnectorTarget.ConnectorName != nil {
					f1valf29.SetConnectorName(*f1valiter.JDBCConnectorTarget.ConnectorName)
				}
				if f1valiter.JDBCConnectorTarget.Inputs != nil {
					f1valf29f5 := []*string{}
					for _, f1valf29f5iter := range f1valiter.JDBCConnectorTarget.Inputs {
						var f1valf29f5elem string
						f1valf29f5elem = *f1valf29f5iter
						f1valf29f5 = append(f1valf29f5, &f1valf29f5elem)
					}
					f1valf29.SetInputs(f1valf29f5)
				}
				if f1valiter.JDBCConnectorTarget.Name != nil {
					f1valf29.SetName(*f1valiter.JDBCConnectorTarget.Name)
				}
				if f1valiter.JDBCConnectorTarget.OutputSchemas != nil {
					f1valf29f7 := []*svcsdk.GlueSchema{}
					for _, f1valf29f7iter := range f1valiter.JDBCConnectorTarget.OutputSchemas {
						f1valf29f7elem := &svcsdk.GlueSchema{}
						if f1valf29f7iter.Columns != nil {
							f1valf29f7elemf0 := []*svcsdk.GlueStudioSchemaColumn{}
							for _, f1valf29f7elemf0iter := range f1valf29f7iter.Columns {
								f1valf29f7elemf0elem := &svcsdk.GlueStudioSchemaColumn{}
								if f1valf29f7elemf0iter.Name != nil {
									f1valf29f7elemf0elem.SetName(*f1valf29f7elemf0iter.Name)
								}
								if f1valf29f7elemf0iter.Type != nil {
									f1valf29f7elemf0elem.SetType(*f1valf29f7elemf0iter.Type)
								}
								f1valf29f7elemf0 = append(f1valf29f7elemf0, f1valf29f7elemf0elem)
							}
							f1valf29f7elem.SetColumns(f1valf29f7elemf0)
						}
						f1valf29f7 = append(f1valf29f7, f1valf29f7elem)
					}
					f1valf29.SetOutputSchemas(f1valf29f7)
				}
				f1val.SetJDBCConnectorTarget(f1valf29)
			}
			if f1valiter.Join != nil {
				f1valf30 := &svcsdk.Join{}
				if f1valiter.Join.Columns != nil {
					f1valf30f0 := []*svcsdk.JoinColumn{}
					for _, f1valf30f0iter := range f1valiter.Join.Columns {
						f1valf30f0elem := &svcsdk.JoinColumn{}
						if f1valf30f0iter.From != nil {
							f1valf30f0elem.SetFrom(*f1valf30f0iter.From)
						}
						if f1valf30f0iter.Keys != nil {
							f1valf30f0elemf1 := [][]*string{}
							for _, f1valf30f0elemf1iter := range f1valf30f0iter.Keys {
								f1valf30f0elemf1elem := []*string{}
								for _, f1valf30f0elemf1elemiter := range f1valf30f0elemf1iter {
									var f1valf30f0elemf1elemelem string
									f1valf30f0elemf1elemelem = *f1valf30f0elemf1elemiter
									f1valf30f0elemf1elem = append(f1valf30f0elemf1elem, &f1valf30f0elemf1elemelem)
								}
								f1valf30f0elemf1 = append(f1valf30f0elemf1, f1valf30f0elemf1elem)
							}
							f1valf30f0elem.SetKeys(f1valf30f0elemf1)
						}
						f1valf30f0 = append(f1valf30f0, f1valf30f0elem)
					}
					f1valf30.SetColumns(f1valf30f0)
				}
				if f1valiter.Join.Inputs != nil {
					f1valf30f1 := []*string{}
					for _, f1valf30f1iter := range f1valiter.Join.Inputs {
						var f1valf30f1elem string
						f1valf30f1elem = *f1valf30f1iter
						f1valf30f1 = append(f1valf30f1, &f1valf30f1elem)
					}
					f1valf30.SetInputs(f1valf30f1)
				}
				if f1valiter.Join.JoinType != nil {
					f1valf30.SetJoinType(*f1valiter.Join.JoinType)
				}
				if f1valiter.Join.Name != nil {
					f1valf30.SetName(*f1valiter.Join.Name)
				}
				f1val.SetJoin(f1valf30)
			}
			if f1valiter.Merge != nil {
				f1valf31 := &svcsdk.Merge{}
				if f1valiter.Merge.Inputs != nil {
					f1valf31f0 := []*string{}
					for _, f1valf31f0iter := range f1valiter.Merge.Inputs {
						var f1valf31f0elem string
						f1valf31f0elem = *f1valf31f0iter
						f1valf31f0 = append(f1valf31f0, &f1valf31f0elem)
					}
					f1valf31.SetInputs(f1valf31f0)
				}
				if f1valiter.Merge.Name != nil {
					f1valf31.SetName(*f1valiter.Merge.Name)
				}
				if f1valiter.Merge.PrimaryKeys != nil {
					f1valf31f2 := [][]*string{}
					for _, f1valf31f2iter := range f1valiter.Merge.PrimaryKeys {
						f1valf31f2elem := []*string{}
						for _, f1valf31f2elemiter := range f1valf31f2iter {
							var f1valf31f2elemelem string
							f1valf31f2elemelem = *f1valf31f2elemiter
							f1valf31f2elem = append(f1valf31f2elem, &f1valf31f2elemelem)
						}
						f1valf31f2 = append(f1valf31f2, f1valf31f2elem)
					}
					f1valf31.SetPrimaryKeys(f1valf31f2)
				}
				if f1valiter.Merge.Source != nil {
					f1valf31.SetSource(*f1valiter.Merge.Source)
				}
				f1val.SetMerge(f1valf31)
			}
			if f1valiter.MicrosoftSQLServerCatalogSource != nil {
				f1valf32 := &svcsdk.MicrosoftSQLServerCatalogSource{}
				if f1valiter.MicrosoftSQLServerCatalogSource.Database != nil {
					f1valf32.SetDatabase(*f1valiter.MicrosoftSQLServerCatalogSource.Database)
				}
				if f1valiter.MicrosoftSQLServerCatalogSource.Name != nil {
					f1valf32.SetName(*f1valiter.MicrosoftSQLServerCatalogSource.Name)
				}
				if f1valiter.MicrosoftSQLServerCatalogSource.Table != nil {
					f1valf32.SetTable(*f1valiter.MicrosoftSQLServerCatalogSource.Table)
				}
				f1val.SetMicrosoftSQLServerCatalogSource(f1valf32)
			}
			if f1valiter.MicrosoftSQLServerCatalogTarget != nil {
				f1valf33 := &svcsdk.MicrosoftSQLServerCatalogTarget{}
				if f1valiter.MicrosoftSQLServerCatalogTarget.Database != nil {
					f1valf33.SetDatabase(*f1valiter.MicrosoftSQLServerCatalogTarget.Database)
				}
				if f1valiter.MicrosoftSQLServerCatalogTarget.Inputs != nil {
					f1valf33f1 := []*string{}
					for _, f1valf33f1iter := range f1valiter.MicrosoftSQLServerCatalogTarget.Inputs {
						var f1valf33f1elem string
						f1valf33f1elem = *f1valf33f1iter
						f1valf33f1 = append(f1valf33f1, &f1valf33f1elem)
					}
					f1valf33.SetInputs(f1valf33f1)
				}
				if f1valiter.MicrosoftSQLServerCatalogTarget.Name != nil {
					f1valf33.SetName(*f1valiter.MicrosoftSQLServerCatalogTarget.Name)
				}
				if f1valiter.MicrosoftSQLServerCatalogTarget.Table != nil {
					f1valf33.SetTable(*f1valiter.MicrosoftSQLServerCatalogTarget.Table)
				}
				f1val.SetMicrosoftSQLServerCatalogTarget(f1valf33)
			}
			if f1valiter.MySQLCatalogSource != nil {
				f1valf34 := &svcsdk.MySQLCatalogSource{}
				if f1valiter.MySQLCatalogSource.Database != nil {
					f1valf34.SetDatabase(*f1valiter.MySQLCatalogSource.Database)
				}
				if f1valiter.MySQLCatalogSource.Name != nil {
					f1valf34.SetName(*f1valiter.MySQLCatalogSource.Name)
				}
				if f1valiter.MySQLCatalogSource.Table != nil {
					f1valf34.SetTable(*f1valiter.MySQLCatalogSource.Table)
				}
				f1val.SetMySQLCatalogSource(f1valf34)
			}
			if f1valiter.MySQLCatalogTarget != nil {
				f1valf35 := &svcsdk.MySQLCatalogTarget{}
				if f1valiter.MySQLCatalogTarget.Database != nil {
					f1valf35.SetDatabase(*f1valiter.MySQLCatalogTarget.Database)
				}
				if f1valiter.MySQLCatalogTarget.Inputs != nil {
					f1valf35f1 := []*string{}
					for _, f1valf35f1iter := range f1valiter.MySQLCatalogTarget.Inputs {
						var f1valf35f1elem string
						f1valf35f1elem = *f1valf35f1iter
						f1valf35f1 = append(f1valf35f1, &f1valf35f1elem)
					}
					f1valf35.SetInputs(f1valf35f1)
				}
				if f1valiter.MySQLCatalogTarget.Name != nil {
					f1valf35.SetName(*f1valiter.MySQLCatalogTarget.Name)
				}
				if f1valiter.MySQLCatalogTarget.Table != nil {
					f1valf35.SetTable(*f1valiter.MySQLCatalogTarget.Table)
				}
				f1val.SetMySQLCatalogTarget(f1valf35)
			}
			if f1valiter.OracleSQLCatalogSource != nil {
				f1valf36 := &svcsdk.OracleSQLCatalogSource{}
				if f1valiter.OracleSQLCatalogSource.Database != nil {
					f1valf36.SetDatabase(*f1valiter.OracleSQLCatalogSource.Database)
				}
				if f1valiter.OracleSQLCatalogSource.Name != nil {
					f1valf36.SetName(*f1valiter.OracleSQLCatalogSource.Name)
				}
				if f1valiter.OracleSQLCatalogSource.Table != nil {
					f1valf36.SetTable(*f1valiter.OracleSQLCatalogSource.Table)
				}
				f1val.SetOracleSQLCatalogSource(f1valf36)
			}
			if f1valiter.OracleSQLCatalogTarget != nil {
				f1valf37 := &svcsdk.OracleSQLCatalogTarget{}
				if f1valiter.OracleSQLCatalogTarget.Database != nil {
					f1valf37.SetDatabase(*f1valiter.OracleSQLCatalogTarget.Database)
				}
				if f1valiter.OracleSQLCatalogTarget.Inputs != nil {
					f1valf37f1 := []*string{}
					for _, f1valf37f1iter := range f1valiter.OracleSQLCatalogTarget.Inputs {
						var f1valf37f1elem string
						f1valf37f1elem = *f1valf37f1iter
						f1valf37f1 = append(f1valf37f1, &f1valf37f1elem)
					}
					f1valf37.SetInputs(f1valf37f1)
				}
				if f1valiter.OracleSQLCatalogTarget.Name != nil {
					f1valf37.SetName(*f1valiter.OracleSQLCatalogTarget.Name)
				}
				if f1valiter.OracleSQLCatalogTarget.Table != nil {
					f1valf37.SetTable(*f1valiter.OracleSQLCatalogTarget.Table)
				}
				f1val.SetOracleSQLCatalogTarget(f1valf37)
			}
			if f1valiter.PIIDetection != nil {
				f1valf38 := &svcsdk.PIIDetection{}
				if f1valiter.PIIDetection.EntityTypesToDetect != nil {
					f1valf38f0 := []*string{}
					for _, f1valf38f0iter := range f1valiter.PIIDetection.EntityTypesToDetect {
						var f1valf38f0elem string
						f1valf38f0elem = *f1valf38f0iter
						f1valf38f0 = append(f1valf38f0, &f1valf38f0elem)
					}
					f1valf38.SetEntityTypesToDetect(f1valf38f0)
				}
				if f1valiter.PIIDetection.Inputs != nil {
					f1valf38f1 := []*string{}
					for _, f1valf38f1iter := range f1valiter.PIIDetection.Inputs {
						var f1valf38f1elem string
						f1valf38f1elem = *f1valf38f1iter
						f1valf38f1 = append(f1valf38f1, &f1valf38f1elem)
					}
					f1valf38.SetInputs(f1valf38f1)
				}
				if f1valiter.PIIDetection.MaskValue != nil {
					f1valf38.SetMaskValue(*f1valiter.PIIDetection.MaskValue)
				}
				if f1valiter.PIIDetection.Name != nil {
					f1valf38.SetName(*f1valiter.PIIDetection.Name)
				}
				if f1valiter.PIIDetection.OutputColumnName != nil {
					f1valf38.SetOutputColumnName(*f1valiter.PIIDetection.OutputColumnName)
				}
				if f1valiter.PIIDetection.PiiType != nil {
					f1valf38.SetPiiType(*f1valiter.PIIDetection.PiiType)
				}
				if f1valiter.PIIDetection.SampleFraction != nil {
					f1valf38.SetSampleFraction(*f1valiter.PIIDetection.SampleFraction)
				}
				if f1valiter.PIIDetection.ThresholdFraction != nil {
					f1valf38.SetThresholdFraction(*f1valiter.PIIDetection.ThresholdFraction)
				}
				f1val.SetPIIDetection(f1valf38)
			}
			if f1valiter.PostgreSQLCatalogSource != nil {
				f1valf39 := &svcsdk.PostgreSQLCatalogSource{}
				if f1valiter.PostgreSQLCatalogSource.Database != nil {
					f1valf39.SetDatabase(*f1valiter.PostgreSQLCatalogSource.Database)
				}
				if f1valiter.PostgreSQLCatalogSource.Name != nil {
					f1valf39.SetName(*f1valiter.PostgreSQLCatalogSource.Name)
				}
				if f1valiter.PostgreSQLCatalogSource.Table != nil {
					f1valf39.SetTable(*f1valiter.PostgreSQLCatalogSource.Table)
				}
				f1val.SetPostgreSQLCatalogSource(f1valf39)
			}
			if f1valiter.PostgreSQLCatalogTarget != nil {
				f1valf40 := &svcsdk.PostgreSQLCatalogTarget{}
				if f1valiter.PostgreSQLCatalogTarget.Database != nil {
					f1valf40.SetDatabase(*f1valiter.PostgreSQLCatalogTarget.Database)
				}
				if f1valiter.PostgreSQLCatalogTarget.Inputs != nil {
					f1valf40f1 := []*string{}
					for _, f1valf40f1iter := range f1valiter.PostgreSQLCatalogTarget.Inputs {
						var f1valf40f1elem string
						f1valf40f1elem = *f1valf40f1iter
						f1valf40f1 = append(f1valf40f1, &f1valf40f1elem)
					}
					f1valf40.SetInputs(f1valf40f1)
				}
				if f1valiter.PostgreSQLCatalogTarget.Name != nil {
					f1valf40.SetName(*f1valiter.PostgreSQLCatalogTarget.Name)
				}
				if f1valiter.PostgreSQLCatalogTarget.Table != nil {
					f1valf40.SetTable(*f1valiter.PostgreSQLCatalogTarget.Table)
				}
				f1val.SetPostgreSQLCatalogTarget(f1valf40)
			}
			if f1valiter.Recipe != nil {
				f1valf41 := &svcsdk.Recipe{}
				if f1valiter.Recipe.Inputs != nil {
					f1valf41f0 := []*string{}
					for _, f1valf41f0iter := range f1valiter.Recipe.Inputs {
						var f1valf41f0elem string
						f1valf41f0elem = *f1valf41f0iter
						f1valf41f0 = append(f1valf41f0, &f1valf41f0elem)
					}
					f1valf41.SetInputs(f1valf41f0)
				}
				if f1valiter.Recipe.Name != nil {
					f1valf41.SetName(*f1valiter.Recipe.Name)
				}
				if f1valiter.Recipe.RecipeReference != nil {
					f1valf41f2 := &svcsdk.RecipeReference{}
					if f1valiter.Recipe.RecipeReference.RecipeARN != nil {
						f1valf41f2.SetRecipeArn(*f1valiter.Recipe.RecipeReference.RecipeARN)
					}
					if f1valiter.Recipe.RecipeReference.RecipeVersion != nil {
						f1valf41f2.SetRecipeVersion(*f1valiter.Recipe.RecipeReference.RecipeVersion)
					}
					f1valf41.SetRecipeReference(f1valf41f2)
				}
				f1val.SetRecipe(f1valf41)
			}
			if f1valiter.RedshiftSource != nil {
				f1valf42 := &svcsdk.RedshiftSource{}
				if f1valiter.RedshiftSource.Database != nil {
					f1valf42.SetDatabase(*f1valiter.RedshiftSource.Database)
				}
				if f1valiter.RedshiftSource.Name != nil {
					f1valf42.SetName(*f1valiter.RedshiftSource.Name)
				}
				if f1valiter.RedshiftSource.RedshiftTmpDir != nil {
					f1valf42.SetRedshiftTmpDir(*f1valiter.RedshiftSource.RedshiftTmpDir)
				}
				if f1valiter.RedshiftSource.Table != nil {
					f1valf42.SetTable(*f1valiter.RedshiftSource.Table)
				}
				if f1valiter.RedshiftSource.TmpDirIAMRole != nil {
					f1valf42.SetTmpDirIAMRole(*f1valiter.RedshiftSource.TmpDirIAMRole)
				}
				f1val.SetRedshiftSource(f1valf42)
			}
			if f1valiter.RedshiftTarget != nil {
				f1valf43 := &svcsdk.RedshiftTarget{}
				if f1valiter.RedshiftTarget.Database != nil {
					f1valf43.SetDatabase(*f1valiter.RedshiftTarget.Database)
				}
				if f1valiter.RedshiftTarget.Inputs != nil {
					f1valf43f1 := []*string{}
					for _, f1valf43f1iter := range f1valiter.RedshiftTarget.Inputs {
						var f1valf43f1elem string
						f1valf43f1elem = *f1valf43f1iter
						f1valf43f1 = append(f1valf43f1, &f1valf43f1elem)
					}
					f1valf43.SetInputs(f1valf43f1)
				}
				if f1valiter.RedshiftTarget.Name != nil {
					f1valf43.SetName(*f1valiter.RedshiftTarget.Name)
				}
				if f1valiter.RedshiftTarget.RedshiftTmpDir != nil {
					f1valf43.SetRedshiftTmpDir(*f1valiter.RedshiftTarget.RedshiftTmpDir)
				}
				if f1valiter.RedshiftTarget.Table != nil {
					f1valf43.SetTable(*f1valiter.RedshiftTarget.Table)
				}
				if f1valiter.RedshiftTarget.TmpDirIAMRole != nil {
					f1valf43.SetTmpDirIAMRole(*f1valiter.RedshiftTarget.TmpDirIAMRole)
				}
				if f1valiter.RedshiftTarget.UpsertRedshiftOptions != nil {
					f1valf43f6 := &svcsdk.UpsertRedshiftTargetOptions{}
					if f1valiter.RedshiftTarget.UpsertRedshiftOptions.ConnectionName != nil {
						f1valf43f6.SetConnectionName(*f1valiter.RedshiftTarget.UpsertRedshiftOptions.ConnectionName)
					}
					if f1valiter.RedshiftTarget.UpsertRedshiftOptions.TableLocation != nil {
						f1valf43f6.SetTableLocation(*f1valiter.RedshiftTarget.UpsertRedshiftOptions.TableLocation)
					}
					if f1valiter.RedshiftTarget.UpsertRedshiftOptions.UpsertKeys != nil {
						f1valf43f6f2 := []*string{}
						for _, f1valf43f6f2iter := range f1valiter.RedshiftTarget.UpsertRedshiftOptions.UpsertKeys {
							var f1valf43f6f2elem string
							f1valf43f6f2elem = *f1valf43f6f2iter
							f1valf43f6f2 = append(f1valf43f6f2, &f1valf43f6f2elem)
						}
						f1valf43f6.SetUpsertKeys(f1valf43f6f2)
					}
					f1valf43.SetUpsertRedshiftOptions(f1valf43f6)
				}
				f1val.SetRedshiftTarget(f1valf43)
			}
			if f1valiter.RelationalCatalogSource != nil {
				f1valf44 := &svcsdk.RelationalCatalogSource{}
				if f1valiter.RelationalCatalogSource.Database != nil {
					f1valf44.SetDatabase(*f1valiter.RelationalCatalogSource.Database)
				}
				if f1valiter.RelationalCatalogSource.Name != nil {
					f1valf44.SetName(*f1valiter.RelationalCatalogSource.Name)
				}
				if f1valiter.RelationalCatalogSource.Table != nil {
					f1valf44.SetTable(*f1valiter.RelationalCatalogSource.Table)
				}
				f1val.SetRelationalCatalogSource(f1valf44)
			}
			if f1valiter.RenameField != nil {
				f1valf45 := &svcsdk.RenameField{}
				if f1valiter.RenameField.Inputs != nil {
					f1valf45f0 := []*string{}
					for _, f1valf45f0iter := range f1valiter.RenameField.Inputs {
						var f1valf45f0elem string
						f1valf45f0elem = *f1valf45f0iter
						f1valf45f0 = append(f1valf45f0, &f1valf45f0elem)
					}
					f1valf45.SetInputs(f1valf45f0)
				}
				if f1valiter.RenameField.Name != nil {
					f1valf45.SetName(*f1valiter.RenameField.Name)
				}
				if f1valiter.RenameField.SourcePath != nil {
					f1valf45f2 := []*string{}
					for _, f1valf45f2iter := range f1valiter.RenameField.SourcePath {
						var f1valf45f2elem string
						f1valf45f2elem = *f1valf45f2iter
						f1valf45f2 = append(f1valf45f2, &f1valf45f2elem)
					}
					f1valf45.SetSourcePath(f1valf45f2)
				}
				if f1valiter.RenameField.TargetPath != nil {
					f1valf45f3 := []*string{}
					for _, f1valf45f3iter := range f1valiter.RenameField.TargetPath {
						var f1valf45f3elem string
						f1valf45f3elem = *f1valf45f3iter
						f1valf45f3 = append(f1valf45f3, &f1valf45f3elem)
					}
					f1valf45.SetTargetPath(f1valf45f3)
				}
				f1val.SetRenameField(f1valf45)
			}
			if f1valiter.S3CatalogDeltaSource != nil {
				f1valf46 := &svcsdk.S3CatalogDeltaSource{}
				if f1valiter.S3CatalogDeltaSource.AdditionalDeltaOptions != nil {
					f1valf46f0 := map[string]*string{}
					for f1valf46f0key, f1valf46f0valiter := range f1valiter.S3CatalogDeltaSource.AdditionalDeltaOptions {
						var f1valf46f0val string
						f1valf46f0val = *f1valf46f0valiter
						f1valf46f0[f1valf46f0key] = &f1valf46f0val
					}
					f1valf46.SetAdditionalDeltaOptions(f1valf46f0)
				}
				if f1valiter.S3CatalogDeltaSource.Database != nil {
					f1valf46.SetDatabase(*f1valiter.S3CatalogDeltaSource.Database)
				}
				if f1valiter.S3CatalogDeltaSource.Name != nil {
					f1valf46.SetName(*f1valiter.S3CatalogDeltaSource.Name)
				}
				if f1valiter.S3CatalogDeltaSource.OutputSchemas != nil {
					f1valf46f3 := []*svcsdk.GlueSchema{}
					for _, f1valf46f3iter := range f1valiter.S3CatalogDeltaSource.OutputSchemas {
						f1valf46f3elem := &svcsdk.GlueSchema{}
						if f1valf46f3iter.Columns != nil {
							f1valf46f3elemf0 := []*svcsdk.GlueStudioSchemaColumn{}
							for _, f1valf46f3elemf0iter := range f1valf46f3iter.Columns {
								f1valf46f3elemf0elem := &svcsdk.GlueStudioSchemaColumn{}
								if f1valf46f3elemf0iter.Name != nil {
									f1valf46f3elemf0elem.SetName(*f1valf46f3elemf0iter.Name)
								}
								if f1valf46f3elemf0iter.Type != nil {
									f1valf46f3elemf0elem.SetType(*f1valf46f3elemf0iter.Type)
								}
								f1valf46f3elemf0 = append(f1valf46f3elemf0, f1valf46f3elemf0elem)
							}
							f1valf46f3elem.SetColumns(f1valf46f3elemf0)
						}
						f1valf46f3 = append(f1valf46f3, f1valf46f3elem)
					}
					f1valf46.SetOutputSchemas(f1valf46f3)
				}
				if f1valiter.S3CatalogDeltaSource.Table != nil {
					f1valf46.SetTable(*f1valiter.S3CatalogDeltaSource.Table)
				}
				f1val.SetS3CatalogDeltaSource(f1valf46)
			}
			if f1valiter.S3CatalogHudiSource != nil {
				f1valf47 := &svcsdk.S3CatalogHudiSource{}
				if f1valiter.S3CatalogHudiSource.AdditionalHudiOptions != nil {
					f1valf47f0 := map[string]*string{}
					for f1valf47f0key, f1valf47f0valiter := range f1valiter.S3CatalogHudiSource.AdditionalHudiOptions {
						var f1valf47f0val string
						f1valf47f0val = *f1valf47f0valiter
						f1valf47f0[f1valf47f0key] = &f1valf47f0val
					}
					f1valf47.SetAdditionalHudiOptions(f1valf47f0)
				}
				if f1valiter.S3CatalogHudiSource.Database != nil {
					f1valf47.SetDatabase(*f1valiter.S3CatalogHudiSource.Database)
				}
				if f1valiter.S3CatalogHudiSource.Name != nil {
					f1valf47.SetName(*f1valiter.S3CatalogHudiSource.Name)
				}
				if f1valiter.S3CatalogHudiSource.OutputSchemas != nil {
					f1valf47f3 := []*svcsdk.GlueSchema{}
					for _, f1valf47f3iter := range f1valiter.S3CatalogHudiSource.OutputSchemas {
						f1valf47f3elem := &svcsdk.GlueSchema{}
						if f1valf47f3iter.Columns != nil {
							f1valf47f3elemf0 := []*svcsdk.GlueStudioSchemaColumn{}
							for _, f1valf47f3elemf0iter := range f1valf47f3iter.Columns {
								f1valf47f3elemf0elem := &svcsdk.GlueStudioSchemaColumn{}
								if f1valf47f3elemf0iter.Name != nil {
									f1valf47f3elemf0elem.SetName(*f1valf47f3elemf0iter.Name)
								}
								if f1valf47f3elemf0iter.Type != nil {
									f1valf47f3elemf0elem.SetType(*f1valf47f3elemf0iter.Type)
								}
								f1valf47f3elemf0 = append(f1valf47f3elemf0, f1valf47f3elemf0elem)
							}
							f1valf47f3elem.SetColumns(f1valf47f3elemf0)
						}
						f1valf47f3 = append(f1valf47f3, f1valf47f3elem)
					}
					f1valf47.SetOutputSchemas(f1valf47f3)
				}
				if f1valiter.S3CatalogHudiSource.Table != nil {
					f1valf47.SetTable(*f1valiter.S3CatalogHudiSource.Table)
				}
				f1val.SetS3CatalogHudiSource(f1valf47)
			}
			if f1valiter.S3CatalogSource != nil {
				f1valf48 := &svcsdk.S3CatalogSource{}
				if f1valiter.S3CatalogSource.AdditionalOptions != nil {
					f1valf48f0 := &svcsdk.S3SourceAdditionalOptions{}
					if f1valiter.S3CatalogSource.AdditionalOptions.BoundedFiles != nil {
						f1valf48f0.SetBoundedFiles(*f1valiter.S3CatalogSource.AdditionalOptions.BoundedFiles)
					}
					if f1valiter.S3CatalogSource.AdditionalOptions.BoundedSize != nil {
						f1valf48f0.SetBoundedSize(*f1valiter.S3CatalogSource.AdditionalOptions.BoundedSize)
					}
					f1valf48.SetAdditionalOptions(f1valf48f0)
				}
				if f1valiter.S3CatalogSource.Database != nil {
					f1valf48.SetDatabase(*f1valiter.S3CatalogSource.Database)
				}
				if f1valiter.S3CatalogSource.Name != nil {
					f1valf48.SetName(*f1valiter.S3CatalogSource.Name)
				}
				if f1valiter.S3CatalogSource.PartitionPredicate != nil {
					f1valf48.SetPartitionPredicate(*f1valiter.S3CatalogSource.PartitionPredicate)
				}
				if f1valiter.S3CatalogSource.Table != nil {
					f1valf48.SetTable(*f1valiter.S3CatalogSource.Table)
				}
				f1val.SetS3CatalogSource(f1valf48)
			}
			if f1valiter.S3CatalogTarget != nil {
				f1valf49 := &svcsdk.S3CatalogTarget{}
				if f1valiter.S3CatalogTarget.Database != nil {
					f1valf49.SetDatabase(*f1valiter.S3CatalogTarget.Database)
				}
				if f1valiter.S3CatalogTarget.Inputs != nil {
					f1valf49f1 := []*string{}
					for _, f1valf49f1iter := range f1valiter.S3CatalogTarget.Inputs {
						var f1valf49f1elem string
						f1valf49f1elem = *f1valf49f1iter
						f1valf49f1 = append(f1valf49f1, &f1valf49f1elem)
					}
					f1valf49.SetInputs(f1valf49f1)
				}
				if f1valiter.S3CatalogTarget.Name != nil {
					f1valf49.SetName(*f1valiter.S3CatalogTarget.Name)
				}
				if f1valiter.S3CatalogTarget.PartitionKeys != nil {
					f1valf49f3 := [][]*string{}
					for _, f1valf49f3iter := range f1valiter.S3CatalogTarget.PartitionKeys {
						f1valf49f3elem := []*string{}
						for _, f1valf49f3elemiter := range f1valf49f3iter {
							var f1valf49f3elemelem string
							f1valf49f3elemelem = *f1valf49f3elemiter
							f1valf49f3elem = append(f1valf49f3elem, &f1valf49f3elemelem)
						}
						f1valf49f3 = append(f1valf49f3, f1valf49f3elem)
					}
					f1valf49.SetPartitionKeys(f1valf49f3)
				}
				if f1valiter.S3CatalogTarget.SchemaChangePolicy != nil {
					f1valf49f4 := &svcsdk.CatalogSchemaChangePolicy{}
					if f1valiter.S3CatalogTarget.SchemaChangePolicy.EnableUpdateCatalog != nil {
						f1valf49f4.SetEnableUpdateCatalog(*f1valiter.S3CatalogTarget.SchemaChangePolicy.EnableUpdateCatalog)
					}
					if f1valiter.S3CatalogTarget.SchemaChangePolicy.UpdateBehavior != nil {
						f1valf49f4.SetUpdateBehavior(*f1valiter.S3CatalogTarget.SchemaChangePolicy.UpdateBehavior)
					}
					f1valf49.SetSchemaChangePolicy(f1valf49f4)
				}
				if f1valiter.S3CatalogTarget.Table != nil {
					f1valf49.SetTable(*f1valiter.S3CatalogTarget.Table)
				}
				f1val.SetS3CatalogTarget(f1valf49)
			}
			if f1valiter.S3CsvSource != nil {
				f1valf50 := &svcsdk.S3CsvSource{}
				if f1valiter.S3CsvSource.AdditionalOptions != nil {
					f1valf50f0 := &svcsdk.S3DirectSourceAdditionalOptions{}
					if f1valiter.S3CsvSource.AdditionalOptions.BoundedFiles != nil {
						f1valf50f0.SetBoundedFiles(*f1valiter.S3CsvSource.AdditionalOptions.BoundedFiles)
					}
					if f1valiter.S3CsvSource.AdditionalOptions.BoundedSize != nil {
						f1valf50f0.SetBoundedSize(*f1valiter.S3CsvSource.AdditionalOptions.BoundedSize)
					}
					if f1valiter.S3CsvSource.AdditionalOptions.EnableSamplePath != nil {
						f1valf50f0.SetEnableSamplePath(*f1valiter.S3CsvSource.AdditionalOptions.EnableSamplePath)
					}
					if f1valiter.S3CsvSource.AdditionalOptions.SamplePath != nil {
						f1valf50f0.SetSamplePath(*f1valiter.S3CsvSource.AdditionalOptions.SamplePath)
					}
					f1valf50.SetAdditionalOptions(f1valf50f0)
				}
				if f1valiter.S3CsvSource.CompressionType != nil {
					f1valf50.SetCompressionType(*f1valiter.S3CsvSource.CompressionType)
				}
				if f1valiter.S3CsvSource.Escaper != nil {
					f1valf50.SetEscaper(*f1valiter.S3CsvSource.Escaper)
				}
				if f1valiter.S3CsvSource.Exclusions != nil {
					f1valf50f3 := []*string{}
					for _, f1valf50f3iter := range f1valiter.S3CsvSource.Exclusions {
						var f1valf50f3elem string
						f1valf50f3elem = *f1valf50f3iter
						f1valf50f3 = append(f1valf50f3, &f1valf50f3elem)
					}
					f1valf50.SetExclusions(f1valf50f3)
				}
				if f1valiter.S3CsvSource.GroupFiles != nil {
					f1valf50.SetGroupFiles(*f1valiter.S3CsvSource.GroupFiles)
				}
				if f1valiter.S3CsvSource.GroupSize != nil {
					f1valf50.SetGroupSize(*f1valiter.S3CsvSource.GroupSize)
				}
				if f1valiter.S3CsvSource.MaxBand != nil {
					f1valf50.SetMaxBand(*f1valiter.S3CsvSource.MaxBand)
				}
				if f1valiter.S3CsvSource.MaxFilesInBand != nil {
					f1valf50.SetMaxFilesInBand(*f1valiter.S3CsvSource.MaxFilesInBand)
				}
				if f1valiter.S3CsvSource.Multiline != nil {
					f1valf50.SetMultiline(*f1valiter.S3CsvSource.Multiline)
				}
				if f1valiter.S3CsvSource.Name != nil {
					f1valf50.SetName(*f1valiter.S3CsvSource.Name)
				}
				if f1valiter.S3CsvSource.OptimizePerformance != nil {
					f1valf50.SetOptimizePerformance(*f1valiter.S3CsvSource.OptimizePerformance)
				}
				if f1valiter.S3CsvSource.OutputSchemas != nil {
					f1valf50f11 := []*svcsdk.GlueSchema{}
					for _, f1valf50f11iter := range f1valiter.S3CsvSource.OutputSchemas {
						f1valf50f11elem := &svcsdk.GlueSchema{}
						if f1valf50f11iter.Columns != nil {
							f1valf50f11elemf0 := []*svcsdk.GlueStudioSchemaColumn{}
							for _, f1valf50f11elemf0iter := range f1valf50f11iter.Columns {
								f1valf50f11elemf0elem := &svcsdk.GlueStudioSchemaColumn{}
								if f1valf50f11elemf0iter.Name != nil {
									f1valf50f11elemf0elem.SetName(*f1valf50f11elemf0iter.Name)
								}
								if f1valf50f11elemf0iter.Type != nil {
									f1valf50f11elemf0elem.SetType(*f1valf50f11elemf0iter.Type)
								}
								f1valf50f11elemf0 = append(f1valf50f11elemf0, f1valf50f11elemf0elem)
							}
							f1valf50f11elem.SetColumns(f1valf50f11elemf0)
						}
						f1valf50f11 = append(f1valf50f11, f1valf50f11elem)
					}
					f1valf50.SetOutputSchemas(f1valf50f11)
				}
				if f1valiter.S3CsvSource.Paths != nil {
					f1valf50f12 := []*string{}
					for _, f1valf50f12iter := range f1valiter.S3CsvSource.Paths {
						var f1valf50f12elem string
						f1valf50f12elem = *f1valf50f12iter
						f1valf50f12 = append(f1valf50f12, &f1valf50f12elem)
					}
					f1valf50.SetPaths(f1valf50f12)
				}
				if f1valiter.S3CsvSource.QuoteChar != nil {
					f1valf50.SetQuoteChar(*f1valiter.S3CsvSource.QuoteChar)
				}
				if f1valiter.S3CsvSource.Recurse != nil {
					f1valf50.SetRecurse(*f1valiter.S3CsvSource.Recurse)
				}
				if f1valiter.S3CsvSource.Separator != nil {
					f1valf50.SetSeparator(*f1valiter.S3CsvSource.Separator)
				}
				if f1valiter.S3CsvSource.SkipFirst != nil {
					f1valf50.SetSkipFirst(*f1valiter.S3CsvSource.SkipFirst)
				}
				if f1valiter.S3CsvSource.WithHeader != nil {
					f1valf50.SetWithHeader(*f1valiter.S3CsvSource.WithHeader)
				}
				if f1valiter.S3CsvSource.WriteHeader != nil {
					f1valf50.SetWriteHeader(*f1valiter.S3CsvSource.WriteHeader)
				}
				f1val.SetS3CsvSource(f1valf50)
			}
			if f1valiter.S3DeltaCatalogTarget != nil {
				f1valf51 := &svcsdk.S3DeltaCatalogTarget{}
				if f1valiter.S3DeltaCatalogTarget.AdditionalOptions != nil {
					f1valf51f0 := map[string]*string{}
					for f1valf51f0key, f1valf51f0valiter := range f1valiter.S3DeltaCatalogTarget.AdditionalOptions {
						var f1valf51f0val string
						f1valf51f0val = *f1valf51f0valiter
						f1valf51f0[f1valf51f0key] = &f1valf51f0val
					}
					f1valf51.SetAdditionalOptions(f1valf51f0)
				}
				if f1valiter.S3DeltaCatalogTarget.Database != nil {
					f1valf51.SetDatabase(*f1valiter.S3DeltaCatalogTarget.Database)
				}
				if f1valiter.S3DeltaCatalogTarget.Inputs != nil {
					f1valf51f2 := []*string{}
					for _, f1valf51f2iter := range f1valiter.S3DeltaCatalogTarget.Inputs {
						var f1valf51f2elem string
						f1valf51f2elem = *f1valf51f2iter
						f1valf51f2 = append(f1valf51f2, &f1valf51f2elem)
					}
					f1valf51.SetInputs(f1valf51f2)
				}
				if f1valiter.S3DeltaCatalogTarget.Name != nil {
					f1valf51.SetName(*f1valiter.S3DeltaCatalogTarget.Name)
				}
				if f1valiter.S3DeltaCatalogTarget.PartitionKeys != nil {
					f1valf51f4 := [][]*string{}
					for _, f1valf51f4iter := range f1valiter.S3DeltaCatalogTarget.PartitionKeys {
						f1valf51f4elem := []*string{}
						for _, f1valf51f4elemiter := range f1valf51f4iter {
							var f1valf51f4elemelem string
							f1valf51f4elemelem = *f1valf51f4elemiter
							f1valf51f4elem = append(f1valf51f4elem, &f1valf51f4elemelem)
						}
						f1valf51f4 = append(f1valf51f4, f1valf51f4elem)
					}
					f1valf51.SetPartitionKeys(f1valf51f4)
				}
				if f1valiter.S3DeltaCatalogTarget.SchemaChangePolicy != nil {
					f1valf51f5 := &svcsdk.CatalogSchemaChangePolicy{}
					if f1valiter.S3DeltaCatalogTarget.SchemaChangePolicy.EnableUpdateCatalog != nil {
						f1valf51f5.SetEnableUpdateCatalog(*f1valiter.S3DeltaCatalogTarget.SchemaChangePolicy.EnableUpdateCatalog)
					}
					if f1valiter.S3DeltaCatalogTarget.SchemaChangePolicy.UpdateBehavior != nil {
						f1valf51f5.SetUpdateBehavior(*f1valiter.S3DeltaCatalogTarget.SchemaChangePolicy.UpdateBehavior)
					}
					f1valf51.SetSchemaChangePolicy(f1valf51f5)
				}
				if f1valiter.S3DeltaCatalogTarget.Table != nil {
					f1valf51.SetTable(*f1valiter.S3DeltaCatalogTarget.Table)
				}
				f1val.SetS3DeltaCatalogTarget(f1valf51)
			}
			if f1valiter.S3DeltaDirectTarget != nil {
				f1valf52 := &svcsdk.S3DeltaDirectTarget{}
				if f1valiter.S3DeltaDirectTarget.AdditionalOptions != nil {
					f1valf52f0 := map[string]*string{}
					for f1valf52f0key, f1valf52f0valiter := range f1valiter.S3DeltaDirectTarget.AdditionalOptions {
						var f1valf52f0val string
						f1valf52f0val = *f1valf52f0valiter
						f1valf52f0[f1valf52f0key] = &f1valf52f0val
					}
					f1valf52.SetAdditionalOptions(f1valf52f0)
				}
				if f1valiter.S3DeltaDirectTarget.Compression != nil {
					f1valf52.SetCompression(*f1valiter.S3DeltaDirectTarget.Compression)
				}
				if f1valiter.S3DeltaDirectTarget.Format != nil {
					f1valf52.SetFormat(*f1valiter.S3DeltaDirectTarget.Format)
				}
				if f1valiter.S3DeltaDirectTarget.Inputs != nil {
					f1valf52f3 := []*string{}
					for _, f1valf52f3iter := range f1valiter.S3DeltaDirectTarget.Inputs {
						var f1valf52f3elem string
						f1valf52f3elem = *f1valf52f3iter
						f1valf52f3 = append(f1valf52f3, &f1valf52f3elem)
					}
					f1valf52.SetInputs(f1valf52f3)
				}
				if f1valiter.S3DeltaDirectTarget.Name != nil {
					f1valf52.SetName(*f1valiter.S3DeltaDirectTarget.Name)
				}
				if f1valiter.S3DeltaDirectTarget.PartitionKeys != nil {
					f1valf52f5 := [][]*string{}
					for _, f1valf52f5iter := range f1valiter.S3DeltaDirectTarget.PartitionKeys {
						f1valf52f5elem := []*string{}
						for _, f1valf52f5elemiter := range f1valf52f5iter {
							var f1valf52f5elemelem string
							f1valf52f5elemelem = *f1valf52f5elemiter
							f1valf52f5elem = append(f1valf52f5elem, &f1valf52f5elemelem)
						}
						f1valf52f5 = append(f1valf52f5, f1valf52f5elem)
					}
					f1valf52.SetPartitionKeys(f1valf52f5)
				}
				if f1valiter.S3DeltaDirectTarget.Path != nil {
					f1valf52.SetPath(*f1valiter.S3DeltaDirectTarget.Path)
				}
				if f1valiter.S3DeltaDirectTarget.SchemaChangePolicy != nil {
					f1valf52f7 := &svcsdk.DirectSchemaChangePolicy{}
					if f1valiter.S3DeltaDirectTarget.SchemaChangePolicy.Database != nil {
						f1valf52f7.SetDatabase(*f1valiter.S3DeltaDirectTarget.SchemaChangePolicy.Database)
					}
					if f1valiter.S3DeltaDirectTarget.SchemaChangePolicy.EnableUpdateCatalog != nil {
						f1valf52f7.SetEnableUpdateCatalog(*f1valiter.S3DeltaDirectTarget.SchemaChangePolicy.EnableUpdateCatalog)
					}
					if f1valiter.S3DeltaDirectTarget.SchemaChangePolicy.Table != nil {
						f1valf52f7.SetTable(*f1valiter.S3DeltaDirectTarget.SchemaChangePolicy.Table)
					}
					if f1valiter.S3DeltaDirectTarget.SchemaChangePolicy.UpdateBehavior != nil {
						f1valf52f7.SetUpdateBehavior(*f1valiter.S3DeltaDirectTarget.SchemaChangePolicy.UpdateBehavior)
					}
					f1valf52.SetSchemaChangePolicy(f1valf52f7)
				}
				f1val.SetS3DeltaDirectTarget(f1valf52)
			}
			if f1valiter.S3DeltaSource != nil {
				f1valf53 := &svcsdk.S3DeltaSource{}
				if f1valiter.S3DeltaSource.AdditionalDeltaOptions != nil {
					f1valf53f0 := map[string]*string{}
					for f1valf53f0key, f1valf53f0valiter := range f1valiter.S3DeltaSource.AdditionalDeltaOptions {
						var f1valf53f0val string
						f1valf53f0val = *f1valf53f0valiter
						f1valf53f0[f1valf53f0key] = &f1valf53f0val
					}
					f1valf53.SetAdditionalDeltaOptions(f1valf53f0)
				}
				if f1valiter.S3DeltaSource.AdditionalOptions != nil {
					f1valf53f1 := &svcsdk.S3DirectSourceAdditionalOptions{}
					if f1valiter.S3DeltaSource.AdditionalOptions.BoundedFiles != nil {
						f1valf53f1.SetBoundedFiles(*f1valiter.S3DeltaSource.AdditionalOptions.BoundedFiles)
					}
					if f1valiter.S3DeltaSource.AdditionalOptions.BoundedSize != nil {
						f1valf53f1.SetBoundedSize(*f1valiter.S3DeltaSource.AdditionalOptions.BoundedSize)
					}
					if f1valiter.S3DeltaSource.AdditionalOptions.EnableSamplePath != nil {
						f1valf53f1.SetEnableSamplePath(*f1valiter.S3DeltaSource.AdditionalOptions.EnableSamplePath)
					}
					if f1valiter.S3DeltaSource.AdditionalOptions.SamplePath != nil {
						f1valf53f1.SetSamplePath(*f1valiter.S3DeltaSource.AdditionalOptions.SamplePath)
					}
					f1valf53.SetAdditionalOptions(f1valf53f1)
				}
				if f1valiter.S3DeltaSource.Name != nil {
					f1valf53.SetName(*f1valiter.S3DeltaSource.Name)
				}
				if f1valiter.S3DeltaSource.OutputSchemas != nil {
					f1valf53f3 := []*svcsdk.GlueSchema{}
					for _, f1valf53f3iter := range f1valiter.S3DeltaSource.OutputSchemas {
						f1valf53f3elem := &svcsdk.GlueSchema{}
						if f1valf53f3iter.Columns != nil {
							f1valf53f3elemf0 := []*svcsdk.GlueStudioSchemaColumn{}
							for _, f1valf53f3elemf0iter := range f1valf53f3iter.Columns {
								f1valf53f3elemf0elem := &svcsdk.GlueStudioSchemaColumn{}
								if f1valf53f3elemf0iter.Name != nil {
									f1valf53f3elemf0elem.SetName(*f1valf53f3elemf0iter.Name)
								}
								if f1valf53f3elemf0iter.Type != nil {
									f1valf53f3elemf0elem.SetType(*f1valf53f3elemf0iter.Type)
								}
								f1valf53f3elemf0 = append(f1valf53f3elemf0, f1valf53f3elemf0elem)
							}
							f1valf53f3elem.SetColumns(f1valf53f3elemf0)
						}
						f1valf53f3 = append(f1valf53f3, f1valf53f3elem)
					}
					f1valf53.SetOutputSchemas(f1valf53f3)
				}
				if f1valiter.S3DeltaSource.Paths != nil {
					f1valf53f4 := []*string{}
					for _, f1valf53f4iter := range f1valiter.S3DeltaSource.Paths {
						var f1valf53f4elem string
						f1valf53f4elem = *f1valf53f4iter
						f1valf53f4 = append(f1valf53f4, &f1valf53f4elem)
					}
					f1valf53.SetPaths(f1valf53f4)
				}
				f1val.SetS3DeltaSource(f1valf53)
			}
			if f1valiter.S3DirectTarget != nil {
				f1valf54 := &svcsdk.S3DirectTarget{}
				if f1valiter.S3DirectTarget.Compression != nil {
					f1valf54.SetCompression(*f1valiter.S3DirectTarget.Compression)
				}
				if f1valiter.S3DirectTarget.Format != nil {
					f1valf54.SetFormat(*f1valiter.S3DirectTarget.Format)
				}
				if f1valiter.S3DirectTarget.Inputs != nil {
					f1valf54f2 := []*string{}
					for _, f1valf54f2iter := range f1valiter.S3DirectTarget.Inputs {
						var f1valf54f2elem string
						f1valf54f2elem = *f1valf54f2iter
						f1valf54f2 = append(f1valf54f2, &f1valf54f2elem)
					}
					f1valf54.SetInputs(f1valf54f2)
				}
				if f1valiter.S3DirectTarget.Name != nil {
					f1valf54.SetName(*f1valiter.S3DirectTarget.Name)
				}
				if f1valiter.S3DirectTarget.PartitionKeys != nil {
					f1valf54f4 := [][]*string{}
					for _, f1valf54f4iter := range f1valiter.S3DirectTarget.PartitionKeys {
						f1valf54f4elem := []*string{}
						for _, f1valf54f4elemiter := range f1valf54f4iter {
							var f1valf54f4elemelem string
							f1valf54f4elemelem = *f1valf54f4elemiter
							f1valf54f4elem = append(f1valf54f4elem, &f1valf54f4elemelem)
						}
						f1valf54f4 = append(f1valf54f4, f1valf54f4elem)
					}
					f1valf54.SetPartitionKeys(f1valf54f4)
				}
				if f1valiter.S3DirectTarget.Path != nil {
					f1valf54.SetPath(*f1valiter.S3DirectTarget.Path)
				}
				if f1valiter.S3DirectTarget.SchemaChangePolicy != nil {
					f1valf54f6 := &svcsdk.DirectSchemaChangePolicy{}
					if f1valiter.S3DirectTarget.SchemaChangePolicy.Database != nil {
						f1valf54f6.SetDatabase(*f1valiter.S3DirectTarget.SchemaChangePolicy.Database)
					}
					if f1valiter.S3DirectTarget.SchemaChangePolicy.EnableUpdateCatalog != nil {
						f1valf54f6.SetEnableUpdateCatalog(*f1valiter.S3DirectTarget.SchemaChangePolicy.EnableUpdateCatalog)
					}
					if f1valiter.S3DirectTarget.SchemaChangePolicy.Table != nil {
						f1valf54f6.SetTable(*f1valiter.S3DirectTarget.SchemaChangePolicy.Table)
					}
					if f1valiter.S3DirectTarget.SchemaChangePolicy.UpdateBehavior != nil {
						f1valf54f6.SetUpdateBehavior(*f1valiter.S3DirectTarget.SchemaChangePolicy.UpdateBehavior)
					}
					f1valf54.SetSchemaChangePolicy(f1valf54f6)
				}
				f1val.SetS3DirectTarget(f1valf54)
			}
			if f1valiter.S3GlueParquetTarget != nil {
				f1valf55 := &svcsdk.S3GlueParquetTarget{}
				if f1valiter.S3GlueParquetTarget.Compression != nil {
					f1valf55.SetCompression(*f1valiter.S3GlueParquetTarget.Compression)
				}
				if f1valiter.S3GlueParquetTarget.Inputs != nil {
					f1valf55f1 := []*string{}
					for _, f1valf55f1iter := range f1valiter.S3GlueParquetTarget.Inputs {
						var f1valf55f1elem string
						f1valf55f1elem = *f1valf55f1iter
						f1valf55f1 = append(f1valf55f1, &f1valf55f1elem)
					}
					f1valf55.SetInputs(f1valf55f1)
				}
				if f1valiter.S3GlueParquetTarget.Name != nil {
					f1valf55.SetName(*f1valiter.S3GlueParquetTarget.Name)
				}
				if f1valiter.S3GlueParquetTarget.PartitionKeys != nil {
					f1valf55f3 := [][]*string{}
					for _, f1valf55f3iter := range f1valiter.S3GlueParquetTarget.PartitionKeys {
						f1valf55f3elem := []*string{}
						for _, f1valf55f3elemiter := range f1valf55f3iter {
							var f1valf55f3elemelem string
							f1valf55f3elemelem = *f1valf55f3elemiter
							f1valf55f3elem = append(f1valf55f3elem, &f1valf55f3elemelem)
						}
						f1valf55f3 = append(f1valf55f3, f1valf55f3elem)
					}
					f1valf55.SetPartitionKeys(f1valf55f3)
				}
				if f1valiter.S3GlueParquetTarget.Path != nil {
					f1valf55.SetPath(*f1valiter.S3GlueParquetTarget.Path)
				}
				if f1valiter.S3GlueParquetTarget.SchemaChangePolicy != nil {
					f1valf55f5 := &svcsdk.DirectSchemaChangePolicy{}
					if f1valiter.S3GlueParquetTarget.SchemaChangePolicy.Database != nil {
						f1valf55f5.SetDatabase(*f1valiter.S3GlueParquetTarget.SchemaChangePolicy.Database)
					}
					if f1valiter.S3GlueParquetTarget.SchemaChangePolicy.EnableUpdateCatalog != nil {
						f1valf55f5.SetEnableUpdateCatalog(*f1valiter.S3GlueParquetTarget.SchemaChangePolicy.EnableUpdateCatalog)
					}
					if f1valiter.S3GlueParquetTarget.SchemaChangePolicy.Table != nil {
						f1valf55f5.SetTable(*f1valiter.S3GlueParquetTarget.SchemaChangePolicy.Table)
					}
					if f1valiter.S3GlueParquetTarget.SchemaChangePolicy.UpdateBehavior != nil {
						f1valf55f5.SetUpdateBehavior(*f1valiter.S3GlueParquetTarget.SchemaChangePolicy.UpdateBehavior)
					}
					f1valf55.SetSchemaChangePolicy(f1valf55f5)
				}
				f1val.SetS3GlueParquetTarget(f1valf55)
			}
			if f1valiter.S3HudiCatalogTarget != nil {
				f1valf56 := &svcsdk.S3HudiCatalogTarget{}
				if f1valiter.S3HudiCatalogTarget.AdditionalOptions != nil {
					f1valf56f0 := map[string]*string{}
					for f1valf56f0key, f1valf56f0valiter := range f1valiter.S3HudiCatalogTarget.AdditionalOptions {
						var f1valf56f0val string
						f1valf56f0val = *f1valf56f0valiter
						f1valf56f0[f1valf56f0key] = &f1valf56f0val
					}
					f1valf56.SetAdditionalOptions(f1valf56f0)
				}
				if f1valiter.S3HudiCatalogTarget.Database != nil {
					f1valf56.SetDatabase(*f1valiter.S3HudiCatalogTarget.Database)
				}
				if f1valiter.S3HudiCatalogTarget.Inputs != nil {
					f1valf56f2 := []*string{}
					for _, f1valf56f2iter := range f1valiter.S3HudiCatalogTarget.Inputs {
						var f1valf56f2elem string
						f1valf56f2elem = *f1valf56f2iter
						f1valf56f2 = append(f1valf56f2, &f1valf56f2elem)
					}
					f1valf56.SetInputs(f1valf56f2)
				}
				if f1valiter.S3HudiCatalogTarget.Name != nil {
					f1valf56.SetName(*f1valiter.S3HudiCatalogTarget.Name)
				}
				if f1valiter.S3HudiCatalogTarget.PartitionKeys != nil {
					f1valf56f4 := [][]*string{}
					for _, f1valf56f4iter := range f1valiter.S3HudiCatalogTarget.PartitionKeys {
						f1valf56f4elem := []*string{}
						for _, f1valf56f4elemiter := range f1valf56f4iter {
							var f1valf56f4elemelem string
							f1valf56f4elemelem = *f1valf56f4elemiter
							f1valf56f4elem = append(f1valf56f4elem, &f1valf56f4elemelem)
						}
						f1valf56f4 = append(f1valf56f4, f1valf56f4elem)
					}
					f1valf56.SetPartitionKeys(f1valf56f4)
				}
				if f1valiter.S3HudiCatalogTarget.SchemaChangePolicy != nil {
					f1valf56f5 := &svcsdk.CatalogSchemaChangePolicy{}
					if f1valiter.S3HudiCatalogTarget.SchemaChangePolicy.EnableUpdateCatalog != nil {
						f1valf56f5.SetEnableUpdateCatalog(*f1valiter.S3HudiCatalogTarget.SchemaChangePolicy.EnableUpdateCatalog)
					}
					if f1valiter.S3HudiCatalogTarget.SchemaChangePolicy.UpdateBehavior != nil {
						f1valf56f5.SetUpdateBehavior(*f1valiter.S3HudiCatalogTarget.SchemaChangePolicy.UpdateBehavior)
					}
					f1valf56.SetSchemaChangePolicy(f1valf56f5)
				}
				if f1valiter.S3HudiCatalogTarget.Table != nil {
					f1valf56.SetTable(*f1valiter.S3HudiCatalogTarget.Table)
				}
				f1val.SetS3HudiCatalogTarget(f1valf56)
			}
			if f1valiter.S3HudiDirectTarget != nil {
				f1valf57 := &svcsdk.S3HudiDirectTarget{}
				if f1valiter.S3HudiDirectTarget.AdditionalOptions != nil {
					f1valf57f0 := map[string]*string{}
					for f1valf57f0key, f1valf57f0valiter := range f1valiter.S3HudiDirectTarget.AdditionalOptions {
						var f1valf57f0val string
						f1valf57f0val = *f1valf57f0valiter
						f1valf57f0[f1valf57f0key] = &f1valf57f0val
					}
					f1valf57.SetAdditionalOptions(f1valf57f0)
				}
				if f1valiter.S3HudiDirectTarget.Compression != nil {
					f1valf57.SetCompression(*f1valiter.S3HudiDirectTarget.Compression)
				}
				if f1valiter.S3HudiDirectTarget.Format != nil {
					f1valf57.SetFormat(*f1valiter.S3HudiDirectTarget.Format)
				}
				if f1valiter.S3HudiDirectTarget.Inputs != nil {
					f1valf57f3 := []*string{}
					for _, f1valf57f3iter := range f1valiter.S3HudiDirectTarget.Inputs {
						var f1valf57f3elem string
						f1valf57f3elem = *f1valf57f3iter
						f1valf57f3 = append(f1valf57f3, &f1valf57f3elem)
					}
					f1valf57.SetInputs(f1valf57f3)
				}
				if f1valiter.S3HudiDirectTarget.Name != nil {
					f1valf57.SetName(*f1valiter.S3HudiDirectTarget.Name)
				}
				if f1valiter.S3HudiDirectTarget.PartitionKeys != nil {
					f1valf57f5 := [][]*string{}
					for _, f1valf57f5iter := range f1valiter.S3HudiDirectTarget.PartitionKeys {
						f1valf57f5elem := []*string{}
						for _, f1valf57f5elemiter := range f1valf57f5iter {
							var f1valf57f5elemelem string
							f1valf57f5elemelem = *f1valf57f5elemiter
							f1valf57f5elem = append(f1valf57f5elem, &f1valf57f5elemelem)
						}
						f1valf57f5 = append(f1valf57f5, f1valf57f5elem)
					}
					f1valf57.SetPartitionKeys(f1valf57f5)
				}
				if f1valiter.S3HudiDirectTarget.Path != nil {
					f1valf57.SetPath(*f1valiter.S3HudiDirectTarget.Path)
				}
				if f1valiter.S3HudiDirectTarget.SchemaChangePolicy != nil {
					f1valf57f7 := &svcsdk.DirectSchemaChangePolicy{}
					if f1valiter.S3HudiDirectTarget.SchemaChangePolicy.Database != nil {
						f1valf57f7.SetDatabase(*f1valiter.S3HudiDirectTarget.SchemaChangePolicy.Database)
					}
					if f1valiter.S3HudiDirectTarget.SchemaChangePolicy.EnableUpdateCatalog != nil {
						f1valf57f7.SetEnableUpdateCatalog(*f1valiter.S3HudiDirectTarget.SchemaChangePolicy.EnableUpdateCatalog)
					}
					if f1valiter.S3HudiDirectTarget.SchemaChangePolicy.Table != nil {
						f1valf57f7.SetTable(*f1valiter.S3HudiDirectTarget.SchemaChangePolicy.Table)
					}
					if f1valiter.S3HudiDirectTarget.SchemaChangePolicy.UpdateBehavior != nil {
						f1valf57f7.SetUpdateBehavior(*f1valiter.S3HudiDirectTarget.SchemaChangePolicy.UpdateBehavior)
					}
					f1valf57.SetSchemaChangePolicy(f1valf57f7)
				}
				f1val.SetS3HudiDirectTarget(f1valf57)
			}
			if f1valiter.S3HudiSource != nil {
				f1valf58 := &svcsdk.S3HudiSource{}
				if f1valiter.S3HudiSource.AdditionalHudiOptions != nil {
					f1valf58f0 := map[string]*string{}
					for f1valf58f0key, f1valf58f0valiter := range f1valiter.S3HudiSource.AdditionalHudiOptions {
						var f1valf58f0val string
						f1valf58f0val = *f1valf58f0valiter
						f1valf58f0[f1valf58f0key] = &f1valf58f0val
					}
					f1valf58.SetAdditionalHudiOptions(f1valf58f0)
				}
				if f1valiter.S3HudiSource.AdditionalOptions != nil {
					f1valf58f1 := &svcsdk.S3DirectSourceAdditionalOptions{}
					if f1valiter.S3HudiSource.AdditionalOptions.BoundedFiles != nil {
						f1valf58f1.SetBoundedFiles(*f1valiter.S3HudiSource.AdditionalOptions.BoundedFiles)
					}
					if f1valiter.S3HudiSource.AdditionalOptions.BoundedSize != nil {
						f1valf58f1.SetBoundedSize(*f1valiter.S3HudiSource.AdditionalOptions.BoundedSize)
					}
					if f1valiter.S3HudiSource.AdditionalOptions.EnableSamplePath != nil {
						f1valf58f1.SetEnableSamplePath(*f1valiter.S3HudiSource.AdditionalOptions.EnableSamplePath)
					}
					if f1valiter.S3HudiSource.AdditionalOptions.SamplePath != nil {
						f1valf58f1.SetSamplePath(*f1valiter.S3HudiSource.AdditionalOptions.SamplePath)
					}
					f1valf58.SetAdditionalOptions(f1valf58f1)
				}
				if f1valiter.S3HudiSource.Name != nil {
					f1valf58.SetName(*f1valiter.S3HudiSource.Name)
				}
				if f1valiter.S3HudiSource.OutputSchemas != nil {
					f1valf58f3 := []*svcsdk.GlueSchema{}
					for _, f1valf58f3iter := range f1valiter.S3HudiSource.OutputSchemas {
						f1valf58f3elem := &svcsdk.GlueSchema{}
						if f1valf58f3iter.Columns != nil {
							f1valf58f3elemf0 := []*svcsdk.GlueStudioSchemaColumn{}
							for _, f1valf58f3elemf0iter := range f1valf58f3iter.Columns {
								f1valf58f3elemf0elem := &svcsdk.GlueStudioSchemaColumn{}
								if f1valf58f3elemf0iter.Name != nil {
									f1valf58f3elemf0elem.SetName(*f1valf58f3elemf0iter.Name)
								}
								if f1valf58f3elemf0iter.Type != nil {
									f1valf58f3elemf0elem.SetType(*f1valf58f3elemf0iter.Type)
								}
								f1valf58f3elemf0 = append(f1valf58f3elemf0, f1valf58f3elemf0elem)
							}
							f1valf58f3elem.SetColumns(f1valf58f3elemf0)
						}
						f1valf58f3 = append(f1valf58f3, f1valf58f3elem)
					}
					f1valf58.SetOutputSchemas(f1valf58f3)
				}
				if f1valiter.S3HudiSource.Paths != nil {
					f1valf58f4 := []*string{}
					for _, f1valf58f4iter := range f1valiter.S3HudiSource.Paths {
						var f1valf58f4elem string
						f1valf58f4elem = *f1valf58f4iter
						f1valf58f4 = append(f1valf58f4, &f1valf58f4elem)
					}
					f1valf58.SetPaths(f1valf58f4)
				}
				f1val.SetS3HudiSource(f1valf58)
			}
			if f1valiter.S3JSONSource != nil {
				f1valf59 := &svcsdk.S3JsonSource{}
				if f1valiter.S3JSONSource.AdditionalOptions != nil {
					f1valf59f0 := &svcsdk.S3DirectSourceAdditionalOptions{}
					if f1valiter.S3JSONSource.AdditionalOptions.BoundedFiles != nil {
						f1valf59f0.SetBoundedFiles(*f1valiter.S3JSONSource.AdditionalOptions.BoundedFiles)
					}
					if f1valiter.S3JSONSource.AdditionalOptions.BoundedSize != nil {
						f1valf59f0.SetBoundedSize(*f1valiter.S3JSONSource.AdditionalOptions.BoundedSize)
					}
					if f1valiter.S3JSONSource.AdditionalOptions.EnableSamplePath != nil {
						f1valf59f0.SetEnableSamplePath(*f1valiter.S3JSONSource.AdditionalOptions.EnableSamplePath)
					}
					if f1valiter.S3JSONSource.AdditionalOptions.SamplePath != nil {
						f1valf59f0.SetSamplePath(*f1valiter.S3JSONSource.AdditionalOptions.SamplePath)
					}
					f1valf59.SetAdditionalOptions(f1valf59f0)
				}
				if f1valiter.S3JSONSource.CompressionType != nil {
					f1valf59.SetCompressionType(*f1valiter.S3JSONSource.CompressionType)
				}
				if f1valiter.S3JSONSource.Exclusions != nil {
					f1valf59f2 := []*string{}
					for _, f1valf59f2iter := range f1valiter.S3JSONSource.Exclusions {
						var f1valf59f2elem string
						f1valf59f2elem = *f1valf59f2iter
						f1valf59f2 = append(f1valf59f2, &f1valf59f2elem)
					}
					f1valf59.SetExclusions(f1valf59f2)
				}
				if f1valiter.S3JSONSource.GroupFiles != nil {
					f1valf59.SetGroupFiles(*f1valiter.S3JSONSource.GroupFiles)
				}
				if f1valiter.S3JSONSource.GroupSize != nil {
					f1valf59.SetGroupSize(*f1valiter.S3JSONSource.GroupSize)
				}
				if f1valiter.S3JSONSource.JSONPath != nil {
					f1valf59.SetJsonPath(*f1valiter.S3JSONSource.JSONPath)
				}
				if f1valiter.S3JSONSource.MaxBand != nil {
					f1valf59.SetMaxBand(*f1valiter.S3JSONSource.MaxBand)
				}
				if f1valiter.S3JSONSource.MaxFilesInBand != nil {
					f1valf59.SetMaxFilesInBand(*f1valiter.S3JSONSource.MaxFilesInBand)
				}
				if f1valiter.S3JSONSource.Multiline != nil {
					f1valf59.SetMultiline(*f1valiter.S3JSONSource.Multiline)
				}
				if f1valiter.S3JSONSource.Name != nil {
					f1valf59.SetName(*f1valiter.S3JSONSource.Name)
				}
				if f1valiter.S3JSONSource.OutputSchemas != nil {
					f1valf59f10 := []*svcsdk.GlueSchema{}
					for _, f1valf59f10iter := range f1valiter.S3JSONSource.OutputSchemas {
						f1valf59f10elem := &svcsdk.GlueSchema{}
						if f1valf59f10iter.Columns != nil {
							f1valf59f10elemf0 := []*svcsdk.GlueStudioSchemaColumn{}
							for _, f1valf59f10elemf0iter := range f1valf59f10iter.Columns {
								f1valf59f10elemf0elem := &svcsdk.GlueStudioSchemaColumn{}
								if f1valf59f10elemf0iter.Name != nil {
									f1valf59f10elemf0elem.SetName(*f1valf59f10elemf0iter.Name)
								}
								if f1valf59f10elemf0iter.Type != nil {
									f1valf59f10elemf0elem.SetType(*f1valf59f10elemf0iter.Type)
								}
								f1valf59f10elemf0 = append(f1valf59f10elemf0, f1valf59f10elemf0elem)
							}
							f1valf59f10elem.SetColumns(f1valf59f10elemf0)
						}
						f1valf59f10 = append(f1valf59f10, f1valf59f10elem)
					}
					f1valf59.SetOutputSchemas(f1valf59f10)
				}
				if f1valiter.S3JSONSource.Paths != nil {
					f1valf59f11 := []*string{}
					for _, f1valf59f11iter := range f1valiter.S3JSONSource.Paths {
						var f1valf59f11elem string
						f1valf59f11elem = *f1valf59f11iter
						f1valf59f11 = append(f1valf59f11, &f1valf59f11elem)
					}
					f1valf59.SetPaths(f1valf59f11)
				}
				if f1valiter.S3JSONSource.Recurse != nil {
					f1valf59.SetRecurse(*f1valiter.S3JSONSource.Recurse)
				}
				f1val.SetS3JsonSource(f1valf59)
			}
			if f1valiter.S3ParquetSource != nil {
				f1valf60 := &svcsdk.S3ParquetSource{}
				if f1valiter.S3ParquetSource.AdditionalOptions != nil {
					f1valf60f0 := &svcsdk.S3DirectSourceAdditionalOptions{}
					if f1valiter.S3ParquetSource.AdditionalOptions.BoundedFiles != nil {
						f1valf60f0.SetBoundedFiles(*f1valiter.S3ParquetSource.AdditionalOptions.BoundedFiles)
					}
					if f1valiter.S3ParquetSource.AdditionalOptions.BoundedSize != nil {
						f1valf60f0.SetBoundedSize(*f1valiter.S3ParquetSource.AdditionalOptions.BoundedSize)
					}
					if f1valiter.S3ParquetSource.AdditionalOptions.EnableSamplePath != nil {
						f1valf60f0.SetEnableSamplePath(*f1valiter.S3ParquetSource.AdditionalOptions.EnableSamplePath)
					}
					if f1valiter.S3ParquetSource.AdditionalOptions.SamplePath != nil {
						f1valf60f0.SetSamplePath(*f1valiter.S3ParquetSource.AdditionalOptions.SamplePath)
					}
					f1valf60.SetAdditionalOptions(f1valf60f0)
				}
				if f1valiter.S3ParquetSource.CompressionType != nil {
					f1valf60.SetCompressionType(*f1valiter.S3ParquetSource.CompressionType)
				}
				if f1valiter.S3ParquetSource.Exclusions != nil {
					f1valf60f2 := []*string{}
					for _, f1valf60f2iter := range f1valiter.S3ParquetSource.Exclusions {
						var f1valf60f2elem string
						f1valf60f2elem = *f1valf60f2iter
						f1valf60f2 = append(f1valf60f2, &f1valf60f2elem)
					}
					f1valf60.SetExclusions(f1valf60f2)
				}
				if f1valiter.S3ParquetSource.GroupFiles != nil {
					f1valf60.SetGroupFiles(*f1valiter.S3ParquetSource.GroupFiles)
				}
				if f1valiter.S3ParquetSource.GroupSize != nil {
					f1valf60.SetGroupSize(*f1valiter.S3ParquetSource.GroupSize)
				}
				if f1valiter.S3ParquetSource.MaxBand != nil {
					f1valf60.SetMaxBand(*f1valiter.S3ParquetSource.MaxBand)
				}
				if f1valiter.S3ParquetSource.MaxFilesInBand != nil {
					f1valf60.SetMaxFilesInBand(*f1valiter.S3ParquetSource.MaxFilesInBand)
				}
				if f1valiter.S3ParquetSource.Name != nil {
					f1valf60.SetName(*f1valiter.S3ParquetSource.Name)
				}
				if f1valiter.S3ParquetSource.OutputSchemas != nil {
					f1valf60f8 := []*svcsdk.GlueSchema{}
					for _, f1valf60f8iter := range f1valiter.S3ParquetSource.OutputSchemas {
						f1valf60f8elem := &svcsdk.GlueSchema{}
						if f1valf60f8iter.Columns != nil {
							f1valf60f8elemf0 := []*svcsdk.GlueStudioSchemaColumn{}
							for _, f1valf60f8elemf0iter := range f1valf60f8iter.Columns {
								f1valf60f8elemf0elem := &svcsdk.GlueStudioSchemaColumn{}
								if f1valf60f8elemf0iter.Name != nil {
									f1valf60f8elemf0elem.SetName(*f1valf60f8elemf0iter.Name)
								}
								if f1valf60f8elemf0iter.Type != nil {
									f1valf60f8elemf0elem.SetType(*f1valf60f8elemf0iter.Type)
								}
								f1valf60f8elemf0 = append(f1valf60f8elemf0, f1valf60f8elemf0elem)
							}
							f1valf60f8elem.SetColumns(f1valf60f8elemf0)
						}
						f1valf60f8 = append(f1valf60f8, f1valf60f8elem)
					}
					f1valf60.SetOutputSchemas(f1valf60f8)
				}
				if f1valiter.S3ParquetSource.Paths != nil {
					f1valf60f9 := []*string{}
					for _, f1valf60f9iter := range f1valiter.S3ParquetSource.Paths {
						var f1valf60f9elem string
						f1valf60f9elem = *f1valf60f9iter
						f1valf60f9 = append(f1valf60f9, &f1valf60f9elem)
					}
					f1valf60.SetPaths(f1valf60f9)
				}
				if f1valiter.S3ParquetSource.Recurse != nil {
					f1valf60.SetRecurse(*f1valiter.S3ParquetSource.Recurse)
				}
				f1val.SetS3ParquetSource(f1valf60)
			}
			if f1valiter.SelectFields != nil {
				f1valf61 := &svcsdk.SelectFields{}
				if f1valiter.SelectFields.Inputs != nil {
					f1valf61f0 := []*string{}
					for _, f1valf61f0iter := range f1valiter.SelectFields.Inputs {
						var f1valf61f0elem string
						f1valf61f0elem = *f1valf61f0iter
						f1valf61f0 = append(f1valf61f0, &f1valf61f0elem)
					}
					f1valf61.SetInputs(f1valf61f0)
				}
				if f1valiter.SelectFields.Name != nil {
					f1valf61.SetName(*f1valiter.SelectFields.Name)
				}
				if f1valiter.SelectFields.Paths != nil {
					f1valf61f2 := [][]*string{}
					for _, f1valf61f2iter := range f1valiter.SelectFields.Paths {
						f1valf61f2elem := []*string{}
						for _, f1valf61f2elemiter := range f1valf61f2iter {
							var f1valf61f2elemelem string
							f1valf61f2elemelem = *f1valf61f2elemiter
							f1valf61f2elem = append(f1valf61f2elem, &f1valf61f2elemelem)
						}
						f1valf61f2 = append(f1valf61f2, f1valf61f2elem)
					}
					f1valf61.SetPaths(f1valf61f2)
				}
				f1val.SetSelectFields(f1valf61)
			}
			if f1valiter.SelectFromCollection != nil {
				f1valf62 := &svcsdk.SelectFromCollection{}
				if f1valiter.SelectFromCollection.Index != nil {
					f1valf62.SetIndex(*f1valiter.SelectFromCollection.Index)
				}
				if f1valiter.SelectFromCollection.Inputs != nil {
					f1valf62f1 := []*string{}
					for _, f1valf62f1iter := range f1valiter.SelectFromCollection.Inputs {
						var f1valf62f1elem string
						f1valf62f1elem = *f1valf62f1iter
						f1valf62f1 = append(f1valf62f1, &f1valf62f1elem)
					}
					f1valf62.SetInputs(f1valf62f1)
				}
				if f1valiter.SelectFromCollection.Name != nil {
					f1valf62.SetName(*f1valiter.SelectFromCollection.Name)
				}
				f1val.SetSelectFromCollection(f1valf62)
			}
			if f1valiter.SnowflakeSource != nil {
				f1valf63 := &svcsdk.SnowflakeSource{}
				if f1valiter.SnowflakeSource.Data != nil {
					f1valf63f0 := &svcsdk.SnowflakeNodeData{}
					if f1valiter.SnowflakeSource.Data.Action != nil {
						f1valf63f0.SetAction(*f1valiter.SnowflakeSource.Data.Action)
					}
					if f1valiter.SnowflakeSource.Data.AdditionalOptions != nil {
						f1valf63f0f1 := map[string]*string{}
						for f1valf63f0f1key, f1valf63f0f1valiter := range f1valiter.SnowflakeSource.Data.AdditionalOptions {
							var f1valf63f0f1val string
							f1valf63f0f1val = *f1valf63f0f1valiter
							f1valf63f0f1[f1valf63f0f1key] = &f1valf63f0f1val
						}
						f1valf63f0.SetAdditionalOptions(f1valf63f0f1)
					}
					if f1valiter.SnowflakeSource.Data.AutoPushdown != nil {
						f1valf63f0.SetAutoPushdown(*f1valiter.SnowflakeSource.Data.AutoPushdown)
					}
					if f1valiter.SnowflakeSource.Data.Connection != nil {
						f1valf63f0f3 := &svcsdk.Option{}
						if f1valiter.SnowflakeSource.Data.Connection.Description != nil {
							f1valf63f0f3.SetDescription(*f1valiter.SnowflakeSource.Data.Connection.Description)
						}
						if f1valiter.SnowflakeSource.Data.Connection.Label != nil {
							f1valf63f0f3.SetLabel(*f1valiter.SnowflakeSource.Data.Connection.Label)
						}
						if f1valiter.SnowflakeSource.Data.Connection.Value != nil {
							f1valf63f0f3.SetValue(*f1valiter.SnowflakeSource.Data.Connection.Value)
						}
						f1valf63f0.SetConnection(f1valf63f0f3)
					}
					if f1valiter.SnowflakeSource.Data.Database != nil {
						f1valf63f0.SetDatabase(*f1valiter.SnowflakeSource.Data.Database)
					}
					if f1valiter.SnowflakeSource.Data.IAMRole != nil {
						f1valf63f0f5 := &svcsdk.Option{}
						if f1valiter.SnowflakeSource.Data.IAMRole.Description != nil {
							f1valf63f0f5.SetDescription(*f1valiter.SnowflakeSource.Data.IAMRole.Description)
						}
						if f1valiter.SnowflakeSource.Data.IAMRole.Label != nil {
							f1valf63f0f5.SetLabel(*f1valiter.SnowflakeSource.Data.IAMRole.Label)
						}
						if f1valiter.SnowflakeSource.Data.IAMRole.Value != nil {
							f1valf63f0f5.SetValue(*f1valiter.SnowflakeSource.Data.IAMRole.Value)
						}
						f1valf63f0.SetIamRole(f1valf63f0f5)
					}
					if f1valiter.SnowflakeSource.Data.MergeAction != nil {
						f1valf63f0.SetMergeAction(*f1valiter.SnowflakeSource.Data.MergeAction)
					}
					if f1valiter.SnowflakeSource.Data.MergeClause != nil {
						f1valf63f0.SetMergeClause(*f1valiter.SnowflakeSource.Data.MergeClause)
					}
					if f1valiter.SnowflakeSource.Data.MergeWhenMatched != nil {
						f1valf63f0.SetMergeWhenMatched(*f1valiter.SnowflakeSource.Data.MergeWhenMatched)
					}
					if f1valiter.SnowflakeSource.Data.MergeWhenNotMatched != nil {
						f1valf63f0.SetMergeWhenNotMatched(*f1valiter.SnowflakeSource.Data.MergeWhenNotMatched)
					}
					if f1valiter.SnowflakeSource.Data.PostAction != nil {
						f1valf63f0.SetPostAction(*f1valiter.SnowflakeSource.Data.PostAction)
					}
					if f1valiter.SnowflakeSource.Data.PreAction != nil {
						f1valf63f0.SetPreAction(*f1valiter.SnowflakeSource.Data.PreAction)
					}
					if f1valiter.SnowflakeSource.Data.SampleQuery != nil {
						f1valf63f0.SetSampleQuery(*f1valiter.SnowflakeSource.Data.SampleQuery)
					}
					if f1valiter.SnowflakeSource.Data.Schema != nil {
						f1valf63f0.SetSchema(*f1valiter.SnowflakeSource.Data.Schema)
					}
					if f1valiter.SnowflakeSource.Data.SelectedColumns != nil {
						f1valf63f0f14 := []*svcsdk.Option{}
						for _, f1valf63f0f14iter := range f1valiter.SnowflakeSource.Data.SelectedColumns {
							f1valf63f0f14elem := &svcsdk.Option{}
							if f1valf63f0f14iter.Description != nil {
								f1valf63f0f14elem.SetDescription(*f1valf63f0f14iter.Description)
							}
							if f1valf63f0f14iter.Label != nil {
								f1valf63f0f14elem.SetLabel(*f1valf63f0f14iter.Label)
							}
							if f1valf63f0f14iter.Value != nil {
								f1valf63f0f14elem.SetValue(*f1valf63f0f14iter.Value)
							}
							f1valf63f0f14 = append(f1valf63f0f14, f1valf63f0f14elem)
						}
						f1valf63f0.SetSelectedColumns(f1valf63f0f14)
					}
					if f1valiter.SnowflakeSource.Data.SourceType != nil {
						f1valf63f0.SetSourceType(*f1valiter.SnowflakeSource.Data.SourceType)
					}
					if f1valiter.SnowflakeSource.Data.StagingTable != nil {
						f1valf63f0.SetStagingTable(*f1valiter.SnowflakeSource.Data.StagingTable)
					}
					if f1valiter.SnowflakeSource.Data.Table != nil {
						f1valf63f0.SetTable(*f1valiter.SnowflakeSource.Data.Table)
					}
					if f1valiter.SnowflakeSource.Data.TableSchema != nil {
						f1valf63f0f18 := []*svcsdk.Option{}
						for _, f1valf63f0f18iter := range f1valiter.SnowflakeSource.Data.TableSchema {
							f1valf63f0f18elem := &svcsdk.Option{}
							if f1valf63f0f18iter.Description != nil {
								f1valf63f0f18elem.SetDescription(*f1valf63f0f18iter.Description)
							}
							if f1valf63f0f18iter.Label != nil {
								f1valf63f0f18elem.SetLabel(*f1valf63f0f18iter.Label)
							}
							if f1valf63f0f18iter.Value != nil {
								f1valf63f0f18elem.SetValue(*f1valf63f0f18iter.Value)
							}
							f1valf63f0f18 = append(f1valf63f0f18, f1valf63f0f18elem)
						}
						f1valf63f0.SetTableSchema(f1valf63f0f18)
					}
					if f1valiter.SnowflakeSource.Data.TempDir != nil {
						f1valf63f0.SetTempDir(*f1valiter.SnowflakeSource.Data.TempDir)
					}
					if f1valiter.SnowflakeSource.Data.Upsert != nil {
						f1valf63f0.SetUpsert(*f1valiter.SnowflakeSource.Data.Upsert)
					}
					f1valf63.SetData(f1valf63f0)
				}
				if f1valiter.SnowflakeSource.Name != nil {
					f1valf63.SetName(*f1valiter.SnowflakeSource.Name)
				}
				if f1valiter.SnowflakeSource.OutputSchemas != nil {
					f1valf63f2 := []*svcsdk.GlueSchema{}
					for _, f1valf63f2iter := range f1valiter.SnowflakeSource.OutputSchemas {
						f1valf63f2elem := &svcsdk.GlueSchema{}
						if f1valf63f2iter.Columns != nil {
							f1valf63f2elemf0 := []*svcsdk.GlueStudioSchemaColumn{}
							for _, f1valf63f2elemf0iter := range f1valf63f2iter.Columns {
								f1valf63f2elemf0elem := &svcsdk.GlueStudioSchemaColumn{}
								if f1valf63f2elemf0iter.Name != nil {
									f1valf63f2elemf0elem.SetName(*f1valf63f2elemf0iter.Name)
								}
								if f1valf63f2elemf0iter.Type != nil {
									f1valf63f2elemf0elem.SetType(*f1valf63f2elemf0iter.Type)
								}
								f1valf63f2elemf0 = append(f1valf63f2elemf0, f1valf63f2elemf0elem)
							}
							f1valf63f2elem.SetColumns(f1valf63f2elemf0)
						}
						f1valf63f2 = append(f1valf63f2, f1valf63f2elem)
					}
					f1valf63.SetOutputSchemas(f1valf63f2)
				}
				f1val.SetSnowflakeSource(f1valf63)
			}
			if f1valiter.SnowflakeTarget != nil {
				f1valf64 := &svcsdk.SnowflakeTarget{}
				if f1valiter.SnowflakeTarget.Data != nil {
					f1valf64f0 := &svcsdk.SnowflakeNodeData{}
					if f1valiter.SnowflakeTarget.Data.Action != nil {
						f1valf64f0.SetAction(*f1valiter.SnowflakeTarget.Data.Action)
					}
					if f1valiter.SnowflakeTarget.Data.AdditionalOptions != nil {
						f1valf64f0f1 := map[string]*string{}
						for f1valf64f0f1key, f1valf64f0f1valiter := range f1valiter.SnowflakeTarget.Data.AdditionalOptions {
							var f1valf64f0f1val string
							f1valf64f0f1val = *f1valf64f0f1valiter
							f1valf64f0f1[f1valf64f0f1key] = &f1valf64f0f1val
						}
						f1valf64f0.SetAdditionalOptions(f1valf64f0f1)
					}
					if f1valiter.SnowflakeTarget.Data.AutoPushdown != nil {
						f1valf64f0.SetAutoPushdown(*f1valiter.SnowflakeTarget.Data.AutoPushdown)
					}
					if f1valiter.SnowflakeTarget.Data.Connection != nil {
						f1valf64f0f3 := &svcsdk.Option{}
						if f1valiter.SnowflakeTarget.Data.Connection.Description != nil {
							f1valf64f0f3.SetDescription(*f1valiter.SnowflakeTarget.Data.Connection.Description)
						}
						if f1valiter.SnowflakeTarget.Data.Connection.Label != nil {
							f1valf64f0f3.SetLabel(*f1valiter.SnowflakeTarget.Data.Connection.Label)
						}
						if f1valiter.SnowflakeTarget.Data.Connection.Value != nil {
							f1valf64f0f3.SetValue(*f1valiter.SnowflakeTarget.Data.Connection.Value)
						}
						f1valf64f0.SetConnection(f1valf64f0f3)
					}
					if f1valiter.SnowflakeTarget.Data.Database != nil {
						f1valf64f0.SetDatabase(*f1valiter.SnowflakeTarget.Data.Database)
					}
					if f1valiter.SnowflakeTarget.Data.IAMRole != nil {
						f1valf64f0f5 := &svcsdk.Option{}
						if f1valiter.SnowflakeTarget.Data.IAMRole.Description != nil {
							f1valf64f0f5.SetDescription(*f1valiter.SnowflakeTarget.Data.IAMRole.Description)
						}
						if f1valiter.SnowflakeTarget.Data.IAMRole.Label != nil {
							f1valf64f0f5.SetLabel(*f1valiter.SnowflakeTarget.Data.IAMRole.Label)
						}
						if f1valiter.SnowflakeTarget.Data.IAMRole.Value != nil {
							f1valf64f0f5.SetValue(*f1valiter.SnowflakeTarget.Data.IAMRole.Value)
						}
						f1valf64f0.SetIamRole(f1valf64f0f5)
					}
					if f1valiter.SnowflakeTarget.Data.MergeAction != nil {
						f1valf64f0.SetMergeAction(*f1valiter.SnowflakeTarget.Data.MergeAction)
					}
					if f1valiter.SnowflakeTarget.Data.MergeClause != nil {
						f1valf64f0.SetMergeClause(*f1valiter.SnowflakeTarget.Data.MergeClause)
					}
					if f1valiter.SnowflakeTarget.Data.MergeWhenMatched != nil {
						f1valf64f0.SetMergeWhenMatched(*f1valiter.SnowflakeTarget.Data.MergeWhenMatched)
					}
					if f1valiter.SnowflakeTarget.Data.MergeWhenNotMatched != nil {
						f1valf64f0.SetMergeWhenNotMatched(*f1valiter.SnowflakeTarget.Data.MergeWhenNotMatched)
					}
					if f1valiter.SnowflakeTarget.Data.PostAction != nil {
						f1valf64f0.SetPostAction(*f1valiter.SnowflakeTarget.Data.PostAction)
					}
					if f1valiter.SnowflakeTarget.Data.PreAction != nil {
						f1valf64f0.SetPreAction(*f1valiter.SnowflakeTarget.Data.PreAction)
					}
					if f1valiter.SnowflakeTarget.Data.SampleQuery != nil {
						f1valf64f0.SetSampleQuery(*f1valiter.SnowflakeTarget.Data.SampleQuery)
					}
					if f1valiter.SnowflakeTarget.Data.Schema != nil {
						f1valf64f0.SetSchema(*f1valiter.SnowflakeTarget.Data.Schema)
					}
					if f1valiter.SnowflakeTarget.Data.SelectedColumns != nil {
						f1valf64f0f14 := []*svcsdk.Option{}
						for _, f1valf64f0f14iter := range f1valiter.SnowflakeTarget.Data.SelectedColumns {
							f1valf64f0f14elem := &svcsdk.Option{}
							if f1valf64f0f14iter.Description != nil {
								f1valf64f0f14elem.SetDescription(*f1valf64f0f14iter.Description)
							}
							if f1valf64f0f14iter.Label != nil {
								f1valf64f0f14elem.SetLabel(*f1valf64f0f14iter.Label)
							}
							if f1valf64f0f14iter.Value != nil {
								f1valf64f0f14elem.SetValue(*f1valf64f0f14iter.Value)
							}
							f1valf64f0f14 = append(f1valf64f0f14, f1valf64f0f14elem)
						}
						f1valf64f0.SetSelectedColumns(f1valf64f0f14)
					}
					if f1valiter.SnowflakeTarget.Data.SourceType != nil {
						f1valf64f0.SetSourceType(*f1valiter.SnowflakeTarget.Data.SourceType)
					}
					if f1valiter.SnowflakeTarget.Data.StagingTable != nil {
						f1valf64f0.SetStagingTable(*f1valiter.SnowflakeTarget.Data.StagingTable)
					}
					if f1valiter.SnowflakeTarget.Data.Table != nil {
						f1valf64f0.SetTable(*f1valiter.SnowflakeTarget.Data.Table)
					}
					if f1valiter.SnowflakeTarget.Data.TableSchema != nil {
						f1valf64f0f18 := []*svcsdk.Option{}
						for _, f1valf64f0f18iter := range f1valiter.SnowflakeTarget.Data.TableSchema {
							f1valf64f0f18elem := &svcsdk.Option{}
							if f1valf64f0f18iter.Description != nil {
								f1valf64f0f18elem.SetDescription(*f1valf64f0f18iter.Description)
							}
							if f1valf64f0f18iter.Label != nil {
								f1valf64f0f18elem.SetLabel(*f1valf64f0f18iter.Label)
							}
							if f1valf64f0f18iter.Value != nil {
								f1valf64f0f18elem.SetValue(*f1valf64f0f18iter.Value)
							}
							f1valf64f0f18 = append(f1valf64f0f18, f1valf64f0f18elem)
						}
						f1valf64f0.SetTableSchema(f1valf64f0f18)
					}
					if f1valiter.SnowflakeTarget.Data.TempDir != nil {
						f1valf64f0.SetTempDir(*f1valiter.SnowflakeTarget.Data.TempDir)
					}
					if f1valiter.SnowflakeTarget.Data.Upsert != nil {
						f1valf64f0.SetUpsert(*f1valiter.SnowflakeTarget.Data.Upsert)
					}
					f1valf64.SetData(f1valf64f0)
				}
				if f1valiter.SnowflakeTarget.Inputs != nil {
					f1valf64f1 := []*string{}
					for _, f1valf64f1iter := range f1valiter.SnowflakeTarget.Inputs {
						var f1valf64f1elem string
						f1valf64f1elem = *f1valf64f1iter
						f1valf64f1 = append(f1valf64f1, &f1valf64f1elem)
					}
					f1valf64.SetInputs(f1valf64f1)
				}
				if f1valiter.SnowflakeTarget.Name != nil {
					f1valf64.SetName(*f1valiter.SnowflakeTarget.Name)
				}
				f1val.SetSnowflakeTarget(f1valf64)
			}
			if f1valiter.SparkConnectorSource != nil {
				f1valf65 := &svcsdk.SparkConnectorSource{}
				if f1valiter.SparkConnectorSource.AdditionalOptions != nil {
					f1valf65f0 := map[string]*string{}
					for f1valf65f0key, f1valf65f0valiter := range f1valiter.SparkConnectorSource.AdditionalOptions {
						var f1valf65f0val string
						f1valf65f0val = *f1valf65f0valiter
						f1valf65f0[f1valf65f0key] = &f1valf65f0val
					}
					f1valf65.SetAdditionalOptions(f1valf65f0)
				}
				if f1valiter.SparkConnectorSource.ConnectionName != nil {
					f1valf65.SetConnectionName(*f1valiter.SparkConnectorSource.ConnectionName)
				}
				if f1valiter.SparkConnectorSource.ConnectionType != nil {
					f1valf65.SetConnectionType(*f1valiter.SparkConnectorSource.ConnectionType)
				}
				if f1valiter.SparkConnectorSource.ConnectorName != nil {
					f1valf65.SetConnectorName(*f1valiter.SparkConnectorSource.ConnectorName)
				}
				if f1valiter.SparkConnectorSource.Name != nil {
					f1valf65.SetName(*f1valiter.SparkConnectorSource.Name)
				}
				if f1valiter.SparkConnectorSource.OutputSchemas != nil {
					f1valf65f5 := []*svcsdk.GlueSchema{}
					for _, f1valf65f5iter := range f1valiter.SparkConnectorSource.OutputSchemas {
						f1valf65f5elem := &svcsdk.GlueSchema{}
						if f1valf65f5iter.Columns != nil {
							f1valf65f5elemf0 := []*svcsdk.GlueStudioSchemaColumn{}
							for _, f1valf65f5elemf0iter := range f1valf65f5iter.Columns {
								f1valf65f5elemf0elem := &svcsdk.GlueStudioSchemaColumn{}
								if f1valf65f5elemf0iter.Name != nil {
									f1valf65f5elemf0elem.SetName(*f1valf65f5elemf0iter.Name)
								}
								if f1valf65f5elemf0iter.Type != nil {
									f1valf65f5elemf0elem.SetType(*f1valf65f5elemf0iter.Type)
								}
								f1valf65f5elemf0 = append(f1valf65f5elemf0, f1valf65f5elemf0elem)
							}
							f1valf65f5elem.SetColumns(f1valf65f5elemf0)
						}
						f1valf65f5 = append(f1valf65f5, f1valf65f5elem)
					}
					f1valf65.SetOutputSchemas(f1valf65f5)
				}
				f1val.SetSparkConnectorSource(f1valf65)
			}
			if f1valiter.SparkConnectorTarget != nil {
				f1valf66 := &svcsdk.SparkConnectorTarget{}
				if f1valiter.SparkConnectorTarget.AdditionalOptions != nil {
					f1valf66f0 := map[string]*string{}
					for f1valf66f0key, f1valf66f0valiter := range f1valiter.SparkConnectorTarget.AdditionalOptions {
						var f1valf66f0val string
						f1valf66f0val = *f1valf66f0valiter
						f1valf66f0[f1valf66f0key] = &f1valf66f0val
					}
					f1valf66.SetAdditionalOptions(f1valf66f0)
				}
				if f1valiter.SparkConnectorTarget.ConnectionName != nil {
					f1valf66.SetConnectionName(*f1valiter.SparkConnectorTarget.ConnectionName)
				}
				if f1valiter.SparkConnectorTarget.ConnectionType != nil {
					f1valf66.SetConnectionType(*f1valiter.SparkConnectorTarget.ConnectionType)
				}
				if f1valiter.SparkConnectorTarget.ConnectorName != nil {
					f1valf66.SetConnectorName(*f1valiter.SparkConnectorTarget.ConnectorName)
				}
				if f1valiter.SparkConnectorTarget.Inputs != nil {
					f1valf66f4 := []*string{}
					for _, f1valf66f4iter := range f1valiter.SparkConnectorTarget.Inputs {
						var f1valf66f4elem string
						f1valf66f4elem = *f1valf66f4iter
						f1valf66f4 = append(f1valf66f4, &f1valf66f4elem)
					}
					f1valf66.SetInputs(f1valf66f4)
				}
				if f1valiter.SparkConnectorTarget.Name != nil {
					f1valf66.SetName(*f1valiter.SparkConnectorTarget.Name)
				}
				if f1valiter.SparkConnectorTarget.OutputSchemas != nil {
					f1valf66f6 := []*svcsdk.GlueSchema{}
					for _, f1valf66f6iter := range f1valiter.SparkConnectorTarget.OutputSchemas {
						f1valf66f6elem := &svcsdk.GlueSchema{}
						if f1valf66f6iter.Columns != nil {
							f1valf66f6elemf0 := []*svcsdk.GlueStudioSchemaColumn{}
							for _, f1valf66f6elemf0iter := range f1valf66f6iter.Columns {
								f1valf66f6elemf0elem := &svcsdk.GlueStudioSchemaColumn{}
								if f1valf66f6elemf0iter.Name != nil {
									f1valf66f6elemf0elem.SetName(*f1valf66f6elemf0iter.Name)
								}
								if f1valf66f6elemf0iter.Type != nil {
									f1valf66f6elemf0elem.SetType(*f1valf66f6elemf0iter.Type)
								}
								f1valf66f6elemf0 = append(f1valf66f6elemf0, f1valf66f6elemf0elem)
							}
							f1valf66f6elem.SetColumns(f1valf66f6elemf0)
						}
						f1valf66f6 = append(f1valf66f6, f1valf66f6elem)
					}
					f1valf66.SetOutputSchemas(f1valf66f6)
				}
				f1val.SetSparkConnectorTarget(f1valf66)
			}
			if f1valiter.SparkSQL != nil {
				f1valf67 := &svcsdk.SparkSQL{}
				if f1valiter.SparkSQL.Inputs != nil {
					f1valf67f0 := []*string{}
					for _, f1valf67f0iter := range f1valiter.SparkSQL.Inputs {
						var f1valf67f0elem string
						f1valf67f0elem = *f1valf67f0iter
						f1valf67f0 = append(f1valf67f0, &f1valf67f0elem)
					}
					f1valf67.SetInputs(f1valf67f0)
				}
				if f1valiter.SparkSQL.Name != nil {
					f1valf67.SetName(*f1valiter.SparkSQL.Name)
				}
				if f1valiter.SparkSQL.OutputSchemas != nil {
					f1valf67f2 := []*svcsdk.GlueSchema{}
					for _, f1valf67f2iter := range f1valiter.SparkSQL.OutputSchemas {
						f1valf67f2elem := &svcsdk.GlueSchema{}
						if f1valf67f2iter.Columns != nil {
							f1valf67f2elemf0 := []*svcsdk.GlueStudioSchemaColumn{}
							for _, f1valf67f2elemf0iter := range f1valf67f2iter.Columns {
								f1valf67f2elemf0elem := &svcsdk.GlueStudioSchemaColumn{}
								if f1valf67f2elemf0iter.Name != nil {
									f1valf67f2elemf0elem.SetName(*f1valf67f2elemf0iter.Name)
								}
								if f1valf67f2elemf0iter.Type != nil {
									f1valf67f2elemf0elem.SetType(*f1valf67f2elemf0iter.Type)
								}
								f1valf67f2elemf0 = append(f1valf67f2elemf0, f1valf67f2elemf0elem)
							}
							f1valf67f2elem.SetColumns(f1valf67f2elemf0)
						}
						f1valf67f2 = append(f1valf67f2, f1valf67f2elem)
					}
					f1valf67.SetOutputSchemas(f1valf67f2)
				}
				if f1valiter.SparkSQL.SQLAliases != nil {
					f1valf67f3 := []*svcsdk.SqlAlias{}
					for _, f1valf67f3iter := range f1valiter.SparkSQL.SQLAliases {
						f1valf67f3elem := &svcsdk.SqlAlias{}
						if f1valf67f3iter.Alias != nil {
							f1valf67f3elem.SetAlias(*f1valf67f3iter.Alias)
						}
						if f1valf67f3iter.From != nil {
							f1valf67f3elem.SetFrom(*f1valf67f3iter.From)
						}
						f1valf67f3 = append(f1valf67f3, f1valf67f3elem)
					}
					f1valf67.SetSqlAliases(f1valf67f3)
				}
				if f1valiter.SparkSQL.SQLQuery != nil {
					f1valf67.SetSqlQuery(*f1valiter.SparkSQL.SQLQuery)
				}
				f1val.SetSparkSQL(f1valf67)
			}
			if f1valiter.Spigot != nil {
				f1valf68 := &svcsdk.Spigot{}
				if f1valiter.Spigot.Inputs != nil {
					f1valf68f0 := []*string{}
					for _, f1valf68f0iter := range f1valiter.Spigot.Inputs {
						var f1valf68f0elem string
						f1valf68f0elem = *f1valf68f0iter
						f1valf68f0 = append(f1valf68f0, &f1valf68f0elem)
					}
					f1valf68.SetInputs(f1valf68f0)
				}
				if f1valiter.Spigot.Name != nil {
					f1valf68.SetName(*f1valiter.Spigot.Name)
				}
				if f1valiter.Spigot.Path != nil {
					f1valf68.SetPath(*f1valiter.Spigot.Path)
				}
				if f1valiter.Spigot.Prob != nil {
					f1valf68.SetProb(*f1valiter.Spigot.Prob)
				}
				if f1valiter.Spigot.Topk != nil {
					f1valf68.SetTopk(*f1valiter.Spigot.Topk)
				}
				f1val.SetSpigot(f1valf68)
			}
			if f1valiter.SplitFields != nil {
				f1valf69 := &svcsdk.SplitFields{}
				if f1valiter.SplitFields.Inputs != nil {
					f1valf69f0 := []*string{}
					for _, f1valf69f0iter := range f1valiter.SplitFields.Inputs {
						var f1valf69f0elem string
						f1valf69f0elem = *f1valf69f0iter
						f1valf69f0 = append(f1valf69f0, &f1valf69f0elem)
					}
					f1valf69.SetInputs(f1valf69f0)
				}
				if f1valiter.SplitFields.Name != nil {
					f1valf69.SetName(*f1valiter.SplitFields.Name)
				}
				if f1valiter.SplitFields.Paths != nil {
					f1valf69f2 := [][]*string{}
					for _, f1valf69f2iter := range f1valiter.SplitFields.Paths {
						f1valf69f2elem := []*string{}
						for _, f1valf69f2elemiter := range f1valf69f2iter {
							var f1valf69f2elemelem string
							f1valf69f2elemelem = *f1valf69f2elemiter
							f1valf69f2elem = append(f1valf69f2elem, &f1valf69f2elemelem)
						}
						f1valf69f2 = append(f1valf69f2, f1valf69f2elem)
					}
					f1valf69.SetPaths(f1valf69f2)
				}
				f1val.SetSplitFields(f1valf69)
			}
			if f1valiter.Union != nil {
				f1valf70 := &svcsdk.Union{}
				if f1valiter.Union.Inputs != nil {
					f1valf70f0 := []*string{}
					for _, f1valf70f0iter := range f1valiter.Union.Inputs {
						var f1valf70f0elem string
						f1valf70f0elem = *f1valf70f0iter
						f1valf70f0 = append(f1valf70f0, &f1valf70f0elem)
					}
					f1valf70.SetInputs(f1valf70f0)
				}
				if f1valiter.Union.Name != nil {
					f1valf70.SetName(*f1valiter.Union.Name)
				}
				if f1valiter.Union.UnionType != nil {
					f1valf70.SetUnionType(*f1valiter.Union.UnionType)
				}
				f1val.SetUnion(f1valf70)
			}
			f1[f1key] = f1val
		}
		res.SetCodeGenConfigurationNodes(f1)
	}
	if cr.Spec.ForProvider.Command != nil {
		f2 := &svcsdk.JobCommand{}
		if cr.Spec.ForProvider.Command.Name != nil {
			f2.SetName(*cr.Spec.ForProvider.Command.Name)
		}
		if cr.Spec.ForProvider.Command.PythonVersion != nil {
			f2.SetPythonVersion(*cr.Spec.ForProvider.Command.PythonVersion)
		}
		if cr.Spec.ForProvider.Command.Runtime != nil {
			f2.SetRuntime(*cr.Spec.ForProvider.Command.Runtime)
		}
		if cr.Spec.ForProvider.Command.ScriptLocation != nil {
			f2.SetScriptLocation(*cr.Spec.ForProvider.Command.ScriptLocation)
		}
		res.SetCommand(f2)
	}
	if cr.Spec.ForProvider.DefaultArguments != nil {
		f3 := map[string]*string{}
		for f3key, f3valiter := range cr.Spec.ForProvider.DefaultArguments {
			var f3val string
			f3val = *f3valiter
			f3[f3key] = &f3val
		}
		res.SetDefaultArguments(f3)
	}
	if cr.Spec.ForProvider.Description != nil {
		res.SetDescription(*cr.Spec.ForProvider.Description)
	}
	if cr.Spec.ForProvider.ExecutionClass != nil {
		res.SetExecutionClass(*cr.Spec.ForProvider.ExecutionClass)
	}
	if cr.Spec.ForProvider.ExecutionProperty != nil {
		f6 := &svcsdk.ExecutionProperty{}
		if cr.Spec.ForProvider.ExecutionProperty.MaxConcurrentRuns != nil {
			f6.SetMaxConcurrentRuns(*cr.Spec.ForProvider.ExecutionProperty.MaxConcurrentRuns)
		}
		res.SetExecutionProperty(f6)
	}
	if cr.Spec.ForProvider.GlueVersion != nil {
		res.SetGlueVersion(*cr.Spec.ForProvider.GlueVersion)
	}
	if cr.Spec.ForProvider.LogURI != nil {
		res.SetLogUri(*cr.Spec.ForProvider.LogURI)
	}
	if cr.Spec.ForProvider.MaxCapacity != nil {
		res.SetMaxCapacity(*cr.Spec.ForProvider.MaxCapacity)
	}
	if cr.Spec.ForProvider.MaxRetries != nil {
		res.SetMaxRetries(*cr.Spec.ForProvider.MaxRetries)
	}
	if cr.Spec.ForProvider.NonOverridableArguments != nil {
		f11 := map[string]*string{}
		for f11key, f11valiter := range cr.Spec.ForProvider.NonOverridableArguments {
			var f11val string
			f11val = *f11valiter
			f11[f11key] = &f11val
		}
		res.SetNonOverridableArguments(f11)
	}
	if cr.Spec.ForProvider.NotificationProperty != nil {
		f12 := &svcsdk.NotificationProperty{}
		if cr.Spec.ForProvider.NotificationProperty.NotifyDelayAfter != nil {
			f12.SetNotifyDelayAfter(*cr.Spec.ForProvider.NotificationProperty.NotifyDelayAfter)
		}
		res.SetNotificationProperty(f12)
	}
	if cr.Spec.ForProvider.NumberOfWorkers != nil {
		res.SetNumberOfWorkers(*cr.Spec.ForProvider.NumberOfWorkers)
	}
	if cr.Spec.ForProvider.SourceControlDetails != nil {
		f14 := &svcsdk.SourceControlDetails{}
		if cr.Spec.ForProvider.SourceControlDetails.AuthStrategy != nil {
			f14.SetAuthStrategy(*cr.Spec.ForProvider.SourceControlDetails.AuthStrategy)
		}
		if cr.Spec.ForProvider.SourceControlDetails.AuthToken != nil {
			f14.SetAuthToken(*cr.Spec.ForProvider.SourceControlDetails.AuthToken)
		}
		if cr.Spec.ForProvider.SourceControlDetails.Branch != nil {
			f14.SetBranch(*cr.Spec.ForProvider.SourceControlDetails.Branch)
		}
		if cr.Spec.ForProvider.SourceControlDetails.Folder != nil {
			f14.SetFolder(*cr.Spec.ForProvider.SourceControlDetails.Folder)
		}
		if cr.Spec.ForProvider.SourceControlDetails.LastCommitID != nil {
			f14.SetLastCommitId(*cr.Spec.ForProvider.SourceControlDetails.LastCommitID)
		}
		if cr.Spec.ForProvider.SourceControlDetails.Owner != nil {
			f14.SetOwner(*cr.Spec.ForProvider.SourceControlDetails.Owner)
		}
		if cr.Spec.ForProvider.SourceControlDetails.Provider != nil {
			f14.SetProvider(*cr.Spec.ForProvider.SourceControlDetails.Provider)
		}
		if cr.Spec.ForProvider.SourceControlDetails.Repository != nil {
			f14.SetRepository(*cr.Spec.ForProvider.SourceControlDetails.Repository)
		}
		res.SetSourceControlDetails(f14)
	}
	if cr.Spec.ForProvider.Tags != nil {
		f15 := map[string]*string{}
		for f15key, f15valiter := range cr.Spec.ForProvider.Tags {
			var f15val string
			f15val = *f15valiter
			f15[f15key] = &f15val
		}
		res.SetTags(f15)
	}
	if cr.Spec.ForProvider.Timeout != nil {
		res.SetTimeout(*cr.Spec.ForProvider.Timeout)
	}
	if cr.Spec.ForProvider.WorkerType != nil {
		res.SetWorkerType(*cr.Spec.ForProvider.WorkerType)
	}

	return res
}

// GenerateUpdateJobInput returns an update input.
func GenerateUpdateJobInput(cr *svcapitypes.Job) *svcsdk.UpdateJobInput {
	res := &svcsdk.UpdateJobInput{}

	return res
}

// GenerateDeleteJobInput returns a deletion input.
func GenerateDeleteJobInput(cr *svcapitypes.Job) *svcsdk.DeleteJobInput {
	res := &svcsdk.DeleteJobInput{}

	return res
}

// IsNotFound returns whether the given error is of type NotFound or not.
func IsNotFound(err error) bool {
	awsErr, ok := err.(awserr.Error)
	return ok && awsErr.Code() == "EntityNotFoundException"
}
