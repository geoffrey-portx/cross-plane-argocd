// Code generated by github.com/jmattheis/goverter, DO NOT EDIT.

package convert

import (
	types "github.com/aws/aws-sdk-go-v2/service/elasticache/types"
	"time"
)

type ConverterImpl struct{}

func (c *ConverterImpl) DeepCopyAWSCacheCluster(source *types.CacheCluster) *types.CacheCluster {
	var pTypesCacheCluster *types.CacheCluster
	if source != nil {
		var typesCacheCluster types.CacheCluster
		var pString *string
		if (*source).ARN != nil {
			xstring := *(*source).ARN
			pString = &xstring
		}
		typesCacheCluster.ARN = pString
		var pBool *bool
		if (*source).AtRestEncryptionEnabled != nil {
			xbool := *(*source).AtRestEncryptionEnabled
			pBool = &xbool
		}
		typesCacheCluster.AtRestEncryptionEnabled = pBool
		var pBool2 *bool
		if (*source).AuthTokenEnabled != nil {
			xbool2 := *(*source).AuthTokenEnabled
			pBool2 = &xbool2
		}
		typesCacheCluster.AuthTokenEnabled = pBool2
		typesCacheCluster.AuthTokenLastModifiedDate = c.pTimeTimeToPTimeTime((*source).AuthTokenLastModifiedDate)
		var pBool3 *bool
		if (*source).AutoMinorVersionUpgrade != nil {
			xbool3 := *(*source).AutoMinorVersionUpgrade
			pBool3 = &xbool3
		}
		typesCacheCluster.AutoMinorVersionUpgrade = pBool3
		typesCacheCluster.CacheClusterCreateTime = c.pTimeTimeToPTimeTime((*source).CacheClusterCreateTime)
		var pString2 *string
		if (*source).CacheClusterId != nil {
			xstring2 := *(*source).CacheClusterId
			pString2 = &xstring2
		}
		typesCacheCluster.CacheClusterId = pString2
		var pString3 *string
		if (*source).CacheClusterStatus != nil {
			xstring3 := *(*source).CacheClusterStatus
			pString3 = &xstring3
		}
		typesCacheCluster.CacheClusterStatus = pString3
		var pString4 *string
		if (*source).CacheNodeType != nil {
			xstring4 := *(*source).CacheNodeType
			pString4 = &xstring4
		}
		typesCacheCluster.CacheNodeType = pString4
		var typesCacheNodeList []types.CacheNode
		if (*source).CacheNodes != nil {
			typesCacheNodeList = make([]types.CacheNode, len((*source).CacheNodes))
			for i := 0; i < len((*source).CacheNodes); i++ {
				typesCacheNodeList[i] = c.typesCacheNodeToTypesCacheNode((*source).CacheNodes[i])
			}
		}
		typesCacheCluster.CacheNodes = typesCacheNodeList
		typesCacheCluster.CacheParameterGroup = c.pTypesCacheParameterGroupStatusToPTypesCacheParameterGroupStatus((*source).CacheParameterGroup)
		var typesCacheSecurityGroupMembershipList []types.CacheSecurityGroupMembership
		if (*source).CacheSecurityGroups != nil {
			typesCacheSecurityGroupMembershipList = make([]types.CacheSecurityGroupMembership, len((*source).CacheSecurityGroups))
			for j := 0; j < len((*source).CacheSecurityGroups); j++ {
				typesCacheSecurityGroupMembershipList[j] = c.typesCacheSecurityGroupMembershipToTypesCacheSecurityGroupMembership((*source).CacheSecurityGroups[j])
			}
		}
		typesCacheCluster.CacheSecurityGroups = typesCacheSecurityGroupMembershipList
		var pString5 *string
		if (*source).CacheSubnetGroupName != nil {
			xstring5 := *(*source).CacheSubnetGroupName
			pString5 = &xstring5
		}
		typesCacheCluster.CacheSubnetGroupName = pString5
		var pString6 *string
		if (*source).ClientDownloadLandingPage != nil {
			xstring6 := *(*source).ClientDownloadLandingPage
			pString6 = &xstring6
		}
		typesCacheCluster.ClientDownloadLandingPage = pString6
		typesCacheCluster.ConfigurationEndpoint = c.pTypesEndpointToPTypesEndpoint((*source).ConfigurationEndpoint)
		var pString7 *string
		if (*source).Engine != nil {
			xstring7 := *(*source).Engine
			pString7 = &xstring7
		}
		typesCacheCluster.Engine = pString7
		var pString8 *string
		if (*source).EngineVersion != nil {
			xstring8 := *(*source).EngineVersion
			pString8 = &xstring8
		}
		typesCacheCluster.EngineVersion = pString8
		typesCacheCluster.IpDiscovery = types.IpDiscovery((*source).IpDiscovery)
		var typesLogDeliveryConfigurationList []types.LogDeliveryConfiguration
		if (*source).LogDeliveryConfigurations != nil {
			typesLogDeliveryConfigurationList = make([]types.LogDeliveryConfiguration, len((*source).LogDeliveryConfigurations))
			for k := 0; k < len((*source).LogDeliveryConfigurations); k++ {
				typesLogDeliveryConfigurationList[k] = c.typesLogDeliveryConfigurationToTypesLogDeliveryConfiguration((*source).LogDeliveryConfigurations[k])
			}
		}
		typesCacheCluster.LogDeliveryConfigurations = typesLogDeliveryConfigurationList
		typesCacheCluster.NetworkType = types.NetworkType((*source).NetworkType)
		typesCacheCluster.NotificationConfiguration = c.pTypesNotificationConfigurationToPTypesNotificationConfiguration((*source).NotificationConfiguration)
		var pInt32 *int32
		if (*source).NumCacheNodes != nil {
			xint32 := *(*source).NumCacheNodes
			pInt32 = &xint32
		}
		typesCacheCluster.NumCacheNodes = pInt32
		typesCacheCluster.PendingModifiedValues = c.pTypesPendingModifiedValuesToPTypesPendingModifiedValues((*source).PendingModifiedValues)
		var pString9 *string
		if (*source).PreferredAvailabilityZone != nil {
			xstring9 := *(*source).PreferredAvailabilityZone
			pString9 = &xstring9
		}
		typesCacheCluster.PreferredAvailabilityZone = pString9
		var pString10 *string
		if (*source).PreferredMaintenanceWindow != nil {
			xstring10 := *(*source).PreferredMaintenanceWindow
			pString10 = &xstring10
		}
		typesCacheCluster.PreferredMaintenanceWindow = pString10
		var pString11 *string
		if (*source).PreferredOutpostArn != nil {
			xstring11 := *(*source).PreferredOutpostArn
			pString11 = &xstring11
		}
		typesCacheCluster.PreferredOutpostArn = pString11
		var pString12 *string
		if (*source).ReplicationGroupId != nil {
			xstring12 := *(*source).ReplicationGroupId
			pString12 = &xstring12
		}
		typesCacheCluster.ReplicationGroupId = pString12
		var pBool4 *bool
		if (*source).ReplicationGroupLogDeliveryEnabled != nil {
			xbool4 := *(*source).ReplicationGroupLogDeliveryEnabled
			pBool4 = &xbool4
		}
		typesCacheCluster.ReplicationGroupLogDeliveryEnabled = pBool4
		var typesSecurityGroupMembershipList []types.SecurityGroupMembership
		if (*source).SecurityGroups != nil {
			typesSecurityGroupMembershipList = make([]types.SecurityGroupMembership, len((*source).SecurityGroups))
			for l := 0; l < len((*source).SecurityGroups); l++ {
				typesSecurityGroupMembershipList[l] = c.typesSecurityGroupMembershipToTypesSecurityGroupMembership((*source).SecurityGroups[l])
			}
		}
		typesCacheCluster.SecurityGroups = typesSecurityGroupMembershipList
		var pInt322 *int32
		if (*source).SnapshotRetentionLimit != nil {
			xint322 := *(*source).SnapshotRetentionLimit
			pInt322 = &xint322
		}
		typesCacheCluster.SnapshotRetentionLimit = pInt322
		var pString13 *string
		if (*source).SnapshotWindow != nil {
			xstring13 := *(*source).SnapshotWindow
			pString13 = &xstring13
		}
		typesCacheCluster.SnapshotWindow = pString13
		var pBool5 *bool
		if (*source).TransitEncryptionEnabled != nil {
			xbool5 := *(*source).TransitEncryptionEnabled
			pBool5 = &xbool5
		}
		typesCacheCluster.TransitEncryptionEnabled = pBool5
		typesCacheCluster.TransitEncryptionMode = types.TransitEncryptionMode((*source).TransitEncryptionMode)
		pTypesCacheCluster = &typesCacheCluster
	}
	return pTypesCacheCluster
}
func (c *ConverterImpl) pTimeTimeToPTimeTime(source *time.Time) *time.Time {
	var pTimeTime *time.Time
	if source != nil {
		var timeTime time.Time
		_ = (*source)
		pTimeTime = &timeTime
	}
	return pTimeTime
}
func (c *ConverterImpl) pTypesCacheParameterGroupStatusToPTypesCacheParameterGroupStatus(source *types.CacheParameterGroupStatus) *types.CacheParameterGroupStatus {
	var pTypesCacheParameterGroupStatus *types.CacheParameterGroupStatus
	if source != nil {
		var typesCacheParameterGroupStatus types.CacheParameterGroupStatus
		var stringList []string
		if (*source).CacheNodeIdsToReboot != nil {
			stringList = make([]string, len((*source).CacheNodeIdsToReboot))
			for i := 0; i < len((*source).CacheNodeIdsToReboot); i++ {
				stringList[i] = (*source).CacheNodeIdsToReboot[i]
			}
		}
		typesCacheParameterGroupStatus.CacheNodeIdsToReboot = stringList
		var pString *string
		if (*source).CacheParameterGroupName != nil {
			xstring := *(*source).CacheParameterGroupName
			pString = &xstring
		}
		typesCacheParameterGroupStatus.CacheParameterGroupName = pString
		var pString2 *string
		if (*source).ParameterApplyStatus != nil {
			xstring2 := *(*source).ParameterApplyStatus
			pString2 = &xstring2
		}
		typesCacheParameterGroupStatus.ParameterApplyStatus = pString2
		pTypesCacheParameterGroupStatus = &typesCacheParameterGroupStatus
	}
	return pTypesCacheParameterGroupStatus
}
func (c *ConverterImpl) pTypesCloudWatchLogsDestinationDetailsToPTypesCloudWatchLogsDestinationDetails(source *types.CloudWatchLogsDestinationDetails) *types.CloudWatchLogsDestinationDetails {
	var pTypesCloudWatchLogsDestinationDetails *types.CloudWatchLogsDestinationDetails
	if source != nil {
		var typesCloudWatchLogsDestinationDetails types.CloudWatchLogsDestinationDetails
		var pString *string
		if (*source).LogGroup != nil {
			xstring := *(*source).LogGroup
			pString = &xstring
		}
		typesCloudWatchLogsDestinationDetails.LogGroup = pString
		pTypesCloudWatchLogsDestinationDetails = &typesCloudWatchLogsDestinationDetails
	}
	return pTypesCloudWatchLogsDestinationDetails
}
func (c *ConverterImpl) pTypesDestinationDetailsToPTypesDestinationDetails(source *types.DestinationDetails) *types.DestinationDetails {
	var pTypesDestinationDetails *types.DestinationDetails
	if source != nil {
		var typesDestinationDetails types.DestinationDetails
		typesDestinationDetails.CloudWatchLogsDetails = c.pTypesCloudWatchLogsDestinationDetailsToPTypesCloudWatchLogsDestinationDetails((*source).CloudWatchLogsDetails)
		typesDestinationDetails.KinesisFirehoseDetails = c.pTypesKinesisFirehoseDestinationDetailsToPTypesKinesisFirehoseDestinationDetails((*source).KinesisFirehoseDetails)
		pTypesDestinationDetails = &typesDestinationDetails
	}
	return pTypesDestinationDetails
}
func (c *ConverterImpl) pTypesEndpointToPTypesEndpoint(source *types.Endpoint) *types.Endpoint {
	var pTypesEndpoint *types.Endpoint
	if source != nil {
		var typesEndpoint types.Endpoint
		var pString *string
		if (*source).Address != nil {
			xstring := *(*source).Address
			pString = &xstring
		}
		typesEndpoint.Address = pString
		var pInt32 *int32
		if (*source).Port != nil {
			xint32 := *(*source).Port
			pInt32 = &xint32
		}
		typesEndpoint.Port = pInt32
		pTypesEndpoint = &typesEndpoint
	}
	return pTypesEndpoint
}
func (c *ConverterImpl) pTypesKinesisFirehoseDestinationDetailsToPTypesKinesisFirehoseDestinationDetails(source *types.KinesisFirehoseDestinationDetails) *types.KinesisFirehoseDestinationDetails {
	var pTypesKinesisFirehoseDestinationDetails *types.KinesisFirehoseDestinationDetails
	if source != nil {
		var typesKinesisFirehoseDestinationDetails types.KinesisFirehoseDestinationDetails
		var pString *string
		if (*source).DeliveryStream != nil {
			xstring := *(*source).DeliveryStream
			pString = &xstring
		}
		typesKinesisFirehoseDestinationDetails.DeliveryStream = pString
		pTypesKinesisFirehoseDestinationDetails = &typesKinesisFirehoseDestinationDetails
	}
	return pTypesKinesisFirehoseDestinationDetails
}
func (c *ConverterImpl) pTypesNotificationConfigurationToPTypesNotificationConfiguration(source *types.NotificationConfiguration) *types.NotificationConfiguration {
	var pTypesNotificationConfiguration *types.NotificationConfiguration
	if source != nil {
		var typesNotificationConfiguration types.NotificationConfiguration
		var pString *string
		if (*source).TopicArn != nil {
			xstring := *(*source).TopicArn
			pString = &xstring
		}
		typesNotificationConfiguration.TopicArn = pString
		var pString2 *string
		if (*source).TopicStatus != nil {
			xstring2 := *(*source).TopicStatus
			pString2 = &xstring2
		}
		typesNotificationConfiguration.TopicStatus = pString2
		pTypesNotificationConfiguration = &typesNotificationConfiguration
	}
	return pTypesNotificationConfiguration
}
func (c *ConverterImpl) pTypesPendingModifiedValuesToPTypesPendingModifiedValues(source *types.PendingModifiedValues) *types.PendingModifiedValues {
	var pTypesPendingModifiedValues *types.PendingModifiedValues
	if source != nil {
		var typesPendingModifiedValues types.PendingModifiedValues
		typesPendingModifiedValues.AuthTokenStatus = types.AuthTokenUpdateStatus((*source).AuthTokenStatus)
		var stringList []string
		if (*source).CacheNodeIdsToRemove != nil {
			stringList = make([]string, len((*source).CacheNodeIdsToRemove))
			for i := 0; i < len((*source).CacheNodeIdsToRemove); i++ {
				stringList[i] = (*source).CacheNodeIdsToRemove[i]
			}
		}
		typesPendingModifiedValues.CacheNodeIdsToRemove = stringList
		var pString *string
		if (*source).CacheNodeType != nil {
			xstring := *(*source).CacheNodeType
			pString = &xstring
		}
		typesPendingModifiedValues.CacheNodeType = pString
		var pString2 *string
		if (*source).EngineVersion != nil {
			xstring2 := *(*source).EngineVersion
			pString2 = &xstring2
		}
		typesPendingModifiedValues.EngineVersion = pString2
		var typesPendingLogDeliveryConfigurationList []types.PendingLogDeliveryConfiguration
		if (*source).LogDeliveryConfigurations != nil {
			typesPendingLogDeliveryConfigurationList = make([]types.PendingLogDeliveryConfiguration, len((*source).LogDeliveryConfigurations))
			for j := 0; j < len((*source).LogDeliveryConfigurations); j++ {
				typesPendingLogDeliveryConfigurationList[j] = c.typesPendingLogDeliveryConfigurationToTypesPendingLogDeliveryConfiguration((*source).LogDeliveryConfigurations[j])
			}
		}
		typesPendingModifiedValues.LogDeliveryConfigurations = typesPendingLogDeliveryConfigurationList
		var pInt32 *int32
		if (*source).NumCacheNodes != nil {
			xint32 := *(*source).NumCacheNodes
			pInt32 = &xint32
		}
		typesPendingModifiedValues.NumCacheNodes = pInt32
		var pBool *bool
		if (*source).TransitEncryptionEnabled != nil {
			xbool := *(*source).TransitEncryptionEnabled
			pBool = &xbool
		}
		typesPendingModifiedValues.TransitEncryptionEnabled = pBool
		typesPendingModifiedValues.TransitEncryptionMode = types.TransitEncryptionMode((*source).TransitEncryptionMode)
		pTypesPendingModifiedValues = &typesPendingModifiedValues
	}
	return pTypesPendingModifiedValues
}
func (c *ConverterImpl) typesCacheNodeToTypesCacheNode(source types.CacheNode) types.CacheNode {
	var typesCacheNode types.CacheNode
	typesCacheNode.CacheNodeCreateTime = c.pTimeTimeToPTimeTime(source.CacheNodeCreateTime)
	var pString *string
	if source.CacheNodeId != nil {
		xstring := *source.CacheNodeId
		pString = &xstring
	}
	typesCacheNode.CacheNodeId = pString
	var pString2 *string
	if source.CacheNodeStatus != nil {
		xstring2 := *source.CacheNodeStatus
		pString2 = &xstring2
	}
	typesCacheNode.CacheNodeStatus = pString2
	var pString3 *string
	if source.CustomerAvailabilityZone != nil {
		xstring3 := *source.CustomerAvailabilityZone
		pString3 = &xstring3
	}
	typesCacheNode.CustomerAvailabilityZone = pString3
	var pString4 *string
	if source.CustomerOutpostArn != nil {
		xstring4 := *source.CustomerOutpostArn
		pString4 = &xstring4
	}
	typesCacheNode.CustomerOutpostArn = pString4
	typesCacheNode.Endpoint = c.pTypesEndpointToPTypesEndpoint(source.Endpoint)
	var pString5 *string
	if source.ParameterGroupStatus != nil {
		xstring5 := *source.ParameterGroupStatus
		pString5 = &xstring5
	}
	typesCacheNode.ParameterGroupStatus = pString5
	var pString6 *string
	if source.SourceCacheNodeId != nil {
		xstring6 := *source.SourceCacheNodeId
		pString6 = &xstring6
	}
	typesCacheNode.SourceCacheNodeId = pString6
	return typesCacheNode
}
func (c *ConverterImpl) typesCacheSecurityGroupMembershipToTypesCacheSecurityGroupMembership(source types.CacheSecurityGroupMembership) types.CacheSecurityGroupMembership {
	var typesCacheSecurityGroupMembership types.CacheSecurityGroupMembership
	var pString *string
	if source.CacheSecurityGroupName != nil {
		xstring := *source.CacheSecurityGroupName
		pString = &xstring
	}
	typesCacheSecurityGroupMembership.CacheSecurityGroupName = pString
	var pString2 *string
	if source.Status != nil {
		xstring2 := *source.Status
		pString2 = &xstring2
	}
	typesCacheSecurityGroupMembership.Status = pString2
	return typesCacheSecurityGroupMembership
}
func (c *ConverterImpl) typesLogDeliveryConfigurationToTypesLogDeliveryConfiguration(source types.LogDeliveryConfiguration) types.LogDeliveryConfiguration {
	var typesLogDeliveryConfiguration types.LogDeliveryConfiguration
	typesLogDeliveryConfiguration.DestinationDetails = c.pTypesDestinationDetailsToPTypesDestinationDetails(source.DestinationDetails)
	typesLogDeliveryConfiguration.DestinationType = types.DestinationType(source.DestinationType)
	typesLogDeliveryConfiguration.LogFormat = types.LogFormat(source.LogFormat)
	typesLogDeliveryConfiguration.LogType = types.LogType(source.LogType)
	var pString *string
	if source.Message != nil {
		xstring := *source.Message
		pString = &xstring
	}
	typesLogDeliveryConfiguration.Message = pString
	typesLogDeliveryConfiguration.Status = types.LogDeliveryConfigurationStatus(source.Status)
	return typesLogDeliveryConfiguration
}
func (c *ConverterImpl) typesPendingLogDeliveryConfigurationToTypesPendingLogDeliveryConfiguration(source types.PendingLogDeliveryConfiguration) types.PendingLogDeliveryConfiguration {
	var typesPendingLogDeliveryConfiguration types.PendingLogDeliveryConfiguration
	typesPendingLogDeliveryConfiguration.DestinationDetails = c.pTypesDestinationDetailsToPTypesDestinationDetails(source.DestinationDetails)
	typesPendingLogDeliveryConfiguration.DestinationType = types.DestinationType(source.DestinationType)
	typesPendingLogDeliveryConfiguration.LogFormat = types.LogFormat(source.LogFormat)
	typesPendingLogDeliveryConfiguration.LogType = types.LogType(source.LogType)
	return typesPendingLogDeliveryConfiguration
}
func (c *ConverterImpl) typesSecurityGroupMembershipToTypesSecurityGroupMembership(source types.SecurityGroupMembership) types.SecurityGroupMembership {
	var typesSecurityGroupMembership types.SecurityGroupMembership
	var pString *string
	if source.SecurityGroupId != nil {
		xstring := *source.SecurityGroupId
		pString = &xstring
	}
	typesSecurityGroupMembership.SecurityGroupId = pString
	var pString2 *string
	if source.Status != nil {
		xstring2 := *source.Status
		pString2 = &xstring2
	}
	typesSecurityGroupMembership.Status = pString2
	return typesSecurityGroupMembership
}
